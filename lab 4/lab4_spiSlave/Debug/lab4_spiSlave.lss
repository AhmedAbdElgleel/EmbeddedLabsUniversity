
lab4_spiSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002e08  00002e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  00002ea4  2**0
                  ALLOC
  3 .stab         000022a4  00000000  00000000  00002ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001311  00000000  00000000  00005148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006459  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006599  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008352  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000923d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__vector_1>
       8:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_2>
       c:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e0       	ldi	r30, 0x08	; 8
      78:	fe e2       	ldi	r31, 0x2E	; 46
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 38 15 	call	0x2a70	; 0x2a70 <main>
      8a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <INT_init>:
/*
 * Description :
 * A function to initialize our external interrupt
 */
void INT_init(const Interrupt_Config* config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <INT_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01

	/* enable the interrupts for our chosen module*/
	GICR |= config->intNumber;
     b54:	ab e5       	ldi	r26, 0x5B	; 91
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	eb e5       	ldi	r30, 0x5B	; 91
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	90 81       	ld	r25, Z
     b5e:	e9 81       	ldd	r30, Y+1	; 0x01
     b60:	fa 81       	ldd	r31, Y+2	; 0x02
     b62:	80 81       	ld	r24, Z
     b64:	89 2b       	or	r24, r25
     b66:	8c 93       	st	X, r24

	/* selecting the mode for interrupt */

	/*for interrupt zero , we control it with the 2 LSBs in MCUCR */
	if( (config->intNumber) == INT0_ID)
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	80 81       	ld	r24, Z
     b6e:	80 34       	cpi	r24, 0x40	; 64
     b70:	59 f4       	brne	.+22     	; 0xb88 <INT_init+0x42>
	{
		MCUCR|=(config->intMode);
     b72:	a5 e5       	ldi	r26, 0x55	; 85
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e5 e5       	ldi	r30, 0x55	; 85
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	90 81       	ld	r25, Z
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	81 81       	ldd	r24, Z+1	; 0x01
     b82:	89 2b       	or	r24, r25
     b84:	8c 93       	st	X, r24
     b86:	34 c0       	rjmp	.+104    	; 0xbf0 <INT_init+0xaa>
	}

	/*for interrupt one , we control it with the 3rd and 4th bits in MCUCR */
	else if( (config->intNumber) == INT1_ID)
     b88:	e9 81       	ldd	r30, Y+1	; 0x01
     b8a:	fa 81       	ldd	r31, Y+2	; 0x02
     b8c:	80 81       	ld	r24, Z
     b8e:	80 38       	cpi	r24, 0x80	; 128
     b90:	91 f4       	brne	.+36     	; 0xbb6 <INT_init+0x70>
	{
		MCUCR |= ( (config->intMode) << 2);
     b92:	a5 e5       	ldi	r26, 0x55	; 85
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e5 e5       	ldi	r30, 0x55	; 85
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	28 2f       	mov	r18, r24
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	81 81       	ldd	r24, Z+1	; 0x01
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	82 2b       	or	r24, r18
     bb2:	8c 93       	st	X, r24
     bb4:	1d c0       	rjmp	.+58     	; 0xbf0 <INT_init+0xaa>
	}

	/*for interrupt one , we control it with the 6th bit in MCUCR */
	else if( (config->intNumber) == INT2_ID)
     bb6:	e9 81       	ldd	r30, Y+1	; 0x01
     bb8:	fa 81       	ldd	r31, Y+2	; 0x02
     bba:	80 81       	ld	r24, Z
     bbc:	80 32       	cpi	r24, 0x20	; 32
     bbe:	c1 f4       	brne	.+48     	; 0xbf0 <INT_init+0xaa>
	{
		/* 2 & 1 = 0 - > shift left by 6 and put in MCUCSR then 6th bit is 0 (falling edge)
		 * 3 & 1 = 1 - > shift left by 6 and put in MCUCSR then 6th bit is 1 (rising edge)
		 */
		MCUCSR |= ( (config->intMode) & 1 ) << 6;
     bc0:	a4 e5       	ldi	r26, 0x54	; 84
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e4 e5       	ldi	r30, 0x54	; 84
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	28 2f       	mov	r18, r24
     bcc:	e9 81       	ldd	r30, Y+1	; 0x01
     bce:	fa 81       	ldd	r31, Y+2	; 0x02
     bd0:	81 81       	ldd	r24, Z+1	; 0x01
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	81 70       	andi	r24, 0x01	; 1
     bd8:	90 70       	andi	r25, 0x00	; 0
     bda:	00 24       	eor	r0, r0
     bdc:	96 95       	lsr	r25
     bde:	87 95       	ror	r24
     be0:	07 94       	ror	r0
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	07 94       	ror	r0
     be8:	98 2f       	mov	r25, r24
     bea:	80 2d       	mov	r24, r0
     bec:	82 2b       	or	r24, r18
     bee:	8c 93       	st	X, r24
	}
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <INT_deInit>:
/*
 * Description :
 * A function to initialize our external interrupt
 */
void INT_deInit(const Interrupt_Config* config)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <INT_deInit+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01

	/* disable the interrupts for our chosen module*/
	GICR&=(~(config->intNumber));
     c08:	ab e5       	ldi	r26, 0x5B	; 91
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	eb e5       	ldi	r30, 0x5B	; 91
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	98 2f       	mov	r25, r24
     c14:	e9 81       	ldd	r30, Y+1	; 0x01
     c16:	fa 81       	ldd	r31, Y+2	; 0x02
     c18:	80 81       	ld	r24, Z
     c1a:	80 95       	com	r24
     c1c:	89 23       	and	r24, r25
     c1e:	8c 93       	st	X, r24
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <INT_changeConfig>:
/*
 * Description :
 * A function to change the interrupt cause mode
 */
void INT_changeConfig(const Interrupt_Config* config)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <INT_changeConfig+0x6>
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
	/* selecting the mode for interrupt */

	/*for interrupt zero , we control it with the 2 LSBs in MCUCR */
	if( (config->intNumber) == INT0_ID)
     c38:	e9 81       	ldd	r30, Y+1	; 0x01
     c3a:	fa 81       	ldd	r31, Y+2	; 0x02
     c3c:	80 81       	ld	r24, Z
     c3e:	80 34       	cpi	r24, 0x40	; 64
     c40:	59 f4       	brne	.+22     	; 0xc58 <INT_changeConfig+0x2e>
	{
		MCUCR|=(config->intMode);
     c42:	a5 e5       	ldi	r26, 0x55	; 85
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e5 e5       	ldi	r30, 0x55	; 85
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	90 81       	ld	r25, Z
     c4c:	e9 81       	ldd	r30, Y+1	; 0x01
     c4e:	fa 81       	ldd	r31, Y+2	; 0x02
     c50:	81 81       	ldd	r24, Z+1	; 0x01
     c52:	89 2b       	or	r24, r25
     c54:	8c 93       	st	X, r24
     c56:	34 c0       	rjmp	.+104    	; 0xcc0 <INT_changeConfig+0x96>
	}

	/*for interrupt one , we control it with the 3rd and 4th bits in MCUCR */
	else if( (config->intNumber) == INT1_ID)
     c58:	e9 81       	ldd	r30, Y+1	; 0x01
     c5a:	fa 81       	ldd	r31, Y+2	; 0x02
     c5c:	80 81       	ld	r24, Z
     c5e:	80 38       	cpi	r24, 0x80	; 128
     c60:	91 f4       	brne	.+36     	; 0xc86 <INT_changeConfig+0x5c>
	{
		MCUCR |= ( (config->intMode) << 2);
     c62:	a5 e5       	ldi	r26, 0x55	; 85
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e5 e5       	ldi	r30, 0x55	; 85
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	28 2f       	mov	r18, r24
     c6e:	e9 81       	ldd	r30, Y+1	; 0x01
     c70:	fa 81       	ldd	r31, Y+2	; 0x02
     c72:	81 81       	ldd	r24, Z+1	; 0x01
     c74:	88 2f       	mov	r24, r24
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	82 2b       	or	r24, r18
     c82:	8c 93       	st	X, r24
     c84:	1d c0       	rjmp	.+58     	; 0xcc0 <INT_changeConfig+0x96>
	}

	/*for interrupt one , we control it with the 6th bit in MCUCR */
	else if( (config->intNumber) == INT2_ID)
     c86:	e9 81       	ldd	r30, Y+1	; 0x01
     c88:	fa 81       	ldd	r31, Y+2	; 0x02
     c8a:	80 81       	ld	r24, Z
     c8c:	80 32       	cpi	r24, 0x20	; 32
     c8e:	c1 f4       	brne	.+48     	; 0xcc0 <INT_changeConfig+0x96>
	{
		/* 2 & 1 = 0 - > shift left by 6 and put in MCUCSR then 6th bit is 0 (falling edge)
		 * 3 & 1 = 1 - > shift left by 6 and put in MCUCSR then 6th bit is 1 (rising edge)
		 */
		MCUCSR |= ( (config->intMode) & 1 ) << 6;
     c90:	a4 e5       	ldi	r26, 0x54	; 84
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e4 e5       	ldi	r30, 0x54	; 84
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	28 2f       	mov	r18, r24
     c9c:	e9 81       	ldd	r30, Y+1	; 0x01
     c9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ca0:	81 81       	ldd	r24, Z+1	; 0x01
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	81 70       	andi	r24, 0x01	; 1
     ca8:	90 70       	andi	r25, 0x00	; 0
     caa:	00 24       	eor	r0, r0
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	07 94       	ror	r0
     cb2:	96 95       	lsr	r25
     cb4:	87 95       	ror	r24
     cb6:	07 94       	ror	r0
     cb8:	98 2f       	mov	r25, r24
     cba:	80 2d       	mov	r24, r0
     cbc:	82 2b       	or	r24, r18
     cbe:	8c 93       	st	X, r24
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <INT_setISR>:
/*
 * Description :
 * A function to set ISR function code using call back technique
 */
void INT_setISR(void (*ptr)(void) ,uint8 interruptNumber)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <INT_setISR+0x6>
     cd0:	0f 92       	push	r0
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	6b 83       	std	Y+3, r22	; 0x03
	if(interruptNumber < 3)
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	60 f4       	brcc	.+24     	; 0xcfa <INT_setISR+0x30>
		g_callBackPtr[interruptNumber] = ptr;
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	29 81       	ldd	r18, Y+1	; 0x01
     cea:	3a 81       	ldd	r19, Y+2	; 0x02
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	fc 01       	movw	r30, r24
     cf2:	e8 59       	subi	r30, 0x98	; 152
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	20 83       	st	Z, r18
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <__vector_1>:
/*
 * Description :
 * ISR of INT0
 */
ISR(INT0_vect)
{
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[0] != NULL_PTR)
     d30:	80 91 68 00 	lds	r24, 0x0068
     d34:	90 91 69 00 	lds	r25, 0x0069
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	29 f0       	breq	.+10     	; 0xd46 <__vector_1+0x40>
	{
		g_callBackPtr[0]();
     d3c:	e0 91 68 00 	lds	r30, 0x0068
     d40:	f0 91 69 00 	lds	r31, 0x0069
     d44:	09 95       	icall
	}

}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <__vector_2>:
/*
 * Description :
 * ISR of INT1
 */
ISR(INT1_vect)
{
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[1] != NULL_PTR)
     d96:	80 91 6a 00 	lds	r24, 0x006A
     d9a:	90 91 6b 00 	lds	r25, 0x006B
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	29 f0       	breq	.+10     	; 0xdac <__vector_2+0x40>
	{
		g_callBackPtr[1]();
     da2:	e0 91 6a 00 	lds	r30, 0x006A
     da6:	f0 91 6b 00 	lds	r31, 0x006B
     daa:	09 95       	icall
	}
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_3>:
/*
 * Description :
 * ISR of INT2
 */
ISR(INT2_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[2] != NULL_PTR)
     dfc:	80 91 6c 00 	lds	r24, 0x006C
     e00:	90 91 6d 00 	lds	r25, 0x006D
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	29 f0       	breq	.+10     	; 0xe12 <__vector_3+0x40>
	{
		g_callBackPtr[2]();
     e08:	e0 91 6c 00 	lds	r30, 0x006C
     e0c:	f0 91 6d 00 	lds	r31, 0x006D
     e10:	09 95       	icall
	}
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <GPIO_setupPinDirection+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <GPIO_setupPinDirection+0x8>
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	6a 83       	std	Y+2, r22	; 0x02
     e4a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	88 30       	cpi	r24, 0x08	; 8
     e50:	08 f0       	brcs	.+2      	; 0xe54 <GPIO_setupPinDirection+0x1c>
     e52:	d5 c0       	rjmp	.+426    	; 0xffe <GPIO_setupPinDirection+0x1c6>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	08 f0       	brcs	.+2      	; 0xe5c <GPIO_setupPinDirection+0x24>
     e5a:	d1 c0       	rjmp	.+418    	; 0xffe <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	3d 83       	std	Y+5, r19	; 0x05
     e64:	2c 83       	std	Y+4, r18	; 0x04
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <GPIO_setupPinDirection+0x3a>
     e70:	43 c0       	rjmp	.+134    	; 0xef8 <GPIO_setupPinDirection+0xc0>
     e72:	2c 81       	ldd	r18, Y+4	; 0x04
     e74:	3d 81       	ldd	r19, Y+5	; 0x05
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	2c f4       	brge	.+10     	; 0xe86 <GPIO_setupPinDirection+0x4e>
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	71 f0       	breq	.+28     	; 0xea0 <GPIO_setupPinDirection+0x68>
     e84:	bc c0       	rjmp	.+376    	; 0xffe <GPIO_setupPinDirection+0x1c6>
     e86:	2c 81       	ldd	r18, Y+4	; 0x04
     e88:	3d 81       	ldd	r19, Y+5	; 0x05
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <GPIO_setupPinDirection+0x5a>
     e90:	5f c0       	rjmp	.+190    	; 0xf50 <GPIO_setupPinDirection+0x118>
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	9d 81       	ldd	r25, Y+5	; 0x05
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <GPIO_setupPinDirection+0x66>
     e9c:	85 c0       	rjmp	.+266    	; 0xfa8 <GPIO_setupPinDirection+0x170>
     e9e:	af c0       	rjmp	.+350    	; 0xffe <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	a1 f4       	brne	.+40     	; 0xece <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(GPIO_DDRA_REG.Byte,pin_num);
     ea6:	aa e3       	ldi	r26, 0x3A	; 58
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e3       	ldi	r30, 0x3A	; 58
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <GPIO_setupPinDirection+0x8c>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <GPIO_setupPinDirection+0x88>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	98 c0       	rjmp	.+304    	; 0xffe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRA_REG.Byte,pin_num);
     ece:	aa e3       	ldi	r26, 0x3A	; 58
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ea e3       	ldi	r30, 0x3A	; 58
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <GPIO_setupPinDirection+0xb4>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <GPIO_setupPinDirection+0xb0>
     ef0:	80 95       	com	r24
     ef2:	84 23       	and	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	83 c0       	rjmp	.+262    	; 0xffe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	a1 f4       	brne	.+40     	; 0xf26 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(GPIO_DDRB_REG.Byte,pin_num);
     efe:	a7 e3       	ldi	r26, 0x37	; 55
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e3       	ldi	r30, 0x37	; 55
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <GPIO_setupPinDirection+0xe4>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <GPIO_setupPinDirection+0xe0>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	6c c0       	rjmp	.+216    	; 0xffe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRB_REG.Byte,pin_num);
     f26:	a7 e3       	ldi	r26, 0x37	; 55
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e3       	ldi	r30, 0x37	; 55
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <GPIO_setupPinDirection+0x10c>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <GPIO_setupPinDirection+0x108>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	57 c0       	rjmp	.+174    	; 0xffe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	a1 f4       	brne	.+40     	; 0xf7e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(GPIO_DDRC_REG.Byte,pin_num);
     f56:	a4 e3       	ldi	r26, 0x34	; 52
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e4 e3       	ldi	r30, 0x34	; 52
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <GPIO_setupPinDirection+0x13c>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <GPIO_setupPinDirection+0x138>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	40 c0       	rjmp	.+128    	; 0xffe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRC_REG.Byte,pin_num);
     f7e:	a4 e3       	ldi	r26, 0x34	; 52
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e4 e3       	ldi	r30, 0x34	; 52
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <GPIO_setupPinDirection+0x164>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <GPIO_setupPinDirection+0x160>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	2b c0       	rjmp	.+86     	; 0xffe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	a1 f4       	brne	.+40     	; 0xfd6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(GPIO_DDRD_REG.Byte,pin_num);
     fae:	a1 e3       	ldi	r26, 0x31	; 49
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e1 e3       	ldi	r30, 0x31	; 49
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <GPIO_setupPinDirection+0x194>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <GPIO_setupPinDirection+0x190>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRD_REG.Byte,pin_num);
     fd6:	a1 e3       	ldi	r26, 0x31	; 49
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 e3       	ldi	r30, 0x31	; 49
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <GPIO_setupPinDirection+0x1bc>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <GPIO_setupPinDirection+0x1b8>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <GPIO_writePin+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <GPIO_writePin+0x8>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	6a 83       	std	Y+2, r22	; 0x02
    1020:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	08 f0       	brcs	.+2      	; 0x102a <GPIO_writePin+0x1c>
    1028:	d5 c0       	rjmp	.+426    	; 0x11d4 <GPIO_writePin+0x1c6>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	08 f0       	brcs	.+2      	; 0x1032 <GPIO_writePin+0x24>
    1030:	d1 c0       	rjmp	.+418    	; 0x11d4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3d 83       	std	Y+5, r19	; 0x05
    103a:	2c 83       	std	Y+4, r18	; 0x04
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <GPIO_writePin+0x3a>
    1046:	43 c0       	rjmp	.+134    	; 0x10ce <GPIO_writePin+0xc0>
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <GPIO_writePin+0x4e>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	9d 81       	ldd	r25, Y+5	; 0x05
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	71 f0       	breq	.+28     	; 0x1076 <GPIO_writePin+0x68>
    105a:	bc c0       	rjmp	.+376    	; 0x11d4 <GPIO_writePin+0x1c6>
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <GPIO_writePin+0x5a>
    1066:	5f c0       	rjmp	.+190    	; 0x1126 <GPIO_writePin+0x118>
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <GPIO_writePin+0x66>
    1072:	85 c0       	rjmp	.+266    	; 0x117e <GPIO_writePin+0x170>
    1074:	af c0       	rjmp	.+350    	; 0x11d4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	a1 f4       	brne	.+40     	; 0x10a4 <GPIO_writePin+0x96>
			{
				SET_BIT(GPIO_PORTA_REG.Byte,pin_num);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_writePin+0x8c>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_writePin+0x88>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	98 c0       	rjmp	.+304    	; 0x11d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTA_REG.Byte,pin_num);
    10a4:	ab e3       	ldi	r26, 0x3B	; 59
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	eb e3       	ldi	r30, 0x3B	; 59
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <GPIO_writePin+0xb4>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <GPIO_writePin+0xb0>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	83 c0       	rjmp	.+262    	; 0x11d4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	a1 f4       	brne	.+40     	; 0x10fc <GPIO_writePin+0xee>
			{
				SET_BIT(GPIO_PORTB_REG.Byte,pin_num);
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_writePin+0xe4>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_writePin+0xe0>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	6c c0       	rjmp	.+216    	; 0x11d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTB_REG.Byte,pin_num);
    10fc:	a8 e3       	ldi	r26, 0x38	; 56
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e3       	ldi	r30, 0x38	; 56
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_writePin+0x10c>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_writePin+0x108>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	57 c0       	rjmp	.+174    	; 0x11d4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	a1 f4       	brne	.+40     	; 0x1154 <GPIO_writePin+0x146>
			{
				SET_BIT(GPIO_PORTC_REG.Byte,pin_num);
    112c:	a5 e3       	ldi	r26, 0x35	; 53
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e3       	ldi	r30, 0x35	; 53
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <GPIO_writePin+0x13c>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <GPIO_writePin+0x138>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	40 c0       	rjmp	.+128    	; 0x11d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTC_REG.Byte,pin_num);
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_writePin+0x164>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_writePin+0x160>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	2b c0       	rjmp	.+86     	; 0x11d4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	a1 f4       	brne	.+40     	; 0x11ac <GPIO_writePin+0x19e>
			{
				SET_BIT(GPIO_PORTD_REG.Byte,pin_num);
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_writePin+0x194>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_writePin+0x190>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	14 c0       	rjmp	.+40     	; 0x11d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTD_REG.Byte,pin_num);
    11ac:	a2 e3       	ldi	r26, 0x32	; 50
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <GPIO_writePin+0x1bc>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <GPIO_writePin+0x1b8>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <GPIO_readPin+0x6>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <GPIO_readPin+0x8>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	8a 83       	std	Y+2, r24	; 0x02
    11f4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11f6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	88 30       	cpi	r24, 0x08	; 8
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <GPIO_readPin+0x1c>
    11fe:	84 c0       	rjmp	.+264    	; 0x1308 <GPIO_readPin+0x124>
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	08 f0       	brcs	.+2      	; 0x1208 <GPIO_readPin+0x24>
    1206:	80 c0       	rjmp	.+256    	; 0x1308 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3d 83       	std	Y+5, r19	; 0x05
    1210:	2c 83       	std	Y+4, r18	; 0x04
    1212:	4c 81       	ldd	r20, Y+4	; 0x04
    1214:	5d 81       	ldd	r21, Y+5	; 0x05
    1216:	41 30       	cpi	r20, 0x01	; 1
    1218:	51 05       	cpc	r21, r1
    121a:	79 f1       	breq	.+94     	; 0x127a <GPIO_readPin+0x96>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	91 05       	cpc	r25, r1
    1224:	34 f4       	brge	.+12     	; 0x1232 <GPIO_readPin+0x4e>
    1226:	2c 81       	ldd	r18, Y+4	; 0x04
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	21 15       	cp	r18, r1
    122c:	31 05       	cpc	r19, r1
    122e:	69 f0       	breq	.+26     	; 0x124a <GPIO_readPin+0x66>
    1230:	6b c0       	rjmp	.+214    	; 0x1308 <GPIO_readPin+0x124>
    1232:	4c 81       	ldd	r20, Y+4	; 0x04
    1234:	5d 81       	ldd	r21, Y+5	; 0x05
    1236:	42 30       	cpi	r20, 0x02	; 2
    1238:	51 05       	cpc	r21, r1
    123a:	b9 f1       	breq	.+110    	; 0x12aa <GPIO_readPin+0xc6>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <GPIO_readPin+0x64>
    1246:	49 c0       	rjmp	.+146    	; 0x12da <GPIO_readPin+0xf6>
    1248:	5f c0       	rjmp	.+190    	; 0x1308 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(GPIO_PINA_REG.Byte,pin_num))
    124a:	e9 e3       	ldi	r30, 0x39	; 57
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_readPin+0x7e>
    125e:	55 95       	asr	r21
    1260:	47 95       	ror	r20
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_readPin+0x7a>
    1266:	ca 01       	movw	r24, r20
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	90 70       	andi	r25, 0x00	; 0
    126c:	88 23       	and	r24, r24
    126e:	19 f0       	breq	.+6      	; 0x1276 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	49 c0       	rjmp	.+146    	; 0x1308 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1276:	19 82       	std	Y+1, r1	; 0x01
    1278:	47 c0       	rjmp	.+142    	; 0x1308 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(GPIO_PINB_REG.Byte,pin_num))
    127a:	e6 e3       	ldi	r30, 0x36	; 54
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a9 01       	movw	r20, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <GPIO_readPin+0xae>
    128e:	55 95       	asr	r21
    1290:	47 95       	ror	r20
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <GPIO_readPin+0xaa>
    1296:	ca 01       	movw	r24, r20
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	90 70       	andi	r25, 0x00	; 0
    129c:	88 23       	and	r24, r24
    129e:	19 f0       	breq	.+6      	; 0x12a6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	31 c0       	rjmp	.+98     	; 0x1308 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12a6:	19 82       	std	Y+1, r1	; 0x01
    12a8:	2f c0       	rjmp	.+94     	; 0x1308 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(GPIO_PINC_REG.Byte,pin_num))
    12aa:	e3 e3       	ldi	r30, 0x33	; 51
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_readPin+0xde>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_readPin+0xda>
    12c6:	ca 01       	movw	r24, r20
    12c8:	81 70       	andi	r24, 0x01	; 1
    12ca:	90 70       	andi	r25, 0x00	; 0
    12cc:	88 23       	and	r24, r24
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	19 c0       	rjmp	.+50     	; 0x1308 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12d6:	19 82       	std	Y+1, r1	; 0x01
    12d8:	17 c0       	rjmp	.+46     	; 0x1308 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(GPIO_PIND_REG.Byte,pin_num))
    12da:	e0 e3       	ldi	r30, 0x30	; 48
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a9 01       	movw	r20, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_readPin+0x10e>
    12ee:	55 95       	asr	r21
    12f0:	47 95       	ror	r20
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_readPin+0x10a>
    12f6:	ca 01       	movw	r24, r20
    12f8:	81 70       	andi	r24, 0x01	; 1
    12fa:	90 70       	andi	r25, 0x00	; 0
    12fc:	88 23       	and	r24, r24
    12fe:	19 f0       	breq	.+6      	; 0x1306 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1306:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1308:	89 81       	ldd	r24, Y+1	; 0x01
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <GPIO_togglePin>:

void GPIO_togglePin(uint8 port_num, uint8 pin_num)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_togglePin+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <GPIO_togglePin+0x8>
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	88 30       	cpi	r24, 0x08	; 8
    132e:	08 f0       	brcs	.+2      	; 0x1332 <GPIO_togglePin+0x18>
    1330:	72 c0       	rjmp	.+228    	; 0x1416 <GPIO_togglePin+0xfc>
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	08 f0       	brcs	.+2      	; 0x133a <GPIO_togglePin+0x20>
    1338:	6e c0       	rjmp	.+220    	; 0x1416 <GPIO_togglePin+0xfc>
		/* Do Nothing */
	}
	else
	{
		/* toggle the pin value as required */
		switch(port_num)
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3c 83       	std	Y+4, r19	; 0x04
    1342:	2b 83       	std	Y+3, r18	; 0x03
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	49 f1       	breq	.+82     	; 0x13a0 <GPIO_togglePin+0x86>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <GPIO_togglePin+0x48>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 f0       	breq	.+24     	; 0x1378 <GPIO_togglePin+0x5e>
    1360:	5a c0       	rjmp	.+180    	; 0x1416 <GPIO_togglePin+0xfc>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	71 f1       	breq	.+92     	; 0x13c8 <GPIO_togglePin+0xae>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	e9 f1       	breq	.+122    	; 0x13f0 <GPIO_togglePin+0xd6>
    1376:	4f c0       	rjmp	.+158    	; 0x1416 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(GPIO_PORTA_REG.Byte,pin_num);
    1378:	ab e3       	ldi	r26, 0x3B	; 59
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	eb e3       	ldi	r30, 0x3B	; 59
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_togglePin+0x7c>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_togglePin+0x78>
    139a:	84 27       	eor	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	3b c0       	rjmp	.+118    	; 0x1416 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(GPIO_PORTB_REG.Byte,pin_num);
    13a0:	a8 e3       	ldi	r26, 0x38	; 56
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e8 e3       	ldi	r30, 0x38	; 56
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <GPIO_togglePin+0xa4>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <GPIO_togglePin+0xa0>
    13c2:	84 27       	eor	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	27 c0       	rjmp	.+78     	; 0x1416 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(GPIO_PORTC_REG.Byte,pin_num);
    13c8:	a5 e3       	ldi	r26, 0x35	; 53
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e3       	ldi	r30, 0x35	; 53
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <GPIO_togglePin+0xcc>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <GPIO_togglePin+0xc8>
    13ea:	84 27       	eor	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	13 c0       	rjmp	.+38     	; 0x1416 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(GPIO_PORTD_REG.Byte,pin_num);
    13f0:	a2 e3       	ldi	r26, 0x32	; 50
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e2 e3       	ldi	r30, 0x32	; 50
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <GPIO_togglePin+0xf4>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <GPIO_togglePin+0xf0>
    1412:	84 27       	eor	r24, r20
    1414:	8c 93       	st	X, r24
			break;
		}
	}
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <GPIO_setupPortDirection+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <GPIO_setupPortDirection+0x8>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	90 f5       	brcc	.+100    	; 0x149e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	d1 f0       	breq	.+52     	; 0x1482 <GPIO_setupPortDirection+0x5e>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <GPIO_setupPortDirection+0x3e>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 f0       	breq	.+24     	; 0x1478 <GPIO_setupPortDirection+0x54>
    1460:	1e c0       	rjmp	.+60     	; 0x149e <GPIO_setupPortDirection+0x7a>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <GPIO_setupPortDirection+0x68>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <GPIO_setupPortDirection+0x72>
    1476:	13 c0       	rjmp	.+38     	; 0x149e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			GPIO_DDRA_REG.Byte=direction;
    1478:	ea e3       	ldi	r30, 0x3A	; 58
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	0e c0       	rjmp	.+28     	; 0x149e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			GPIO_DDRB_REG.Byte=direction;
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	09 c0       	rjmp	.+18     	; 0x149e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			GPIO_DDRC_REG.Byte=direction;
    148c:	e4 e3       	ldi	r30, 0x34	; 52
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	04 c0       	rjmp	.+8      	; 0x149e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			GPIO_DDRD_REG.Byte=direction;
    1496:	e1 e3       	ldi	r30, 0x31	; 49
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
			break;
		}
	}
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <GPIO_writePort+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <GPIO_writePort+0x8>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	84 30       	cpi	r24, 0x04	; 4
    14c0:	90 f5       	brcc	.+100    	; 0x1526 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3c 83       	std	Y+4, r19	; 0x04
    14ca:	2b 83       	std	Y+3, r18	; 0x03
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	d1 f0       	breq	.+52     	; 0x150a <GPIO_writePort+0x5e>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <GPIO_writePort+0x3e>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	61 f0       	breq	.+24     	; 0x1500 <GPIO_writePort+0x54>
    14e8:	1e c0       	rjmp	.+60     	; 0x1526 <GPIO_writePort+0x7a>
    14ea:	2b 81       	ldd	r18, Y+3	; 0x03
    14ec:	3c 81       	ldd	r19, Y+4	; 0x04
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	81 f0       	breq	.+32     	; 0x1514 <GPIO_writePort+0x68>
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <GPIO_writePort+0x72>
    14fe:	13 c0       	rjmp	.+38     	; 0x1526 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			GPIO_PORTA_REG.Byte = value;
    1500:	eb e3       	ldi	r30, 0x3B	; 59
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
    1508:	0e c0       	rjmp	.+28     	; 0x1526 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			GPIO_PORTB_REG.Byte = value;
    150a:	e8 e3       	ldi	r30, 0x38	; 56
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			GPIO_PORTC_REG.Byte = value;
    1514:	e5 e3       	ldi	r30, 0x35	; 53
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	80 83       	st	Z, r24
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			GPIO_PORTD_REG.Byte = value;
    151e:	e2 e3       	ldi	r30, 0x32	; 50
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
			break;
		}
	}
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <GPIO_readPort+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <GPIO_readPort+0x8>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1542:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	90 f5       	brcc	.+100    	; 0x15ae <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3c 83       	std	Y+4, r19	; 0x04
    1552:	2b 83       	std	Y+3, r18	; 0x03
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	d1 f0       	breq	.+52     	; 0x1592 <GPIO_readPort+0x5e>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <GPIO_readPort+0x3e>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	61 f0       	breq	.+24     	; 0x1588 <GPIO_readPort+0x54>
    1570:	1e c0       	rjmp	.+60     	; 0x15ae <GPIO_readPort+0x7a>
    1572:	2b 81       	ldd	r18, Y+3	; 0x03
    1574:	3c 81       	ldd	r19, Y+4	; 0x04
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	81 f0       	breq	.+32     	; 0x159c <GPIO_readPort+0x68>
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <GPIO_readPort+0x72>
    1586:	13 c0       	rjmp	.+38     	; 0x15ae <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = GPIO_PINA_REG.Byte;
    1588:	e9 e3       	ldi	r30, 0x39	; 57
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = GPIO_PINB_REG.Byte;
    1592:	e6 e3       	ldi	r30, 0x36	; 54
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = GPIO_PINC_REG.Byte;
    159c:	e3 e3       	ldi	r30, 0x33	; 51
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = GPIO_PIND_REG.Byte;
    15a6:	e0 e3       	ldi	r30, 0x30	; 48
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	2e 97       	sbiw	r28, 0x0e	; 14
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 1c 07 	call	0xe38	; 0xe38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	62 e0       	ldi	r22, 0x02	; 2
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	0e 94 1c 07 	call	0xe38	; 0xe38 <GPIO_setupPinDirection>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 ea       	ldi	r26, 0xA0	; 160
    15ec:	b1 e4       	ldi	r27, 0x41	; 65
    15ee:	8b 87       	std	Y+11, r24	; 0x0b
    15f0:	9c 87       	std	Y+12, r25	; 0x0c
    15f2:	ad 87       	std	Y+13, r26	; 0x0d
    15f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a e7       	ldi	r20, 0x7A	; 122
    1604:	55 e4       	ldi	r21, 0x45	; 69
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8f 83       	std	Y+7, r24	; 0x07
    1610:	98 87       	std	Y+8, r25	; 0x08
    1612:	a9 87       	std	Y+9, r26	; 0x09
    1614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <LCD_init+0x7a>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1638:	6f 81       	ldd	r22, Y+7	; 0x07
    163a:	78 85       	ldd	r23, Y+8	; 0x08
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	6b 85       	ldd	r22, Y+11	; 0x0b
    1652:	7c 85       	ldd	r23, Y+12	; 0x0c
    1654:	8d 85       	ldd	r24, Y+13	; 0x0d
    1656:	9e 85       	ldd	r25, Y+14	; 0x0e
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <LCD_init+0xda>
    167a:	80 e9       	ldi	r24, 0x90	; 144
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <LCD_init+0xc8>
    168a:	9c 83       	std	Y+4, r25	; 0x04
    168c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <LCD_init+0xbc>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6f 81       	ldd	r22, Y+7	; 0x07
    16a4:	78 85       	ldd	r23, Y+8	; 0x08
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_init+0x104>
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	63 e0       	ldi	r22, 0x03	; 3
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 1c 07 	call	0xe38	; 0xe38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	64 e0       	ldi	r22, 0x04	; 4
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 1c 07 	call	0xe38	; 0xe38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	65 e0       	ldi	r22, 0x05	; 5
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 1c 07 	call	0xe38	; 0xe38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	66 e0       	ldi	r22, 0x06	; 6
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 1c 07 	call	0xe38	; 0xe38 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    16f2:	83 e3       	ldi	r24, 0x33	; 51
    16f4:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    16f8:	82 e3       	ldi	r24, 0x32	; 50
    16fa:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    16fe:	88 e2       	ldi	r24, 0x28	; 40
    1700:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1704:	8c e0       	ldi	r24, 0x0C	; 12
    1706:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_sendCommand>
}
    1710:	2e 96       	adiw	r28, 0x0e	; 14
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	c3 56       	subi	r28, 0x63	; 99
    1730:	d0 40       	sbci	r29, 0x00	; 0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	fe 01       	movw	r30, r28
    173e:	ed 59       	subi	r30, 0x9D	; 157
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    174e:	fe 01       	movw	r30, r28
    1750:	e1 5a       	subi	r30, 0xA1	; 161
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a0 e8       	ldi	r26, 0x80	; 128
    175a:	bf e3       	ldi	r27, 0x3F	; 63
    175c:	80 83       	st	Z, r24
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	a2 83       	std	Z+2, r26	; 0x02
    1762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	8e 01       	movw	r16, r28
    1766:	05 5a       	subi	r16, 0xA5	; 165
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	fe 01       	movw	r30, r28
    176c:	e1 5a       	subi	r30, 0xA1	; 161
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	55 e4       	ldi	r21, 0x45	; 69
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	f8 01       	movw	r30, r16
    178a:	80 83       	st	Z, r24
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1792:	fe 01       	movw	r30, r28
    1794:	e5 5a       	subi	r30, 0xA5	; 165
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	44 f4       	brge	.+16     	; 0x17c0 <LCD_sendCommand+0x9e>
		__ticks = 1;
    17b0:	fe 01       	movw	r30, r28
    17b2:	e7 5a       	subi	r30, 0xA7	; 167
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
    17be:	64 c0       	rjmp	.+200    	; 0x1888 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    17c0:	fe 01       	movw	r30, r28
    17c2:	e5 5a       	subi	r30, 0xA5	; 165
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <LCD_sendCommand+0xbe>
    17de:	43 c0       	rjmp	.+134    	; 0x1866 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	fe 01       	movw	r30, r28
    17e2:	e1 5a       	subi	r30, 0xA1	; 161
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8e 01       	movw	r16, r28
    1800:	07 5a       	subi	r16, 0xA7	; 167
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	1f c0       	rjmp	.+62     	; 0x1856 <LCD_sendCommand+0x134>
    1818:	fe 01       	movw	r30, r28
    181a:	e9 5a       	subi	r30, 0xA9	; 169
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 e9       	ldi	r24, 0x90	; 144
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	fe 01       	movw	r30, r28
    1828:	e9 5a       	subi	r30, 0xA9	; 169
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_sendCommand+0x10e>
    1834:	fe 01       	movw	r30, r28
    1836:	e9 5a       	subi	r30, 0xA9	; 169
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	de 01       	movw	r26, r28
    1840:	a7 5a       	subi	r26, 0xA7	; 167
    1842:	bf 4f       	sbci	r27, 0xFF	; 255
    1844:	fe 01       	movw	r30, r28
    1846:	e7 5a       	subi	r30, 0xA7	; 167
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	11 96       	adiw	r26, 0x01	; 1
    1852:	9c 93       	st	X, r25
    1854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	fe 01       	movw	r30, r28
    1858:	e7 5a       	subi	r30, 0xA7	; 167
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	d1 f6       	brne	.-76     	; 0x1818 <LCD_sendCommand+0xf6>
    1864:	27 c0       	rjmp	.+78     	; 0x18b4 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	8e 01       	movw	r16, r28
    1868:	07 5a       	subi	r16, 0xA7	; 167
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	fe 01       	movw	r30, r28
    186e:	e5 5a       	subi	r30, 0xA5	; 165
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	de 01       	movw	r26, r28
    188a:	ab 5a       	subi	r26, 0xAB	; 171
    188c:	bf 4f       	sbci	r27, 0xFF	; 255
    188e:	fe 01       	movw	r30, r28
    1890:	e7 5a       	subi	r30, 0xA7	; 167
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	8d 93       	st	X+, r24
    189a:	9c 93       	st	X, r25
    189c:	fe 01       	movw	r30, r28
    189e:	eb 5a       	subi	r30, 0xAB	; 171
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD_sendCommand+0x184>
    18aa:	fe 01       	movw	r30, r28
    18ac:	eb 5a       	subi	r30, 0xAB	; 171
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	62 e0       	ldi	r22, 0x02	; 2
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    18be:	fe 01       	movw	r30, r28
    18c0:	ef 5a       	subi	r30, 0xAF	; 175
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e8       	ldi	r26, 0x80	; 128
    18ca:	bf e3       	ldi	r27, 0x3F	; 63
    18cc:	80 83       	st	Z, r24
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	a2 83       	std	Z+2, r26	; 0x02
    18d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	8e 01       	movw	r16, r28
    18d6:	03 5b       	subi	r16, 0xB3	; 179
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	fe 01       	movw	r30, r28
    18dc:	ef 5a       	subi	r30, 0xAF	; 175
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a e7       	ldi	r20, 0x7A	; 122
    18ee:	55 e4       	ldi	r21, 0x45	; 69
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	f8 01       	movw	r30, r16
    18fa:	80 83       	st	Z, r24
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	a2 83       	std	Z+2, r26	; 0x02
    1900:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1902:	fe 01       	movw	r30, r28
    1904:	e3 5b       	subi	r30, 0xB3	; 179
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	44 f4       	brge	.+16     	; 0x1930 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1920:	fe 01       	movw	r30, r28
    1922:	e5 5b       	subi	r30, 0xB5	; 181
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
    192e:	64 c0       	rjmp	.+200    	; 0x19f8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1930:	fe 01       	movw	r30, r28
    1932:	e3 5b       	subi	r30, 0xB3	; 179
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	0c f0       	brlt	.+2      	; 0x1950 <LCD_sendCommand+0x22e>
    194e:	43 c0       	rjmp	.+134    	; 0x19d6 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	fe 01       	movw	r30, r28
    1952:	ef 5a       	subi	r30, 0xAF	; 175
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8e 01       	movw	r16, r28
    1970:	05 5b       	subi	r16, 0xB5	; 181
    1972:	1f 4f       	sbci	r17, 0xFF	; 255
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	f8 01       	movw	r30, r16
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
    1986:	1f c0       	rjmp	.+62     	; 0x19c6 <LCD_sendCommand+0x2a4>
    1988:	fe 01       	movw	r30, r28
    198a:	e7 5b       	subi	r30, 0xB7	; 183
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 e9       	ldi	r24, 0x90	; 144
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	fe 01       	movw	r30, r28
    1998:	e7 5b       	subi	r30, 0xB7	; 183
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_sendCommand+0x27e>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e7 5b       	subi	r30, 0xB7	; 183
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	de 01       	movw	r26, r28
    19b0:	a5 5b       	subi	r26, 0xB5	; 181
    19b2:	bf 4f       	sbci	r27, 0xFF	; 255
    19b4:	fe 01       	movw	r30, r28
    19b6:	e5 5b       	subi	r30, 0xB5	; 181
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	9c 93       	st	X, r25
    19c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	fe 01       	movw	r30, r28
    19c8:	e5 5b       	subi	r30, 0xB5	; 181
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	d1 f6       	brne	.-76     	; 0x1988 <LCD_sendCommand+0x266>
    19d4:	27 c0       	rjmp	.+78     	; 0x1a24 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	8e 01       	movw	r16, r28
    19d8:	05 5b       	subi	r16, 0xB5	; 181
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	fe 01       	movw	r30, r28
    19de:	e3 5b       	subi	r30, 0xB3	; 179
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	f8 01       	movw	r30, r16
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
    19f8:	de 01       	movw	r26, r28
    19fa:	a9 5b       	subi	r26, 0xB9	; 185
    19fc:	bf 4f       	sbci	r27, 0xFF	; 255
    19fe:	fe 01       	movw	r30, r28
    1a00:	e5 5b       	subi	r30, 0xB5	; 181
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	8d 93       	st	X+, r24
    1a0a:	9c 93       	st	X, r25
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e9 5b       	subi	r30, 0xB9	; 185
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_sendCommand+0x2f4>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e9 5b       	subi	r30, 0xB9	; 185
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1a24:	fe 01       	movw	r30, r28
    1a26:	ed 59       	subi	r30, 0x9D	; 157
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	80 71       	andi	r24, 0x10	; 16
    1a32:	90 70       	andi	r25, 0x00	; 0
    1a34:	95 95       	asr	r25
    1a36:	87 95       	ror	r24
    1a38:	95 95       	asr	r25
    1a3a:	87 95       	ror	r24
    1a3c:	95 95       	asr	r25
    1a3e:	87 95       	ror	r24
    1a40:	95 95       	asr	r25
    1a42:	87 95       	ror	r24
    1a44:	98 2f       	mov	r25, r24
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	63 e0       	ldi	r22, 0x03	; 3
    1a4a:	49 2f       	mov	r20, r25
    1a4c:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1a50:	fe 01       	movw	r30, r28
    1a52:	ed 59       	subi	r30, 0x9D	; 157
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 81       	ld	r24, Z
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	80 72       	andi	r24, 0x20	; 32
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	95 95       	asr	r25
    1a62:	87 95       	ror	r24
    1a64:	95 95       	asr	r25
    1a66:	87 95       	ror	r24
    1a68:	95 95       	asr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	95 95       	asr	r25
    1a6e:	87 95       	ror	r24
    1a70:	95 95       	asr	r25
    1a72:	87 95       	ror	r24
    1a74:	98 2f       	mov	r25, r24
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	64 e0       	ldi	r22, 0x04	; 4
    1a7a:	49 2f       	mov	r20, r25
    1a7c:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1a80:	fe 01       	movw	r30, r28
    1a82:	ed 59       	subi	r30, 0x9D	; 157
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	80 74       	andi	r24, 0x40	; 64
    1a8e:	90 70       	andi	r25, 0x00	; 0
    1a90:	08 2e       	mov	r0, r24
    1a92:	89 2f       	mov	r24, r25
    1a94:	00 0c       	add	r0, r0
    1a96:	88 1f       	adc	r24, r24
    1a98:	99 0b       	sbc	r25, r25
    1a9a:	00 0c       	add	r0, r0
    1a9c:	88 1f       	adc	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	65 e0       	ldi	r22, 0x05	; 5
    1aa6:	49 2f       	mov	r20, r25
    1aa8:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1aac:	fe 01       	movw	r30, r28
    1aae:	ed 59       	subi	r30, 0x9D	; 157
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	99 27       	eor	r25, r25
    1aba:	99 1f       	adc	r25, r25
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	66 e0       	ldi	r22, 0x06	; 6
    1ac0:	49 2f       	mov	r20, r25
    1ac2:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ed 5b       	subi	r30, 0xBD	; 189
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e8       	ldi	r26, 0x80	; 128
    1ad2:	bf e3       	ldi	r27, 0x3F	; 63
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	8e 01       	movw	r16, r28
    1ade:	01 5c       	subi	r16, 0xC1	; 193
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ed 5b       	subi	r30, 0xBD	; 189
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a e7       	ldi	r20, 0x7A	; 122
    1af6:	55 e4       	ldi	r21, 0x45	; 69
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	a2 83       	std	Z+2, r26	; 0x02
    1b08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	ff 96       	adiw	r30, 0x3f	; 63
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9e af       	std	Y+62, r25	; 0x3e
    1b2c:	8d af       	std	Y+61, r24	; 0x3d
    1b2e:	46 c0       	rjmp	.+140    	; 0x1bbc <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1b30:	fe 01       	movw	r30, r28
    1b32:	ff 96       	adiw	r30, 0x3f	; 63
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	64 f5       	brge	.+88     	; 0x1ba4 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ed 5b       	subi	r30, 0xBD	; 189
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	60 81       	ld	r22, Z
    1b54:	71 81       	ldd	r23, Z+1	; 0x01
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e af       	std	Y+62, r25	; 0x3e
    1b78:	8d af       	std	Y+61, r24	; 0x3d
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_sendCommand+0x478>
    1b7c:	80 e9       	ldi	r24, 0x90	; 144
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	9c af       	std	Y+60, r25	; 0x3c
    1b82:	8b af       	std	Y+59, r24	; 0x3b
    1b84:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b86:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_sendCommand+0x466>
    1b8c:	9c af       	std	Y+60, r25	; 0x3c
    1b8e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9e af       	std	Y+62, r25	; 0x3e
    1b98:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_sendCommand+0x45a>
    1ba2:	16 c0       	rjmp	.+44     	; 0x1bd0 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ff 96       	adiw	r30, 0x3f	; 63
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9e af       	std	Y+62, r25	; 0x3e
    1bba:	8d af       	std	Y+61, r24	; 0x3d
    1bbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc0:	9a af       	std	Y+58, r25	; 0x3a
    1bc2:	89 af       	std	Y+57, r24	; 0x39
    1bc4:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_sendCommand+0x4a6>
    1bcc:	9a af       	std	Y+58, r25	; 0x3a
    1bce:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	62 e0       	ldi	r22, 0x02	; 2
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	8d ab       	std	Y+53, r24	; 0x35
    1be4:	9e ab       	std	Y+54, r25	; 0x36
    1be6:	af ab       	std	Y+55, r26	; 0x37
    1be8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6d a9       	ldd	r22, Y+53	; 0x35
    1bec:	7e a9       	ldd	r23, Y+54	; 0x36
    1bee:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	55 e4       	ldi	r21, 0x45	; 69
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	89 ab       	std	Y+49, r24	; 0x31
    1c04:	9a ab       	std	Y+50, r25	; 0x32
    1c06:	ab ab       	std	Y+51, r26	; 0x33
    1c08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c10:	9c a9       	ldd	r25, Y+52	; 0x34
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_sendCommand+0x50a>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	98 ab       	std	Y+48, r25	; 0x30
    1c28:	8f a7       	std	Y+47, r24	; 0x2f
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c30:	8b a9       	ldd	r24, Y+51	; 0x33
    1c32:	9c a9       	ldd	r25, Y+52	; 0x34
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6d a9       	ldd	r22, Y+53	; 0x35
    1c46:	7e a9       	ldd	r23, Y+54	; 0x36
    1c48:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	98 ab       	std	Y+48, r25	; 0x30
    1c6a:	8f a7       	std	Y+47, r24	; 0x2f
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_sendCommand+0x56a>
    1c6e:	80 e9       	ldi	r24, 0x90	; 144
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	9e a7       	std	Y+46, r25	; 0x2e
    1c74:	8d a7       	std	Y+45, r24	; 0x2d
    1c76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_sendCommand+0x558>
    1c7e:	9e a7       	std	Y+46, r25	; 0x2e
    1c80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c84:	98 a9       	ldd	r25, Y+48	; 0x30
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	98 ab       	std	Y+48, r25	; 0x30
    1c8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_sendCommand+0x54c>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	69 a9       	ldd	r22, Y+49	; 0x31
    1c98:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	98 ab       	std	Y+48, r25	; 0x30
    1ca8:	8f a7       	std	Y+47, r24	; 0x2f
    1caa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cac:	98 a9       	ldd	r25, Y+48	; 0x30
    1cae:	9c a7       	std	Y+44, r25	; 0x2c
    1cb0:	8b a7       	std	Y+43, r24	; 0x2b
    1cb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_sendCommand+0x594>
    1cba:	9c a7       	std	Y+44, r25	; 0x2c
    1cbc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	62 e0       	ldi	r22, 0x02	; 2
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a0 e8       	ldi	r26, 0x80	; 128
    1cce:	bf e3       	ldi	r27, 0x3F	; 63
    1cd0:	8f a3       	std	Y+39, r24	; 0x27
    1cd2:	98 a7       	std	Y+40, r25	; 0x28
    1cd4:	a9 a7       	std	Y+41, r26	; 0x29
    1cd6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cda:	78 a5       	ldd	r23, Y+40	; 0x28
    1cdc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a e7       	ldi	r20, 0x7A	; 122
    1ce6:	55 e4       	ldi	r21, 0x45	; 69
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8b a3       	std	Y+35, r24	; 0x23
    1cf2:	9c a3       	std	Y+36, r25	; 0x24
    1cf4:	ad a3       	std	Y+37, r26	; 0x25
    1cf6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
    1d18:	3f c0       	rjmp	.+126    	; 0x1d98 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1d1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d20:	9e a1       	ldd	r25, Y+38	; 0x26
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	4c f5       	brge	.+82     	; 0x1d84 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d32:	6f a1       	ldd	r22, Y+39	; 0x27
    1d34:	78 a5       	ldd	r23, Y+40	; 0x28
    1d36:	89 a5       	ldd	r24, Y+41	; 0x29
    1d38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9a a3       	std	Y+34, r25	; 0x22
    1d58:	89 a3       	std	Y+33, r24	; 0x21
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <LCD_sendCommand+0x658>
    1d5c:	80 e9       	ldi	r24, 0x90	; 144
    1d5e:	91 e0       	ldi	r25, 0x01	; 1
    1d60:	98 a3       	std	Y+32, r25	; 0x20
    1d62:	8f 8f       	std	Y+31, r24	; 0x1f
    1d64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d66:	98 a1       	ldd	r25, Y+32	; 0x20
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_sendCommand+0x646>
    1d6c:	98 a3       	std	Y+32, r25	; 0x20
    1d6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	89 a1       	ldd	r24, Y+33	; 0x21
    1d72:	9a a1       	ldd	r25, Y+34	; 0x22
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	9a a3       	std	Y+34, r25	; 0x22
    1d78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <LCD_sendCommand+0x63a>
    1d82:	14 c0       	rjmp	.+40     	; 0x1dac <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	6b a1       	ldd	r22, Y+35	; 0x23
    1d86:	7c a1       	ldd	r23, Y+36	; 0x24
    1d88:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9a a3       	std	Y+34, r25	; 0x22
    1d96:	89 a3       	std	Y+33, r24	; 0x21
    1d98:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1da0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_sendCommand+0x682>
    1da8:	9e 8f       	std	Y+30, r25	; 0x1e
    1daa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1dac:	fe 01       	movw	r30, r28
    1dae:	ed 59       	subi	r30, 0x9D	; 157
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	98 2f       	mov	r25, r24
    1db6:	91 70       	andi	r25, 0x01	; 1
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	63 e0       	ldi	r22, 0x03	; 3
    1dbc:	49 2f       	mov	r20, r25
    1dbe:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	ed 59       	subi	r30, 0x9D	; 157
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	82 70       	andi	r24, 0x02	; 2
    1dd0:	90 70       	andi	r25, 0x00	; 0
    1dd2:	95 95       	asr	r25
    1dd4:	87 95       	ror	r24
    1dd6:	98 2f       	mov	r25, r24
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	64 e0       	ldi	r22, 0x04	; 4
    1ddc:	49 2f       	mov	r20, r25
    1dde:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1de2:	fe 01       	movw	r30, r28
    1de4:	ed 59       	subi	r30, 0x9D	; 157
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	84 70       	andi	r24, 0x04	; 4
    1df0:	90 70       	andi	r25, 0x00	; 0
    1df2:	95 95       	asr	r25
    1df4:	87 95       	ror	r24
    1df6:	95 95       	asr	r25
    1df8:	87 95       	ror	r24
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	65 e0       	ldi	r22, 0x05	; 5
    1e00:	49 2f       	mov	r20, r25
    1e02:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1e06:	fe 01       	movw	r30, r28
    1e08:	ed 59       	subi	r30, 0x9D	; 157
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	88 70       	andi	r24, 0x08	; 8
    1e14:	90 70       	andi	r25, 0x00	; 0
    1e16:	95 95       	asr	r25
    1e18:	87 95       	ror	r24
    1e1a:	95 95       	asr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	95 95       	asr	r25
    1e20:	87 95       	ror	r24
    1e22:	98 2f       	mov	r25, r24
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	66 e0       	ldi	r22, 0x06	; 6
    1e28:	49 2f       	mov	r20, r25
    1e2a:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e8       	ldi	r26, 0x80	; 128
    1e34:	bf e3       	ldi	r27, 0x3F	; 63
    1e36:	89 8f       	std	Y+25, r24	; 0x19
    1e38:	9a 8f       	std	Y+26, r25	; 0x1a
    1e3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a e7       	ldi	r20, 0x7A	; 122
    1e4c:	55 e4       	ldi	r21, 0x45	; 69
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8d 8b       	std	Y+21, r24	; 0x15
    1e58:	9e 8b       	std	Y+22, r25	; 0x16
    1e5a:	af 8b       	std	Y+23, r26	; 0x17
    1e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9c 8b       	std	Y+20, r25	; 0x14
    1e7c:	8b 8b       	std	Y+19, r24	; 0x13
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	69 8d       	ldd	r22, Y+25	; 0x19
    1e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <LCD_sendCommand+0x7be>
    1ec2:	80 e9       	ldi	r24, 0x90	; 144
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
    1eca:	89 89       	ldd	r24, Y+17	; 0x11
    1ecc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_sendCommand+0x7ac>
    1ed2:	9a 8b       	std	Y+18, r25	; 0x12
    1ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9c 8b       	std	Y+20, r25	; 0x14
    1ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <LCD_sendCommand+0x7a0>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6d 89       	ldd	r22, Y+21	; 0x15
    1eec:	7e 89       	ldd	r23, Y+22	; 0x16
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	98 89       	ldd	r25, Y+16	; 0x10
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_sendCommand+0x7e8>
    1f0e:	98 8b       	std	Y+16, r25	; 0x10
    1f10:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	62 e0       	ldi	r22, 0x02	; 2
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e8       	ldi	r26, 0x80	; 128
    1f22:	bf e3       	ldi	r27, 0x3F	; 63
    1f24:	8b 87       	std	Y+11, r24	; 0x0b
    1f26:	9c 87       	std	Y+12, r25	; 0x0c
    1f28:	ad 87       	std	Y+13, r26	; 0x0d
    1f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	55 e4       	ldi	r21, 0x45	; 69
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8f 83       	std	Y+7, r24	; 0x07
    1f46:	98 87       	std	Y+8, r25	; 0x08
    1f48:	a9 87       	std	Y+9, r26	; 0x09
    1f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <LCD_sendCommand+0x84c>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <LCD_sendCommand+0x8ac>
    1fb0:	80 e9       	ldi	r24, 0x90	; 144
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_sendCommand+0x89a>
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <LCD_sendCommand+0x88e>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_sendCommand+0x8d6>
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2000:	cd 59       	subi	r28, 0x9D	; 157
    2002:	df 4f       	sbci	r29, 0xFF	; 255
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	08 95       	ret

00002018 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	c3 56       	subi	r28, 0x63	; 99
    2026:	d0 40       	sbci	r29, 0x00	; 0
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	fe 01       	movw	r30, r28
    2034:	ed 59       	subi	r30, 0x9D	; 157
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    2044:	fe 01       	movw	r30, r28
    2046:	e1 5a       	subi	r30, 0xA1	; 161
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	80 83       	st	Z, r24
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	a2 83       	std	Z+2, r26	; 0x02
    2058:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	8e 01       	movw	r16, r28
    205c:	05 5a       	subi	r16, 0xA5	; 165
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	fe 01       	movw	r30, r28
    2062:	e1 5a       	subi	r30, 0xA1	; 161
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a e7       	ldi	r20, 0x7A	; 122
    2074:	55 e4       	ldi	r21, 0x45	; 69
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	f8 01       	movw	r30, r16
    2080:	80 83       	st	Z, r24
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	a2 83       	std	Z+2, r26	; 0x02
    2086:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2088:	fe 01       	movw	r30, r28
    208a:	e5 5a       	subi	r30, 0xA5	; 165
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	44 f4       	brge	.+16     	; 0x20b6 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    20a6:	fe 01       	movw	r30, r28
    20a8:	e7 5a       	subi	r30, 0xA7	; 167
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
    20b4:	64 c0       	rjmp	.+200    	; 0x217e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    20b6:	fe 01       	movw	r30, r28
    20b8:	e5 5a       	subi	r30, 0xA5	; 165
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	0c f0       	brlt	.+2      	; 0x20d6 <LCD_displayCharacter+0xbe>
    20d4:	43 c0       	rjmp	.+134    	; 0x215c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	fe 01       	movw	r30, r28
    20d8:	e1 5a       	subi	r30, 0xA1	; 161
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8e 01       	movw	r16, r28
    20f6:	07 5a       	subi	r16, 0xA7	; 167
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	f8 01       	movw	r30, r16
    2108:	91 83       	std	Z+1, r25	; 0x01
    210a:	80 83       	st	Z, r24
    210c:	1f c0       	rjmp	.+62     	; 0x214c <LCD_displayCharacter+0x134>
    210e:	fe 01       	movw	r30, r28
    2110:	e9 5a       	subi	r30, 0xA9	; 169
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 e9       	ldi	r24, 0x90	; 144
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
    211c:	fe 01       	movw	r30, r28
    211e:	e9 5a       	subi	r30, 0xA9	; 169
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_displayCharacter+0x10e>
    212a:	fe 01       	movw	r30, r28
    212c:	e9 5a       	subi	r30, 0xA9	; 169
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	de 01       	movw	r26, r28
    2136:	a7 5a       	subi	r26, 0xA7	; 167
    2138:	bf 4f       	sbci	r27, 0xFF	; 255
    213a:	fe 01       	movw	r30, r28
    213c:	e7 5a       	subi	r30, 0xA7	; 167
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	11 96       	adiw	r26, 0x01	; 1
    2148:	9c 93       	st	X, r25
    214a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	fe 01       	movw	r30, r28
    214e:	e7 5a       	subi	r30, 0xA7	; 167
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	d1 f6       	brne	.-76     	; 0x210e <LCD_displayCharacter+0xf6>
    215a:	27 c0       	rjmp	.+78     	; 0x21aa <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215c:	8e 01       	movw	r16, r28
    215e:	07 5a       	subi	r16, 0xA7	; 167
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	fe 01       	movw	r30, r28
    2164:	e5 5a       	subi	r30, 0xA5	; 165
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	f8 01       	movw	r30, r16
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
    217e:	de 01       	movw	r26, r28
    2180:	ab 5a       	subi	r26, 0xAB	; 171
    2182:	bf 4f       	sbci	r27, 0xFF	; 255
    2184:	fe 01       	movw	r30, r28
    2186:	e7 5a       	subi	r30, 0xA7	; 167
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	8d 93       	st	X+, r24
    2190:	9c 93       	st	X, r25
    2192:	fe 01       	movw	r30, r28
    2194:	eb 5a       	subi	r30, 0xAB	; 171
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_displayCharacter+0x184>
    21a0:	fe 01       	movw	r30, r28
    21a2:	eb 5a       	subi	r30, 0xAB	; 171
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	62 e0       	ldi	r22, 0x02	; 2
    21ae:	41 e0       	ldi	r20, 0x01	; 1
    21b0:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    21b4:	fe 01       	movw	r30, r28
    21b6:	ef 5a       	subi	r30, 0xAF	; 175
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 e8       	ldi	r26, 0x80	; 128
    21c0:	bf e3       	ldi	r27, 0x3F	; 63
    21c2:	80 83       	st	Z, r24
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	a2 83       	std	Z+2, r26	; 0x02
    21c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	8e 01       	movw	r16, r28
    21cc:	03 5b       	subi	r16, 0xB3	; 179
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
    21d0:	fe 01       	movw	r30, r28
    21d2:	ef 5a       	subi	r30, 0xAF	; 175
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4a e7       	ldi	r20, 0x7A	; 122
    21e4:	55 e4       	ldi	r21, 0x45	; 69
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	f8 01       	movw	r30, r16
    21f0:	80 83       	st	Z, r24
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	a2 83       	std	Z+2, r26	; 0x02
    21f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21f8:	fe 01       	movw	r30, r28
    21fa:	e3 5b       	subi	r30, 0xB3	; 179
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2212:	88 23       	and	r24, r24
    2214:	44 f4       	brge	.+16     	; 0x2226 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2216:	fe 01       	movw	r30, r28
    2218:	e5 5b       	subi	r30, 0xB5	; 181
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	80 83       	st	Z, r24
    2224:	64 c0       	rjmp	.+200    	; 0x22ee <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2226:	fe 01       	movw	r30, r28
    2228:	e3 5b       	subi	r30, 0xB3	; 179
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	0c f0       	brlt	.+2      	; 0x2246 <LCD_displayCharacter+0x22e>
    2244:	43 c0       	rjmp	.+134    	; 0x22cc <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	fe 01       	movw	r30, r28
    2248:	ef 5a       	subi	r30, 0xAF	; 175
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	8e 01       	movw	r16, r28
    2266:	05 5b       	subi	r16, 0xB5	; 181
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	f8 01       	movw	r30, r16
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	80 83       	st	Z, r24
    227c:	1f c0       	rjmp	.+62     	; 0x22bc <LCD_displayCharacter+0x2a4>
    227e:	fe 01       	movw	r30, r28
    2280:	e7 5b       	subi	r30, 0xB7	; 183
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 e9       	ldi	r24, 0x90	; 144
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	80 83       	st	Z, r24
    228c:	fe 01       	movw	r30, r28
    228e:	e7 5b       	subi	r30, 0xB7	; 183
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_displayCharacter+0x27e>
    229a:	fe 01       	movw	r30, r28
    229c:	e7 5b       	subi	r30, 0xB7	; 183
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a4:	de 01       	movw	r26, r28
    22a6:	a5 5b       	subi	r26, 0xB5	; 181
    22a8:	bf 4f       	sbci	r27, 0xFF	; 255
    22aa:	fe 01       	movw	r30, r28
    22ac:	e5 5b       	subi	r30, 0xB5	; 181
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	11 96       	adiw	r26, 0x01	; 1
    22b8:	9c 93       	st	X, r25
    22ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	fe 01       	movw	r30, r28
    22be:	e5 5b       	subi	r30, 0xB5	; 181
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	d1 f6       	brne	.-76     	; 0x227e <LCD_displayCharacter+0x266>
    22ca:	27 c0       	rjmp	.+78     	; 0x231a <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	8e 01       	movw	r16, r28
    22ce:	05 5b       	subi	r16, 0xB5	; 181
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	fe 01       	movw	r30, r28
    22d4:	e3 5b       	subi	r30, 0xB3	; 179
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	f8 01       	movw	r30, r16
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	80 83       	st	Z, r24
    22ee:	de 01       	movw	r26, r28
    22f0:	a9 5b       	subi	r26, 0xB9	; 185
    22f2:	bf 4f       	sbci	r27, 0xFF	; 255
    22f4:	fe 01       	movw	r30, r28
    22f6:	e5 5b       	subi	r30, 0xB5	; 181
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	8d 93       	st	X+, r24
    2300:	9c 93       	st	X, r25
    2302:	fe 01       	movw	r30, r28
    2304:	e9 5b       	subi	r30, 0xB9	; 185
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_displayCharacter+0x2f4>
    2310:	fe 01       	movw	r30, r28
    2312:	e9 5b       	subi	r30, 0xB9	; 185
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	91 83       	std	Z+1, r25	; 0x01
    2318:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    231a:	fe 01       	movw	r30, r28
    231c:	ed 59       	subi	r30, 0x9D	; 157
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	80 71       	andi	r24, 0x10	; 16
    2328:	90 70       	andi	r25, 0x00	; 0
    232a:	95 95       	asr	r25
    232c:	87 95       	ror	r24
    232e:	95 95       	asr	r25
    2330:	87 95       	ror	r24
    2332:	95 95       	asr	r25
    2334:	87 95       	ror	r24
    2336:	95 95       	asr	r25
    2338:	87 95       	ror	r24
    233a:	98 2f       	mov	r25, r24
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	63 e0       	ldi	r22, 0x03	; 3
    2340:	49 2f       	mov	r20, r25
    2342:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2346:	fe 01       	movw	r30, r28
    2348:	ed 59       	subi	r30, 0x9D	; 157
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	80 72       	andi	r24, 0x20	; 32
    2354:	90 70       	andi	r25, 0x00	; 0
    2356:	95 95       	asr	r25
    2358:	87 95       	ror	r24
    235a:	95 95       	asr	r25
    235c:	87 95       	ror	r24
    235e:	95 95       	asr	r25
    2360:	87 95       	ror	r24
    2362:	95 95       	asr	r25
    2364:	87 95       	ror	r24
    2366:	95 95       	asr	r25
    2368:	87 95       	ror	r24
    236a:	98 2f       	mov	r25, r24
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	64 e0       	ldi	r22, 0x04	; 4
    2370:	49 2f       	mov	r20, r25
    2372:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2376:	fe 01       	movw	r30, r28
    2378:	ed 59       	subi	r30, 0x9D	; 157
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	80 74       	andi	r24, 0x40	; 64
    2384:	90 70       	andi	r25, 0x00	; 0
    2386:	08 2e       	mov	r0, r24
    2388:	89 2f       	mov	r24, r25
    238a:	00 0c       	add	r0, r0
    238c:	88 1f       	adc	r24, r24
    238e:	99 0b       	sbc	r25, r25
    2390:	00 0c       	add	r0, r0
    2392:	88 1f       	adc	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	98 2f       	mov	r25, r24
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	65 e0       	ldi	r22, 0x05	; 5
    239c:	49 2f       	mov	r20, r25
    239e:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    23a2:	fe 01       	movw	r30, r28
    23a4:	ed 59       	subi	r30, 0x9D	; 157
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	98 2f       	mov	r25, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	99 27       	eor	r25, r25
    23b0:	99 1f       	adc	r25, r25
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	66 e0       	ldi	r22, 0x06	; 6
    23b6:	49 2f       	mov	r20, r25
    23b8:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    23bc:	fe 01       	movw	r30, r28
    23be:	ed 5b       	subi	r30, 0xBD	; 189
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e8       	ldi	r26, 0x80	; 128
    23c8:	bf e3       	ldi	r27, 0x3F	; 63
    23ca:	80 83       	st	Z, r24
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	a2 83       	std	Z+2, r26	; 0x02
    23d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	8e 01       	movw	r16, r28
    23d4:	01 5c       	subi	r16, 0xC1	; 193
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	fe 01       	movw	r30, r28
    23da:	ed 5b       	subi	r30, 0xBD	; 189
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a e7       	ldi	r20, 0x7A	; 122
    23ec:	55 e4       	ldi	r21, 0x45	; 69
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	f8 01       	movw	r30, r16
    23f8:	80 83       	st	Z, r24
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	a2 83       	std	Z+2, r26	; 0x02
    23fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2400:	fe 01       	movw	r30, r28
    2402:	ff 96       	adiw	r30, 0x3f	; 63
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e8       	ldi	r20, 0x80	; 128
    2412:	5f e3       	ldi	r21, 0x3F	; 63
    2414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2418:	88 23       	and	r24, r24
    241a:	2c f4       	brge	.+10     	; 0x2426 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9e af       	std	Y+62, r25	; 0x3e
    2422:	8d af       	std	Y+61, r24	; 0x3d
    2424:	46 c0       	rjmp	.+140    	; 0x24b2 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2426:	fe 01       	movw	r30, r28
    2428:	ff 96       	adiw	r30, 0x3f	; 63
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	57 e4       	ldi	r21, 0x47	; 71
    243a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    243e:	18 16       	cp	r1, r24
    2440:	64 f5       	brge	.+88     	; 0x249a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2442:	fe 01       	movw	r30, r28
    2444:	ed 5b       	subi	r30, 0xBD	; 189
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9e af       	std	Y+62, r25	; 0x3e
    246e:	8d af       	std	Y+61, r24	; 0x3d
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <LCD_displayCharacter+0x478>
    2472:	80 e9       	ldi	r24, 0x90	; 144
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	9c af       	std	Y+60, r25	; 0x3c
    2478:	8b af       	std	Y+59, r24	; 0x3b
    247a:	8b ad       	ldd	r24, Y+59	; 0x3b
    247c:	9c ad       	ldd	r25, Y+60	; 0x3c
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_displayCharacter+0x466>
    2482:	9c af       	std	Y+60, r25	; 0x3c
    2484:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8d ad       	ldd	r24, Y+61	; 0x3d
    2488:	9e ad       	ldd	r25, Y+62	; 0x3e
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9e af       	std	Y+62, r25	; 0x3e
    248e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8d ad       	ldd	r24, Y+61	; 0x3d
    2492:	9e ad       	ldd	r25, Y+62	; 0x3e
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <LCD_displayCharacter+0x45a>
    2498:	16 c0       	rjmp	.+44     	; 0x24c6 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	fe 01       	movw	r30, r28
    249c:	ff 96       	adiw	r30, 0x3f	; 63
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9e af       	std	Y+62, r25	; 0x3e
    24b0:	8d af       	std	Y+61, r24	; 0x3d
    24b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    24b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    24b6:	9a af       	std	Y+58, r25	; 0x3a
    24b8:	89 af       	std	Y+57, r24	; 0x39
    24ba:	89 ad       	ldd	r24, Y+57	; 0x39
    24bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <LCD_displayCharacter+0x4a6>
    24c2:	9a af       	std	Y+58, r25	; 0x3a
    24c4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	62 e0       	ldi	r22, 0x02	; 2
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 e8       	ldi	r26, 0x80	; 128
    24d6:	bf e3       	ldi	r27, 0x3F	; 63
    24d8:	8d ab       	std	Y+53, r24	; 0x35
    24da:	9e ab       	std	Y+54, r25	; 0x36
    24dc:	af ab       	std	Y+55, r26	; 0x37
    24de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	6d a9       	ldd	r22, Y+53	; 0x35
    24e2:	7e a9       	ldd	r23, Y+54	; 0x36
    24e4:	8f a9       	ldd	r24, Y+55	; 0x37
    24e6:	98 ad       	ldd	r25, Y+56	; 0x38
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a e7       	ldi	r20, 0x7A	; 122
    24ee:	55 e4       	ldi	r21, 0x45	; 69
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	89 ab       	std	Y+49, r24	; 0x31
    24fa:	9a ab       	std	Y+50, r25	; 0x32
    24fc:	ab ab       	std	Y+51, r26	; 0x33
    24fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2500:	69 a9       	ldd	r22, Y+49	; 0x31
    2502:	7a a9       	ldd	r23, Y+50	; 0x32
    2504:	8b a9       	ldd	r24, Y+51	; 0x33
    2506:	9c a9       	ldd	r25, Y+52	; 0x34
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	98 ab       	std	Y+48, r25	; 0x30
    251e:	8f a7       	std	Y+47, r24	; 0x2f
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2522:	69 a9       	ldd	r22, Y+49	; 0x31
    2524:	7a a9       	ldd	r23, Y+50	; 0x32
    2526:	8b a9       	ldd	r24, Y+51	; 0x33
    2528:	9c a9       	ldd	r25, Y+52	; 0x34
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	6d a9       	ldd	r22, Y+53	; 0x35
    253c:	7e a9       	ldd	r23, Y+54	; 0x36
    253e:	8f a9       	ldd	r24, Y+55	; 0x37
    2540:	98 ad       	ldd	r25, Y+56	; 0x38
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	98 ab       	std	Y+48, r25	; 0x30
    2560:	8f a7       	std	Y+47, r24	; 0x2f
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <LCD_displayCharacter+0x56a>
    2564:	80 e9       	ldi	r24, 0x90	; 144
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	9e a7       	std	Y+46, r25	; 0x2e
    256a:	8d a7       	std	Y+45, r24	; 0x2d
    256c:	8d a5       	ldd	r24, Y+45	; 0x2d
    256e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_displayCharacter+0x558>
    2574:	9e a7       	std	Y+46, r25	; 0x2e
    2576:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8f a5       	ldd	r24, Y+47	; 0x2f
    257a:	98 a9       	ldd	r25, Y+48	; 0x30
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	98 ab       	std	Y+48, r25	; 0x30
    2580:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8f a5       	ldd	r24, Y+47	; 0x2f
    2584:	98 a9       	ldd	r25, Y+48	; 0x30
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <LCD_displayCharacter+0x54c>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	69 a9       	ldd	r22, Y+49	; 0x31
    258e:	7a a9       	ldd	r23, Y+50	; 0x32
    2590:	8b a9       	ldd	r24, Y+51	; 0x33
    2592:	9c a9       	ldd	r25, Y+52	; 0x34
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	98 ab       	std	Y+48, r25	; 0x30
    259e:	8f a7       	std	Y+47, r24	; 0x2f
    25a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a2:	98 a9       	ldd	r25, Y+48	; 0x30
    25a4:	9c a7       	std	Y+44, r25	; 0x2c
    25a6:	8b a7       	std	Y+43, r24	; 0x2b
    25a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_displayCharacter+0x594>
    25b0:	9c a7       	std	Y+44, r25	; 0x2c
    25b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	62 e0       	ldi	r22, 0x02	; 2
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a0 e8       	ldi	r26, 0x80	; 128
    25c4:	bf e3       	ldi	r27, 0x3F	; 63
    25c6:	8f a3       	std	Y+39, r24	; 0x27
    25c8:	98 a7       	std	Y+40, r25	; 0x28
    25ca:	a9 a7       	std	Y+41, r26	; 0x29
    25cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ce:	6f a1       	ldd	r22, Y+39	; 0x27
    25d0:	78 a5       	ldd	r23, Y+40	; 0x28
    25d2:	89 a5       	ldd	r24, Y+41	; 0x29
    25d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a e7       	ldi	r20, 0x7A	; 122
    25dc:	55 e4       	ldi	r21, 0x45	; 69
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8b a3       	std	Y+35, r24	; 0x23
    25e8:	9c a3       	std	Y+36, r25	; 0x24
    25ea:	ad a3       	std	Y+37, r26	; 0x25
    25ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25ee:	6b a1       	ldd	r22, Y+35	; 0x23
    25f0:	7c a1       	ldd	r23, Y+36	; 0x24
    25f2:	8d a1       	ldd	r24, Y+37	; 0x25
    25f4:	9e a1       	ldd	r25, Y+38	; 0x26
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	2c f4       	brge	.+10     	; 0x2610 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9a a3       	std	Y+34, r25	; 0x22
    260c:	89 a3       	std	Y+33, r24	; 0x21
    260e:	3f c0       	rjmp	.+126    	; 0x268e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2610:	6b a1       	ldd	r22, Y+35	; 0x23
    2612:	7c a1       	ldd	r23, Y+36	; 0x24
    2614:	8d a1       	ldd	r24, Y+37	; 0x25
    2616:	9e a1       	ldd	r25, Y+38	; 0x26
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	4c f5       	brge	.+82     	; 0x267a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	6f a1       	ldd	r22, Y+39	; 0x27
    262a:	78 a5       	ldd	r23, Y+40	; 0x28
    262c:	89 a5       	ldd	r24, Y+41	; 0x29
    262e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9a a3       	std	Y+34, r25	; 0x22
    264e:	89 a3       	std	Y+33, r24	; 0x21
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <LCD_displayCharacter+0x658>
    2652:	80 e9       	ldi	r24, 0x90	; 144
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	98 a3       	std	Y+32, r25	; 0x20
    2658:	8f 8f       	std	Y+31, r24	; 0x1f
    265a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    265c:	98 a1       	ldd	r25, Y+32	; 0x20
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <LCD_displayCharacter+0x646>
    2662:	98 a3       	std	Y+32, r25	; 0x20
    2664:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2666:	89 a1       	ldd	r24, Y+33	; 0x21
    2668:	9a a1       	ldd	r25, Y+34	; 0x22
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	9a a3       	std	Y+34, r25	; 0x22
    266e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2670:	89 a1       	ldd	r24, Y+33	; 0x21
    2672:	9a a1       	ldd	r25, Y+34	; 0x22
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	69 f7       	brne	.-38     	; 0x2652 <LCD_displayCharacter+0x63a>
    2678:	14 c0       	rjmp	.+40     	; 0x26a2 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267a:	6b a1       	ldd	r22, Y+35	; 0x23
    267c:	7c a1       	ldd	r23, Y+36	; 0x24
    267e:	8d a1       	ldd	r24, Y+37	; 0x25
    2680:	9e a1       	ldd	r25, Y+38	; 0x26
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	9a a3       	std	Y+34, r25	; 0x22
    268c:	89 a3       	std	Y+33, r24	; 0x21
    268e:	89 a1       	ldd	r24, Y+33	; 0x21
    2690:	9a a1       	ldd	r25, Y+34	; 0x22
    2692:	9e 8f       	std	Y+30, r25	; 0x1e
    2694:	8d 8f       	std	Y+29, r24	; 0x1d
    2696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2698:	9e 8d       	ldd	r25, Y+30	; 0x1e
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <LCD_displayCharacter+0x682>
    269e:	9e 8f       	std	Y+30, r25	; 0x1e
    26a0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    26a2:	fe 01       	movw	r30, r28
    26a4:	ed 59       	subi	r30, 0x9D	; 157
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 81       	ld	r24, Z
    26aa:	98 2f       	mov	r25, r24
    26ac:	91 70       	andi	r25, 0x01	; 1
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	63 e0       	ldi	r22, 0x03	; 3
    26b2:	49 2f       	mov	r20, r25
    26b4:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    26b8:	fe 01       	movw	r30, r28
    26ba:	ed 59       	subi	r30, 0x9D	; 157
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	88 2f       	mov	r24, r24
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	82 70       	andi	r24, 0x02	; 2
    26c6:	90 70       	andi	r25, 0x00	; 0
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	98 2f       	mov	r25, r24
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	64 e0       	ldi	r22, 0x04	; 4
    26d2:	49 2f       	mov	r20, r25
    26d4:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    26d8:	fe 01       	movw	r30, r28
    26da:	ed 59       	subi	r30, 0x9D	; 157
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	84 70       	andi	r24, 0x04	; 4
    26e6:	90 70       	andi	r25, 0x00	; 0
    26e8:	95 95       	asr	r25
    26ea:	87 95       	ror	r24
    26ec:	95 95       	asr	r25
    26ee:	87 95       	ror	r24
    26f0:	98 2f       	mov	r25, r24
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	65 e0       	ldi	r22, 0x05	; 5
    26f6:	49 2f       	mov	r20, r25
    26f8:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    26fc:	fe 01       	movw	r30, r28
    26fe:	ed 59       	subi	r30, 0x9D	; 157
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	88 70       	andi	r24, 0x08	; 8
    270a:	90 70       	andi	r25, 0x00	; 0
    270c:	95 95       	asr	r25
    270e:	87 95       	ror	r24
    2710:	95 95       	asr	r25
    2712:	87 95       	ror	r24
    2714:	95 95       	asr	r25
    2716:	87 95       	ror	r24
    2718:	98 2f       	mov	r25, r24
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	66 e0       	ldi	r22, 0x06	; 6
    271e:	49 2f       	mov	r20, r25
    2720:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a0 e8       	ldi	r26, 0x80	; 128
    272a:	bf e3       	ldi	r27, 0x3F	; 63
    272c:	89 8f       	std	Y+25, r24	; 0x19
    272e:	9a 8f       	std	Y+26, r25	; 0x1a
    2730:	ab 8f       	std	Y+27, r26	; 0x1b
    2732:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	69 8d       	ldd	r22, Y+25	; 0x19
    2736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4a e7       	ldi	r20, 0x7A	; 122
    2742:	55 e4       	ldi	r21, 0x45	; 69
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	8d 8b       	std	Y+21, r24	; 0x15
    274e:	9e 8b       	std	Y+22, r25	; 0x16
    2750:	af 8b       	std	Y+23, r26	; 0x17
    2752:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2754:	6d 89       	ldd	r22, Y+21	; 0x15
    2756:	7e 89       	ldd	r23, Y+22	; 0x16
    2758:	8f 89       	ldd	r24, Y+23	; 0x17
    275a:	98 8d       	ldd	r25, Y+24	; 0x18
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e8       	ldi	r20, 0x80	; 128
    2762:	5f e3       	ldi	r21, 0x3F	; 63
    2764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2768:	88 23       	and	r24, r24
    276a:	2c f4       	brge	.+10     	; 0x2776 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	3f c0       	rjmp	.+126    	; 0x27f4 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2776:	6d 89       	ldd	r22, Y+21	; 0x15
    2778:	7e 89       	ldd	r23, Y+22	; 0x16
    277a:	8f 89       	ldd	r24, Y+23	; 0x17
    277c:	98 8d       	ldd	r25, Y+24	; 0x18
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	4f e7       	ldi	r20, 0x7F	; 127
    2784:	57 e4       	ldi	r21, 0x47	; 71
    2786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278a:	18 16       	cp	r1, r24
    278c:	4c f5       	brge	.+82     	; 0x27e0 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278e:	69 8d       	ldd	r22, Y+25	; 0x19
    2790:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2792:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e2       	ldi	r20, 0x20	; 32
    279c:	51 e4       	ldi	r21, 0x41	; 65
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	9c 8b       	std	Y+20, r25	; 0x14
    27b4:	8b 8b       	std	Y+19, r24	; 0x13
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <LCD_displayCharacter+0x7be>
    27b8:	80 e9       	ldi	r24, 0x90	; 144
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	9a 8b       	std	Y+18, r25	; 0x12
    27be:	89 8b       	std	Y+17, r24	; 0x11
    27c0:	89 89       	ldd	r24, Y+17	; 0x11
    27c2:	9a 89       	ldd	r25, Y+18	; 0x12
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <LCD_displayCharacter+0x7ac>
    27c8:	9a 8b       	std	Y+18, r25	; 0x12
    27ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	9c 8b       	std	Y+20, r25	; 0x14
    27d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d6:	8b 89       	ldd	r24, Y+19	; 0x13
    27d8:	9c 89       	ldd	r25, Y+20	; 0x14
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <LCD_displayCharacter+0x7a0>
    27de:	14 c0       	rjmp	.+40     	; 0x2808 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e0:	6d 89       	ldd	r22, Y+21	; 0x15
    27e2:	7e 89       	ldd	r23, Y+22	; 0x16
    27e4:	8f 89       	ldd	r24, Y+23	; 0x17
    27e6:	98 8d       	ldd	r25, Y+24	; 0x18
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9c 8b       	std	Y+20, r25	; 0x14
    27f2:	8b 8b       	std	Y+19, r24	; 0x13
    27f4:	8b 89       	ldd	r24, Y+19	; 0x13
    27f6:	9c 89       	ldd	r25, Y+20	; 0x14
    27f8:	98 8b       	std	Y+16, r25	; 0x10
    27fa:	8f 87       	std	Y+15, r24	; 0x0f
    27fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fe:	98 89       	ldd	r25, Y+16	; 0x10
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LCD_displayCharacter+0x7e8>
    2804:	98 8b       	std	Y+16, r25	; 0x10
    2806:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	62 e0       	ldi	r22, 0x02	; 2
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_writePin>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a0 e8       	ldi	r26, 0x80	; 128
    2818:	bf e3       	ldi	r27, 0x3F	; 63
    281a:	8b 87       	std	Y+11, r24	; 0x0b
    281c:	9c 87       	std	Y+12, r25	; 0x0c
    281e:	ad 87       	std	Y+13, r26	; 0x0d
    2820:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	6b 85       	ldd	r22, Y+11	; 0x0b
    2824:	7c 85       	ldd	r23, Y+12	; 0x0c
    2826:	8d 85       	ldd	r24, Y+13	; 0x0d
    2828:	9e 85       	ldd	r25, Y+14	; 0x0e
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a e7       	ldi	r20, 0x7A	; 122
    2830:	55 e4       	ldi	r21, 0x45	; 69
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	8f 83       	std	Y+7, r24	; 0x07
    283c:	98 87       	std	Y+8, r25	; 0x08
    283e:	a9 87       	std	Y+9, r26	; 0x09
    2840:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2842:	6f 81       	ldd	r22, Y+7	; 0x07
    2844:	78 85       	ldd	r23, Y+8	; 0x08
    2846:	89 85       	ldd	r24, Y+9	; 0x09
    2848:	9a 85       	ldd	r25, Y+10	; 0x0a
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	4c f5       	brge	.+82     	; 0x28ce <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	6b 85       	ldd	r22, Y+11	; 0x0b
    287e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2880:	8d 85       	ldd	r24, Y+13	; 0x0d
    2882:	9e 85       	ldd	r25, Y+14	; 0x0e
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <LCD_displayCharacter+0x8ac>
    28a6:	80 e9       	ldi	r24, 0x90	; 144
    28a8:	91 e0       	ldi	r25, 0x01	; 1
    28aa:	9c 83       	std	Y+4, r25	; 0x04
    28ac:	8b 83       	std	Y+3, r24	; 0x03
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_displayCharacter+0x89a>
    28b6:	9c 83       	std	Y+4, r25	; 0x04
    28b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	9e 81       	ldd	r25, Y+6	; 0x06
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <LCD_displayCharacter+0x88e>
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ce:	6f 81       	ldd	r22, Y+7	; 0x07
    28d0:	78 85       	ldd	r23, Y+8	; 0x08
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e 83       	std	Y+6, r25	; 0x06
    28e0:	8d 83       	std	Y+5, r24	; 0x05
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_displayCharacter+0x8d6>
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28f6:	cd 59       	subi	r28, 0x9D	; 157
    28f8:	df 4f       	sbci	r29, 0xFF	; 255
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	08 95       	ret

0000290e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	00 d0       	rcall	.+0      	; 0x2914 <LCD_displayString+0x6>
    2914:	0f 92       	push	r0
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	9b 83       	std	Y+3, r25	; 0x03
    291c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    291e:	19 82       	std	Y+1, r1	; 0x01
    2920:	0e c0       	rjmp	.+28     	; 0x293e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	9b 81       	ldd	r25, Y+3	; 0x03
    292c:	fc 01       	movw	r30, r24
    292e:	e2 0f       	add	r30, r18
    2930:	f3 1f       	adc	r31, r19
    2932:	80 81       	ld	r24, Z
    2934:	0e 94 0c 10 	call	0x2018	; 0x2018 <LCD_displayCharacter>
		i++;
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	8f 5f       	subi	r24, 0xFF	; 255
    293c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	9b 81       	ldd	r25, Y+3	; 0x03
    2948:	fc 01       	movw	r30, r24
    294a:	e2 0f       	add	r30, r18
    294c:	f3 1f       	adc	r31, r19
    294e:	80 81       	ld	r24, Z
    2950:	88 23       	and	r24, r24
    2952:	39 f7       	brne	.-50     	; 0x2922 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <LCD_moveCursor+0x6>
    2966:	00 d0       	rcall	.+0      	; 0x2968 <LCD_moveCursor+0x8>
    2968:	0f 92       	push	r0
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	8a 83       	std	Y+2, r24	; 0x02
    2970:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	3d 83       	std	Y+5, r19	; 0x05
    297a:	2c 83       	std	Y+4, r18	; 0x04
    297c:	8c 81       	ldd	r24, Y+4	; 0x04
    297e:	9d 81       	ldd	r25, Y+5	; 0x05
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	91 05       	cpc	r25, r1
    2984:	c1 f0       	breq	.+48     	; 0x29b6 <LCD_moveCursor+0x56>
    2986:	2c 81       	ldd	r18, Y+4	; 0x04
    2988:	3d 81       	ldd	r19, Y+5	; 0x05
    298a:	22 30       	cpi	r18, 0x02	; 2
    298c:	31 05       	cpc	r19, r1
    298e:	2c f4       	brge	.+10     	; 0x299a <LCD_moveCursor+0x3a>
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	9d 81       	ldd	r25, Y+5	; 0x05
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	61 f0       	breq	.+24     	; 0x29b0 <LCD_moveCursor+0x50>
    2998:	19 c0       	rjmp	.+50     	; 0x29cc <LCD_moveCursor+0x6c>
    299a:	2c 81       	ldd	r18, Y+4	; 0x04
    299c:	3d 81       	ldd	r19, Y+5	; 0x05
    299e:	22 30       	cpi	r18, 0x02	; 2
    29a0:	31 05       	cpc	r19, r1
    29a2:	69 f0       	breq	.+26     	; 0x29be <LCD_moveCursor+0x5e>
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	83 30       	cpi	r24, 0x03	; 3
    29aa:	91 05       	cpc	r25, r1
    29ac:	61 f0       	breq	.+24     	; 0x29c6 <LCD_moveCursor+0x66>
    29ae:	0e c0       	rjmp	.+28     	; 0x29cc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	0b c0       	rjmp	.+22     	; 0x29cc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	80 5c       	subi	r24, 0xC0	; 192
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	07 c0       	rjmp	.+14     	; 0x29cc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	80 5f       	subi	r24, 0xF0	; 240
    29c2:	89 83       	std	Y+1, r24	; 0x01
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	80 5b       	subi	r24, 0xB0	; 176
    29ca:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	80 68       	ori	r24, 0x80	; 128
    29d0:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_sendCommand>
}
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <LCD_displayStringRowColumn+0x6>
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <LCD_displayStringRowColumn+0x8>
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	6a 83       	std	Y+2, r22	; 0x02
    29f4:	5c 83       	std	Y+4, r21	; 0x04
    29f6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	6a 81       	ldd	r22, Y+2	; 0x02
    29fc:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_displayString>
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	62 97       	sbiw	r28, 0x12	; 18
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	9a 8b       	std	Y+18, r25	; 0x12
    2a2c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a2e:	89 89       	ldd	r24, Y+17	; 0x11
    2a30:	9a 89       	ldd	r25, Y+18	; 0x12
    2a32:	9e 01       	movw	r18, r28
    2a34:	2f 5f       	subi	r18, 0xFF	; 255
    2a36:	3f 4f       	sbci	r19, 0xFF	; 255
    2a38:	b9 01       	movw	r22, r18
    2a3a:	4a e0       	ldi	r20, 0x0A	; 10
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <itoa>
   LCD_displayString(buff); /* Display the string */
    2a42:	ce 01       	movw	r24, r28
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_displayString>
}
    2a4a:	62 96       	adiw	r28, 0x12	; 18
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_sendCommand>
}
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <main>:
#include "lcd.h"
#include "std_types.h"
#include "common_macros.h"

int main(void)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <main+0x6>
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <main+0x8>
    2a78:	0f 92       	push	r0
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
	config spiConfig;
	spiConfig.bit=MSB;
    2a7e:	1d 82       	std	Y+5, r1	; 0x05
	spiConfig.clock=RISING_FIRST;
    2a80:	1a 82       	std	Y+2, r1	; 0x02
	spiConfig.prescaler=N_16;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	8c 83       	std	Y+4, r24	; 0x04
	spiConfig.signal=FIRST_EDGE;
    2a86:	1b 82       	std	Y+3, r1	; 0x03
	SPI_init_slave(&spiConfig);
    2a88:	ce 01       	movw	r24, r28
    2a8a:	02 96       	adiw	r24, 0x02	; 2
    2a8c:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <SPI_init_slave>
	LCD_init();
    2a90:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_init>
	uint8 dummy_varibale;
	while(1)
	{
		LCD_intgerToString(SPI_sendReceiveByte(dummy_varibale));
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <SPI_sendReceiveByte>
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_intgerToString>
    2aa2:	f8 cf       	rjmp	.-16     	; 0x2a94 <main+0x24>

00002aa4 <SPI_init_master>:
/*
 * Description :
 * A function to initialize the master
 */
void SPI_init_master(const config *conf)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <SPI_init_master+0x6>
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Make the pins directions : -
	 * SS(PB4) , PB5(MOSI) , PB7(SCK) -> output
	 * PB6(MISO)                      -> input
	 */
	DDRB |=0xB0; //0b10110000
    2ab2:	a7 e3       	ldi	r26, 0x37	; 55
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e7 e3       	ldi	r30, 0x37	; 55
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	80 6b       	ori	r24, 0xB0	; 176
    2abe:	8c 93       	st	X, r24
	DDRB &= ~(1<<6);
    2ac0:	a7 e3       	ldi	r26, 0x37	; 55
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e7 e3       	ldi	r30, 0x37	; 55
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	8f 7b       	andi	r24, 0xBF	; 191
    2acc:	8c 93       	st	X, r24

	/*
	 * Enable SPI - configure data order - configure clock shape
	 * set as master - prescaler - data detection
     */
	SPCR = (1<<SPE) | (conf->bit << DORD) | (1<<MSTR) | (conf->clock << CPOL) | (conf->signal << CPHA) | ((conf->prescaler)&0b11);
    2ace:	ad e2       	ldi	r26, 0x2D	; 45
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad6:	83 81       	ldd	r24, Z+3	; 0x03
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	82 95       	swap	r24
    2ae2:	92 95       	swap	r25
    2ae4:	90 7f       	andi	r25, 0xF0	; 240
    2ae6:	98 27       	eor	r25, r24
    2ae8:	80 7f       	andi	r24, 0xF0	; 240
    2aea:	98 27       	eor	r25, r24
    2aec:	28 2f       	mov	r18, r24
    2aee:	20 65       	ori	r18, 0x50	; 80
    2af0:	e9 81       	ldd	r30, Y+1	; 0x01
    2af2:	fa 81       	ldd	r31, Y+2	; 0x02
    2af4:	80 81       	ld	r24, Z
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	28 2b       	or	r18, r24
    2b08:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0c:	81 81       	ldd	r24, Z+1	; 0x01
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	92 2f       	mov	r25, r18
    2b1c:	98 2b       	or	r25, r24
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	83 70       	andi	r24, 0x03	; 3
    2b26:	89 2b       	or	r24, r25
    2b28:	8c 93       	st	X, r24

	/*
	 * The double speed bit which is the third bit in prescaler
	 */
	SPSR |= ( ( (conf->prescaler) >> 2 ) & 1 );
    2b2a:	ae e2       	ldi	r26, 0x2E	; 46
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	ee e2       	ldi	r30, 0x2E	; 46
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	98 2f       	mov	r25, r24
    2b36:	e9 81       	ldd	r30, Y+1	; 0x01
    2b38:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	86 95       	lsr	r24
    2b3e:	86 95       	lsr	r24
    2b40:	81 70       	andi	r24, 0x01	; 1
    2b42:	89 2b       	or	r24, r25
    2b44:	8c 93       	st	X, r24
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <SPI_init_slave>:
/*
 * Description :
 * A function to initialize the slave
 */
void SPI_init_slave(const config *conf)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <SPI_init_slave+0x6>
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Make the pins directions : -
	 * SS(PB4) , PB5(MOSI) , PB7(SCK) -> input
	 * PB6(MISO)                      -> output
	 */
	DDRB &= ~0xB0; //0b10110000
    2b5e:	a7 e3       	ldi	r26, 0x37	; 55
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e7 e3       	ldi	r30, 0x37	; 55
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	8f 74       	andi	r24, 0x4F	; 79
    2b6a:	8c 93       	st	X, r24
	DDRB |= 1<<6;
    2b6c:	a7 e3       	ldi	r26, 0x37	; 55
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e7 e3       	ldi	r30, 0x37	; 55
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	80 64       	ori	r24, 0x40	; 64
    2b78:	8c 93       	st	X, r24

	/*
	 * Enable SPI - configure data order - configure clock shape
	 * set as slave - prescaler - data detection
     */
	SPCR = (1<<SPE) | (conf->bit << DORD) | (conf->clock << CPOL) | (conf->signal << CPHA) | ((conf->prescaler)&0b11);
    2b7a:	ad e2       	ldi	r26, 0x2D	; 45
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b80:	fa 81       	ldd	r31, Y+2	; 0x02
    2b82:	83 81       	ldd	r24, Z+3	; 0x03
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	82 95       	swap	r24
    2b8e:	92 95       	swap	r25
    2b90:	90 7f       	andi	r25, 0xF0	; 240
    2b92:	98 27       	eor	r25, r24
    2b94:	80 7f       	andi	r24, 0xF0	; 240
    2b96:	98 27       	eor	r25, r24
    2b98:	28 2f       	mov	r18, r24
    2b9a:	20 64       	ori	r18, 0x40	; 64
    2b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba0:	80 81       	ld	r24, Z
    2ba2:	88 2f       	mov	r24, r24
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	28 2b       	or	r18, r24
    2bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb8:	81 81       	ldd	r24, Z+1	; 0x01
    2bba:	88 2f       	mov	r24, r24
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	92 2f       	mov	r25, r18
    2bc8:	98 2b       	or	r25, r24
    2bca:	e9 81       	ldd	r30, Y+1	; 0x01
    2bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	83 70       	andi	r24, 0x03	; 3
    2bd2:	89 2b       	or	r24, r25
    2bd4:	8c 93       	st	X, r24

	/*
	 * The double speed bit which is the third bit in prescaler
	 */
	SPSR |= ( ( (conf->prescaler) >> 2 ) & 1 );
    2bd6:	ae e2       	ldi	r26, 0x2E	; 46
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	ee e2       	ldi	r30, 0x2E	; 46
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	98 2f       	mov	r25, r24
    2be2:	e9 81       	ldd	r30, Y+1	; 0x01
    2be4:	fa 81       	ldd	r31, Y+2	; 0x02
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	86 95       	lsr	r24
    2bea:	86 95       	lsr	r24
    2bec:	81 70       	andi	r24, 0x01	; 1
    2bee:	89 2b       	or	r24, r25
    2bf0:	8c 93       	st	X, r24

}
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	0f 92       	push	r0
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	89 83       	std	Y+1, r24	; 0x01
	/*send the data*/
	SPDR = data;
    2c08:	ef e2       	ldi	r30, 0x2F	; 47
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	80 83       	st	Z, r24

	/*wait till it send*/
	while(BIT_IS_CLEAR(SPSR,SPIF));
    2c10:	ee e2       	ldi	r30, 0x2E	; 46
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	88 23       	and	r24, r24
    2c18:	dc f7       	brge	.-10     	; 0x2c10 <SPI_sendReceiveByte+0x14>

	/*get the received data*/
	return SPDR;
    2c1a:	ef e2       	ldi	r30, 0x2F	; 47
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z

}
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <SPI_sendString+0x6>
    2c2e:	0f 92       	push	r0
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	9b 83       	std	Y+3, r25	; 0x03
    2c36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    2c38:	19 82       	std	Y+1, r1	; 0x01
	for(counter=0;str[counter] != '\0';counter++)
    2c3a:	19 82       	std	Y+1, r1	; 0x01
    2c3c:	0c c0       	rjmp	.+24     	; 0x2c56 <SPI_sendString+0x2e>
		SPI_sendReceiveByte(str+counter);
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	9b 81       	ldd	r25, Y+3	; 0x03
    2c48:	82 0f       	add	r24, r18
    2c4a:	93 1f       	adc	r25, r19
    2c4c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <SPI_sendReceiveByte>
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
	uint8 counter=0;
	for(counter=0;str[counter] != '\0';counter++)
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	8f 5f       	subi	r24, 0xFF	; 255
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	fc 01       	movw	r30, r24
    2c62:	e2 0f       	add	r30, r18
    2c64:	f3 1f       	adc	r31, r19
    2c66:	80 81       	ld	r24, Z
    2c68:	88 23       	and	r24, r24
    2c6a:	49 f7       	brne	.-46     	; 0x2c3e <SPI_sendString+0x16>
		SPI_sendReceiveByte(str+counter);

}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <SPI_receiveString+0xa>
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <SPI_receiveString+0xc>
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 counter=0,dummy=0xFF;
    2c8c:	19 82       	std	Y+1, r1	; 0x01
    2c8e:	8f ef       	ldi	r24, 0xFF	; 255
    2c90:	8a 83       	std	Y+2, r24	; 0x02
	str[counter]=SPI_sendReceiveByte(&dummy);
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	8c 01       	movw	r16, r24
    2c9e:	02 0f       	add	r16, r18
    2ca0:	13 1f       	adc	r17, r19
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	02 96       	adiw	r24, 0x02	; 2
    2ca6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <SPI_sendReceiveByte>
    2caa:	f8 01       	movw	r30, r16
    2cac:	80 83       	st	Z, r24
    2cae:	11 c0       	rjmp	.+34     	; 0x2cd2 <SPI_receiveString+0x5a>
	while(str[counter] != '#'){
		counter++;
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	89 83       	std	Y+1, r24	; 0x01
		str[counter]=SPI_sendReceiveByte(&dummy);
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	8c 01       	movw	r16, r24
    2cc2:	02 0f       	add	r16, r18
    2cc4:	13 1f       	adc	r17, r19
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	02 96       	adiw	r24, 0x02	; 2
    2cca:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <SPI_sendReceiveByte>
    2cce:	f8 01       	movw	r30, r16
    2cd0:	80 83       	st	Z, r24
 */
void SPI_receiveString(uint8 *str)
{
	uint8 counter=0,dummy=0xFF;
	str[counter]=SPI_sendReceiveByte(&dummy);
	while(str[counter] != '#'){
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	9c 81       	ldd	r25, Y+4	; 0x04
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e2 0f       	add	r30, r18
    2ce0:	f3 1f       	adc	r31, r19
    2ce2:	80 81       	ld	r24, Z
    2ce4:	83 32       	cpi	r24, 0x23	; 35
    2ce6:	21 f7       	brne	.-56     	; 0x2cb0 <SPI_receiveString+0x38>
		counter++;
		str[counter]=SPI_sendReceiveByte(&dummy);
	}
	str[counter]='\0';
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e2 0f       	add	r30, r18
    2cf6:	f3 1f       	adc	r31, r19
    2cf8:	10 82       	st	Z, r1
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	08 95       	ret

00002d0c <__prologue_saves__>:
    2d0c:	2f 92       	push	r2
    2d0e:	3f 92       	push	r3
    2d10:	4f 92       	push	r4
    2d12:	5f 92       	push	r5
    2d14:	6f 92       	push	r6
    2d16:	7f 92       	push	r7
    2d18:	8f 92       	push	r8
    2d1a:	9f 92       	push	r9
    2d1c:	af 92       	push	r10
    2d1e:	bf 92       	push	r11
    2d20:	cf 92       	push	r12
    2d22:	df 92       	push	r13
    2d24:	ef 92       	push	r14
    2d26:	ff 92       	push	r15
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	ca 1b       	sub	r28, r26
    2d36:	db 0b       	sbc	r29, r27
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	09 94       	ijmp

00002d44 <__epilogue_restores__>:
    2d44:	2a 88       	ldd	r2, Y+18	; 0x12
    2d46:	39 88       	ldd	r3, Y+17	; 0x11
    2d48:	48 88       	ldd	r4, Y+16	; 0x10
    2d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d50:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d52:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d54:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d56:	b9 84       	ldd	r11, Y+9	; 0x09
    2d58:	c8 84       	ldd	r12, Y+8	; 0x08
    2d5a:	df 80       	ldd	r13, Y+7	; 0x07
    2d5c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d60:	0c 81       	ldd	r16, Y+4	; 0x04
    2d62:	1b 81       	ldd	r17, Y+3	; 0x03
    2d64:	aa 81       	ldd	r26, Y+2	; 0x02
    2d66:	b9 81       	ldd	r27, Y+1	; 0x01
    2d68:	ce 0f       	add	r28, r30
    2d6a:	d1 1d       	adc	r29, r1
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	ed 01       	movw	r28, r26
    2d78:	08 95       	ret

00002d7a <itoa>:
    2d7a:	fb 01       	movw	r30, r22
    2d7c:	9f 01       	movw	r18, r30
    2d7e:	e8 94       	clt
    2d80:	42 30       	cpi	r20, 0x02	; 2
    2d82:	c4 f0       	brlt	.+48     	; 0x2db4 <itoa+0x3a>
    2d84:	45 32       	cpi	r20, 0x25	; 37
    2d86:	b4 f4       	brge	.+44     	; 0x2db4 <itoa+0x3a>
    2d88:	4a 30       	cpi	r20, 0x0A	; 10
    2d8a:	29 f4       	brne	.+10     	; 0x2d96 <itoa+0x1c>
    2d8c:	97 fb       	bst	r25, 7
    2d8e:	1e f4       	brtc	.+6      	; 0x2d96 <itoa+0x1c>
    2d90:	90 95       	com	r25
    2d92:	81 95       	neg	r24
    2d94:	9f 4f       	sbci	r25, 0xFF	; 255
    2d96:	64 2f       	mov	r22, r20
    2d98:	77 27       	eor	r23, r23
    2d9a:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__udivmodhi4>
    2d9e:	80 5d       	subi	r24, 0xD0	; 208
    2da0:	8a 33       	cpi	r24, 0x3A	; 58
    2da2:	0c f0       	brlt	.+2      	; 0x2da6 <itoa+0x2c>
    2da4:	89 5d       	subi	r24, 0xD9	; 217
    2da6:	81 93       	st	Z+, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	a1 f7       	brne	.-24     	; 0x2d96 <itoa+0x1c>
    2dae:	16 f4       	brtc	.+4      	; 0x2db4 <itoa+0x3a>
    2db0:	5d e2       	ldi	r21, 0x2D	; 45
    2db2:	51 93       	st	Z+, r21
    2db4:	10 82       	st	Z, r1
    2db6:	c9 01       	movw	r24, r18
    2db8:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <strrev>

00002dbc <strrev>:
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	67 2f       	mov	r22, r23
    2dc2:	71 91       	ld	r23, Z+
    2dc4:	77 23       	and	r23, r23
    2dc6:	e1 f7       	brne	.-8      	; 0x2dc0 <strrev+0x4>
    2dc8:	32 97       	sbiw	r30, 0x02	; 2
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <strrev+0x18>
    2dcc:	7c 91       	ld	r23, X
    2dce:	6d 93       	st	X+, r22
    2dd0:	70 83       	st	Z, r23
    2dd2:	62 91       	ld	r22, -Z
    2dd4:	ae 17       	cp	r26, r30
    2dd6:	bf 07       	cpc	r27, r31
    2dd8:	c8 f3       	brcs	.-14     	; 0x2dcc <strrev+0x10>
    2dda:	08 95       	ret

00002ddc <__udivmodhi4>:
    2ddc:	aa 1b       	sub	r26, r26
    2dde:	bb 1b       	sub	r27, r27
    2de0:	51 e1       	ldi	r21, 0x11	; 17
    2de2:	07 c0       	rjmp	.+14     	; 0x2df2 <__udivmodhi4_ep>

00002de4 <__udivmodhi4_loop>:
    2de4:	aa 1f       	adc	r26, r26
    2de6:	bb 1f       	adc	r27, r27
    2de8:	a6 17       	cp	r26, r22
    2dea:	b7 07       	cpc	r27, r23
    2dec:	10 f0       	brcs	.+4      	; 0x2df2 <__udivmodhi4_ep>
    2dee:	a6 1b       	sub	r26, r22
    2df0:	b7 0b       	sbc	r27, r23

00002df2 <__udivmodhi4_ep>:
    2df2:	88 1f       	adc	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	5a 95       	dec	r21
    2df8:	a9 f7       	brne	.-22     	; 0x2de4 <__udivmodhi4_loop>
    2dfa:	80 95       	com	r24
    2dfc:	90 95       	com	r25
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	08 95       	ret

00002e04 <_exit>:
    2e04:	f8 94       	cli

00002e06 <__stop_program>:
    2e06:	ff cf       	rjmp	.-2      	; 0x2e06 <__stop_program>
