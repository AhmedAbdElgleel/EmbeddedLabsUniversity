
ECU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000036a8  0000373c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  00003746  2**0
                  ALLOC
  3 .stab         00002610  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e12  00000000  00000000  00005d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000af24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b366  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_1>
       8:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_2>
       c:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 19 	call	0x3236	; 0x3236 <main>
      8a:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <GPIO_setupPinDirection+0x22>
     cbe:	d2 c0       	rjmp	.+420    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <GPIO_setupPinDirection+0x2a>
     cc6:	63 c0       	rjmp	.+198    	; 0xd8e <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	e9 f0       	breq	.+58     	; 0xd16 <GPIO_setupPinDirection+0x78>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	61 f1       	breq	.+88     	; 0xd3e <GPIO_setupPinDirection+0xa0>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	e1 f5       	brne	.+120    	; 0xd66 <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
     cee:	aa e3       	ldi	r26, 0x3A	; 58
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <GPIO_setupPinDirection+0x6e>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <GPIO_setupPinDirection+0x6a>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	a7 c0       	rjmp	.+334    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
     d16:	a7 e3       	ldi	r26, 0x37	; 55
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e3       	ldi	r30, 0x37	; 55
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <GPIO_setupPinDirection+0x96>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <GPIO_setupPinDirection+0x92>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	93 c0       	rjmp	.+294    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
     d3e:	a4 e3       	ldi	r26, 0x34	; 52
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e4 e3       	ldi	r30, 0x34	; 52
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <GPIO_setupPinDirection+0xbe>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <GPIO_setupPinDirection+0xba>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	7f c0       	rjmp	.+254    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0xe6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0xe2>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	6b c0       	rjmp	.+214    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <GPIO_setupPinDirection+0xf8>
     d94:	67 c0       	rjmp	.+206    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 83       	std	Y+5, r19	; 0x05
     d9e:	2c 83       	std	Y+4, r18	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	f9 f0       	breq	.+62     	; 0xde8 <GPIO_setupPinDirection+0x14a>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	79 f1       	breq	.+94     	; 0xe12 <GPIO_setupPinDirection+0x174>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	09 f0       	breq	.+2      	; 0xdbe <GPIO_setupPinDirection+0x120>
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
     dbe:	aa e3       	ldi	r26, 0x3A	; 58
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ea e3       	ldi	r30, 0x3A	; 58
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0x13e>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0x13a>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	3e c0       	rjmp	.+124    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <GPIO_setupPinDirection+0x168>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <GPIO_setupPinDirection+0x164>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	29 c0       	rjmp	.+82     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
     e12:	a4 e3       	ldi	r26, 0x34	; 52
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <GPIO_setupPinDirection+0x192>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <GPIO_setupPinDirection+0x18e>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <GPIO_setupPinDirection+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <GPIO_setupPinDirection+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
     e64:	27 96       	adiw	r28, 0x07	; 7
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_setupPortDirection+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <GPIO_setupPortDirection+0x8>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	30 f5       	brcc	.+76     	; 0xed8 <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3c 83       	std	Y+4, r19	; 0x04
     e94:	2b 83       	std	Y+3, r18	; 0x03
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	71 f0       	breq	.+28     	; 0xebc <GPIO_setupPortDirection+0x46>
     ea0:	2b 81       	ldd	r18, Y+3	; 0x03
     ea2:	3c 81       	ldd	r19, Y+4	; 0x04
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	71 f0       	breq	.+28     	; 0xec6 <GPIO_setupPortDirection+0x50>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	79 f4       	brne	.+30     	; 0xed0 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	80 83       	st	Z, r24
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
     ebc:	e7 e3       	ldi	r30, 0x37	; 55
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	80 83       	st	Z, r24
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
     ec6:	e4 e3       	ldi	r30, 0x34	; 52
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	80 83       	st	Z, r24
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
     ed0:	e1 e3       	ldi	r30, 0x31	; 49
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 83       	st	Z, r24
			break;
		}
	}
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	27 97       	sbiw	r28, 0x07	; 7
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	6a 83       	std	Y+2, r22	; 0x02
     efe:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	88 30       	cpi	r24, 0x08	; 8
     f04:	08 f0       	brcs	.+2      	; 0xf08 <GPIO_writePin+0x22>
     f06:	d9 c0       	rjmp	.+434    	; 0x10ba <GPIO_writePin+0x1d4>
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	21 f0       	breq	.+8      	; 0xf16 <GPIO_writePin+0x30>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 23       	and	r24, r24
     f12:	09 f0       	breq	.+2      	; 0xf16 <GPIO_writePin+0x30>
     f14:	d2 c0       	rjmp	.+420    	; 0x10ba <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <GPIO_writePin+0x38>
     f1c:	63 c0       	rjmp	.+198    	; 0xfe4 <GPIO_writePin+0xfe>
		{
			switch(port_num)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3f 83       	std	Y+7, r19	; 0x07
     f26:	2e 83       	std	Y+6, r18	; 0x06
     f28:	8e 81       	ldd	r24, Y+6	; 0x06
     f2a:	9f 81       	ldd	r25, Y+7	; 0x07
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	e9 f0       	breq	.+58     	; 0xf6c <GPIO_writePin+0x86>
     f32:	2e 81       	ldd	r18, Y+6	; 0x06
     f34:	3f 81       	ldd	r19, Y+7	; 0x07
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	61 f1       	breq	.+88     	; 0xf94 <GPIO_writePin+0xae>
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	e1 f5       	brne	.+120    	; 0xfbc <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
     f44:	ab e3       	ldi	r26, 0x3B	; 59
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e3       	ldi	r30, 0x3B	; 59
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <GPIO_writePin+0x7c>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <GPIO_writePin+0x78>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	a7 c0       	rjmp	.+334    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
     f6c:	a8 e3       	ldi	r26, 0x38	; 56
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e3       	ldi	r30, 0x38	; 56
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_writePin+0xa4>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_writePin+0xa0>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	93 c0       	rjmp	.+294    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
     f94:	a5 e3       	ldi	r26, 0x35	; 53
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_writePin+0xcc>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_writePin+0xc8>
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	7f c0       	rjmp	.+254    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
     fbc:	a2 e3       	ldi	r26, 0x32	; 50
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e2 e3       	ldi	r30, 0x32	; 50
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_writePin+0xf4>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_writePin+0xf0>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	6b c0       	rjmp	.+214    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	09 f0       	breq	.+2      	; 0xfec <GPIO_writePin+0x106>
     fea:	67 c0       	rjmp	.+206    	; 0x10ba <GPIO_writePin+0x1d4>
		{
			switch(port_num)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3d 83       	std	Y+5, r19	; 0x05
     ff4:	2c 83       	std	Y+4, r18	; 0x04
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	f9 f0       	breq	.+62     	; 0x103e <GPIO_writePin+0x158>
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	79 f1       	breq	.+94     	; 0x1068 <GPIO_writePin+0x182>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	09 f0       	breq	.+2      	; 0x1014 <GPIO_writePin+0x12e>
    1012:	3f c0       	rjmp	.+126    	; 0x1092 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    1014:	ab e3       	ldi	r26, 0x3B	; 59
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	eb e3       	ldi	r30, 0x3B	; 59
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <GPIO_writePin+0x14c>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <GPIO_writePin+0x148>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	3e c0       	rjmp	.+124    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    103e:	a8 e3       	ldi	r26, 0x38	; 56
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e8 e3       	ldi	r30, 0x38	; 56
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_writePin+0x176>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_writePin+0x172>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	29 c0       	rjmp	.+82     	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    1068:	a5 e3       	ldi	r26, 0x35	; 53
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e3       	ldi	r30, 0x35	; 53
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_writePin+0x1a0>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_writePin+0x19c>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    1092:	a2 e3       	ldi	r26, 0x32	; 50
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <GPIO_writePin+0x1ca>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <GPIO_writePin+0x1c6>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    10ba:	27 96       	adiw	r28, 0x07	; 7
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,GPIO_PinDirectionType direction)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_writePort+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <GPIO_writePort+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	30 f5       	brcc	.+76     	; 0x112e <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3c 83       	std	Y+4, r19	; 0x04
    10ea:	2b 83       	std	Y+3, r18	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	71 f0       	breq	.+28     	; 0x1112 <GPIO_writePort+0x46>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	71 f0       	breq	.+28     	; 0x111c <GPIO_writePort+0x50>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	79 f4       	brne	.+30     	; 0x1126 <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	0e c0       	rjmp	.+28     	; 0x112e <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    1112:	e8 e3       	ldi	r30, 0x38	; 56
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
    111a:	09 c0       	rjmp	.+18     	; 0x112e <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    111c:	e5 e3       	ldi	r30, 0x35	; 53
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	80 83       	st	Z, r24
    1124:	04 c0       	rjmp	.+8      	; 0x112e <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    1126:	e2 e3       	ldi	r30, 0x32	; 50
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
			break;
		}
	}
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <GPIO_readPin+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <GPIO_readPin+0x8>
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	88 30       	cpi	r24, 0x08	; 8
    1152:	10 f0       	brcs	.+4      	; 0x1158 <GPIO_readPin+0x1c>
	{
		return 0;
    1154:	1d 82       	std	Y+5, r1	; 0x05
    1156:	5f c0       	rjmp	.+190    	; 0x1216 <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3c 83       	std	Y+4, r19	; 0x04
    1160:	2b 83       	std	Y+3, r18	; 0x03
    1162:	4b 81       	ldd	r20, Y+3	; 0x03
    1164:	5c 81       	ldd	r21, Y+4	; 0x04
    1166:	41 30       	cpi	r20, 0x01	; 1
    1168:	51 05       	cpc	r21, r1
    116a:	e9 f0       	breq	.+58     	; 0x11a6 <GPIO_readPin+0x6a>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	59 f1       	breq	.+86     	; 0x11cc <GPIO_readPin+0x90>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	21 15       	cp	r18, r1
    117c:	31 05       	cpc	r19, r1
    117e:	c9 f5       	brne	.+114    	; 0x11f2 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1180:	e9 e3       	ldi	r30, 0x39	; 57
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_readPin+0x5c>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_readPin+0x58>
    119c:	ca 01       	movw	r24, r20
    119e:	58 2f       	mov	r21, r24
    11a0:	51 70       	andi	r21, 0x01	; 1
    11a2:	5d 83       	std	Y+5, r21	; 0x05
    11a4:	38 c0       	rjmp	.+112    	; 0x1216 <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    11a6:	e6 e3       	ldi	r30, 0x36	; 54
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_readPin+0x82>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_readPin+0x7e>
    11c2:	ca 01       	movw	r24, r20
    11c4:	58 2f       	mov	r21, r24
    11c6:	51 70       	andi	r21, 0x01	; 1
    11c8:	5d 83       	std	Y+5, r21	; 0x05
    11ca:	25 c0       	rjmp	.+74     	; 0x1216 <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    11cc:	e3 e3       	ldi	r30, 0x33	; 51
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_readPin+0xa8>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_readPin+0xa4>
    11e8:	ca 01       	movw	r24, r20
    11ea:	58 2f       	mov	r21, r24
    11ec:	51 70       	andi	r21, 0x01	; 1
    11ee:	5d 83       	std	Y+5, r21	; 0x05
    11f0:	12 c0       	rjmp	.+36     	; 0x1216 <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    11f2:	e0 e3       	ldi	r30, 0x30	; 48
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <GPIO_readPin+0xce>
    1206:	55 95       	asr	r21
    1208:	47 95       	ror	r20
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <GPIO_readPin+0xca>
    120e:	ca 01       	movw	r24, r20
    1210:	58 2f       	mov	r21, r24
    1212:	51 70       	andi	r21, 0x01	; 1
    1214:	5d 83       	std	Y+5, r21	; 0x05
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <GPIO_readPort+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <GPIO_readPort+0x8>
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	10 f0       	brcs	.+4      	; 0x1240 <GPIO_readPort+0x18>
	{
		return 0;
    123c:	1c 82       	std	Y+4, r1	; 0x04
    123e:	26 c0       	rjmp	.+76     	; 0x128c <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3b 83       	std	Y+3, r19	; 0x03
    1248:	2a 83       	std	Y+2, r18	; 0x02
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	71 f0       	breq	.+28     	; 0x1270 <GPIO_readPort+0x48>
    1254:	2a 81       	ldd	r18, Y+2	; 0x02
    1256:	3b 81       	ldd	r19, Y+3	; 0x03
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	71 f0       	breq	.+28     	; 0x127a <GPIO_readPort+0x52>
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	79 f4       	brne	.+30     	; 0x1284 <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    1266:	e9 e3       	ldi	r30, 0x39	; 57
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	90 81       	ld	r25, Z
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	0e c0       	rjmp	.+28     	; 0x128c <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    1270:	e6 e3       	ldi	r30, 0x36	; 54
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	20 81       	ld	r18, Z
    1276:	2c 83       	std	Y+4, r18	; 0x04
    1278:	09 c0       	rjmp	.+18     	; 0x128c <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    127a:	e3 e3       	ldi	r30, 0x33	; 51
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	30 81       	ld	r19, Z
    1280:	3c 83       	std	Y+4, r19	; 0x04
    1282:	04 c0       	rjmp	.+8      	; 0x128c <GPIO_readPort+0x64>
		default:
			return PINC;
    1284:	e3 e3       	ldi	r30, 0x33	; 51
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8c 83       	std	Y+4, r24	; 0x04
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <INT_init>:
/*
 * Description :
 * A function to initialize our external interrupt
 */
void INT_init(const INT_CONF* config)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <INT_init+0x6>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
	/* set the global interrupt enable */
	SET_BIT(SREG,7);
    12aa:	af e5       	ldi	r26, 0x5F	; 95
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ef e5       	ldi	r30, 0x5F	; 95
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	8c 93       	st	X, r24

	/* enable the interrupts for our chosen module*/
	GICR |= config->intNumber;
    12b8:	ab e5       	ldi	r26, 0x5B	; 91
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e5       	ldi	r30, 0x5B	; 91
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	90 81       	ld	r25, Z
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	80 81       	ld	r24, Z
    12c8:	89 2b       	or	r24, r25
    12ca:	8c 93       	st	X, r24

	/* selecting the mode for interrupt */

	/*for interrupt zero , we control it with the 2 LSBs in MCUCR */
	if( (config->intNumber) == INT0_ID)
    12cc:	e9 81       	ldd	r30, Y+1	; 0x01
    12ce:	fa 81       	ldd	r31, Y+2	; 0x02
    12d0:	80 81       	ld	r24, Z
    12d2:	80 34       	cpi	r24, 0x40	; 64
    12d4:	59 f4       	brne	.+22     	; 0x12ec <INT_init+0x50>
	{
		MCUCR|=(config->intMode);
    12d6:	a5 e5       	ldi	r26, 0x55	; 85
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e5       	ldi	r30, 0x55	; 85
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	90 81       	ld	r25, Z
    12e0:	e9 81       	ldd	r30, Y+1	; 0x01
    12e2:	fa 81       	ldd	r31, Y+2	; 0x02
    12e4:	81 81       	ldd	r24, Z+1	; 0x01
    12e6:	89 2b       	or	r24, r25
    12e8:	8c 93       	st	X, r24
    12ea:	34 c0       	rjmp	.+104    	; 0x1354 <INT_init+0xb8>
	}

	/*for interrupt one , we control it with the 3rd and 4th bits in MCUCR */
	else if( (config->intNumber) == INT1_ID)
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	80 81       	ld	r24, Z
    12f2:	80 38       	cpi	r24, 0x80	; 128
    12f4:	91 f4       	brne	.+36     	; 0x131a <INT_init+0x7e>
	{
		MCUCR |= ( (config->intMode) << 2);
    12f6:	a5 e5       	ldi	r26, 0x55	; 85
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e5       	ldi	r30, 0x55	; 85
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	e9 81       	ldd	r30, Y+1	; 0x01
    1304:	fa 81       	ldd	r31, Y+2	; 0x02
    1306:	81 81       	ldd	r24, Z+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	82 2b       	or	r24, r18
    1316:	8c 93       	st	X, r24
    1318:	1d c0       	rjmp	.+58     	; 0x1354 <INT_init+0xb8>
	}

	/*for interrupt one , we control it with the 6th bit in MCUCR */
	else if( (config->intNumber) == INT2_ID)
    131a:	e9 81       	ldd	r30, Y+1	; 0x01
    131c:	fa 81       	ldd	r31, Y+2	; 0x02
    131e:	80 81       	ld	r24, Z
    1320:	80 32       	cpi	r24, 0x20	; 32
    1322:	c1 f4       	brne	.+48     	; 0x1354 <INT_init+0xb8>
	{
		/* 2 & 1 = 0 - > shift left by 6 and put in MCUCSR then 6th bit is 0 (falling edge)
		 * 3 & 1 = 1 - > shift left by 6 and put in MCUCSR then 6th bit is 1 (rising edge)
		 */
		MCUCSR |= ( (config->intMode) & 1 ) << 6;
    1324:	a4 e5       	ldi	r26, 0x54	; 84
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e5       	ldi	r30, 0x54	; 84
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	e9 81       	ldd	r30, Y+1	; 0x01
    1332:	fa 81       	ldd	r31, Y+2	; 0x02
    1334:	81 81       	ldd	r24, Z+1	; 0x01
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	00 24       	eor	r0, r0
    1340:	96 95       	lsr	r25
    1342:	87 95       	ror	r24
    1344:	07 94       	ror	r0
    1346:	96 95       	lsr	r25
    1348:	87 95       	ror	r24
    134a:	07 94       	ror	r0
    134c:	98 2f       	mov	r25, r24
    134e:	80 2d       	mov	r24, r0
    1350:	82 2b       	or	r24, r18
    1352:	8c 93       	st	X, r24
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <INT_deInit>:
/*
 * Description :
 * A function to initialize our external interrupt
 */
void INT_deInit(const INT_CONF* config)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <INT_deInit+0x6>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01

	/* disable the interrupts for our chosen module*/
	GICR&=(~(config->intNumber));
    136c:	ab e5       	ldi	r26, 0x5B	; 91
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb e5       	ldi	r30, 0x5B	; 91
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	98 2f       	mov	r25, r24
    1378:	e9 81       	ldd	r30, Y+1	; 0x01
    137a:	fa 81       	ldd	r31, Y+2	; 0x02
    137c:	80 81       	ld	r24, Z
    137e:	80 95       	com	r24
    1380:	89 23       	and	r24, r25
    1382:	8c 93       	st	X, r24
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <INT_changeConfig>:
/*
 * Description :
 * A function to change the interrupt cause mode
 */
void INT_changeConfig(const INT_CONF* config)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <INT_changeConfig+0x6>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
	/* selecting the mode for interrupt */

	/*for interrupt zero , we control it with the 2 LSBs in MCUCR */
	if( (config->intNumber) == INT0_ID)
    139c:	e9 81       	ldd	r30, Y+1	; 0x01
    139e:	fa 81       	ldd	r31, Y+2	; 0x02
    13a0:	80 81       	ld	r24, Z
    13a2:	80 34       	cpi	r24, 0x40	; 64
    13a4:	59 f4       	brne	.+22     	; 0x13bc <INT_changeConfig+0x2e>
	{
		MCUCR|=(config->intMode);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	90 81       	ld	r25, Z
    13b0:	e9 81       	ldd	r30, Y+1	; 0x01
    13b2:	fa 81       	ldd	r31, Y+2	; 0x02
    13b4:	81 81       	ldd	r24, Z+1	; 0x01
    13b6:	89 2b       	or	r24, r25
    13b8:	8c 93       	st	X, r24
    13ba:	34 c0       	rjmp	.+104    	; 0x1424 <INT_changeConfig+0x96>
	}

	/*for interrupt one , we control it with the 3rd and 4th bits in MCUCR */
	else if( (config->intNumber) == INT1_ID)
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	80 81       	ld	r24, Z
    13c2:	80 38       	cpi	r24, 0x80	; 128
    13c4:	91 f4       	brne	.+36     	; 0x13ea <INT_changeConfig+0x5c>
	{
		MCUCR |= ( (config->intMode) << 2);
    13c6:	a5 e5       	ldi	r26, 0x55	; 85
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e5       	ldi	r30, 0x55	; 85
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	28 2f       	mov	r18, r24
    13d2:	e9 81       	ldd	r30, Y+1	; 0x01
    13d4:	fa 81       	ldd	r31, Y+2	; 0x02
    13d6:	81 81       	ldd	r24, Z+1	; 0x01
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	82 2b       	or	r24, r18
    13e6:	8c 93       	st	X, r24
    13e8:	1d c0       	rjmp	.+58     	; 0x1424 <INT_changeConfig+0x96>
	}

	/*for interrupt one , we control it with the 6th bit in MCUCR */
	else if( (config->intNumber) == INT2_ID)
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	80 81       	ld	r24, Z
    13f0:	80 32       	cpi	r24, 0x20	; 32
    13f2:	c1 f4       	brne	.+48     	; 0x1424 <INT_changeConfig+0x96>
	{
		/* 2 & 1 = 0 - > shift left by 6 and put in MCUCSR then 6th bit is 0 (falling edge)
		 * 3 & 1 = 1 - > shift left by 6 and put in MCUCSR then 6th bit is 1 (rising edge)
		 */
		MCUCSR |= ( (config->intMode) & 1 ) << 6;
    13f4:	a4 e5       	ldi	r26, 0x54	; 84
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e4 e5       	ldi	r30, 0x54	; 84
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	e9 81       	ldd	r30, Y+1	; 0x01
    1402:	fa 81       	ldd	r31, Y+2	; 0x02
    1404:	81 81       	ldd	r24, Z+1	; 0x01
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	90 70       	andi	r25, 0x00	; 0
    140e:	00 24       	eor	r0, r0
    1410:	96 95       	lsr	r25
    1412:	87 95       	ror	r24
    1414:	07 94       	ror	r0
    1416:	96 95       	lsr	r25
    1418:	87 95       	ror	r24
    141a:	07 94       	ror	r0
    141c:	98 2f       	mov	r25, r24
    141e:	80 2d       	mov	r24, r0
    1420:	82 2b       	or	r24, r18
    1422:	8c 93       	st	X, r24
	}
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <INT_setISR>:
/*
 * Description :
 * A function to set ISR function code using call back technique
 */
void INT_setISR(void (*ptr)(void) , uint8 interrupt_number)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <INT_setISR+0x6>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	9a 83       	std	Y+2, r25	; 0x02
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	6b 83       	std	Y+3, r22	; 0x03
	if(interrupt_number < 3)
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	60 f4       	brcc	.+24     	; 0x145e <INT_setISR+0x30>
		g_callBackPtr[interrupt_number] = ptr;
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	29 81       	ldd	r18, Y+1	; 0x01
    144e:	3a 81       	ldd	r19, Y+2	; 0x02
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	fc 01       	movw	r30, r24
    1456:	e6 59       	subi	r30, 0x96	; 150
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	31 83       	std	Z+1, r19	; 0x01
    145c:	20 83       	st	Z, r18
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <__vector_1>:
/*
 * Description :
 * ISR of INT0
 */
ISR(INT0_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[0] != NULL_PTR)
    1494:	80 91 6a 00 	lds	r24, 0x006A
    1498:	90 91 6b 00 	lds	r25, 0x006B
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	29 f0       	breq	.+10     	; 0x14aa <__vector_1+0x40>
	{
		g_callBackPtr[0]();
    14a0:	e0 91 6a 00 	lds	r30, 0x006A
    14a4:	f0 91 6b 00 	lds	r31, 0x006B
    14a8:	09 95       	icall
	}

}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	ff 91       	pop	r31
    14b0:	ef 91       	pop	r30
    14b2:	bf 91       	pop	r27
    14b4:	af 91       	pop	r26
    14b6:	9f 91       	pop	r25
    14b8:	8f 91       	pop	r24
    14ba:	7f 91       	pop	r23
    14bc:	6f 91       	pop	r22
    14be:	5f 91       	pop	r21
    14c0:	4f 91       	pop	r20
    14c2:	3f 91       	pop	r19
    14c4:	2f 91       	pop	r18
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	0f 90       	pop	r0
    14cc:	1f 90       	pop	r1
    14ce:	18 95       	reti

000014d0 <__vector_2>:
/*
 * Description :
 * ISR of INT1
 */
ISR(INT1_vect)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	4f 93       	push	r20
    14e0:	5f 93       	push	r21
    14e2:	6f 93       	push	r22
    14e4:	7f 93       	push	r23
    14e6:	8f 93       	push	r24
    14e8:	9f 93       	push	r25
    14ea:	af 93       	push	r26
    14ec:	bf 93       	push	r27
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[1] != NULL_PTR)
    14fa:	80 91 6c 00 	lds	r24, 0x006C
    14fe:	90 91 6d 00 	lds	r25, 0x006D
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	29 f0       	breq	.+10     	; 0x1510 <__vector_2+0x40>
	{
		g_callBackPtr[1]();
    1506:	e0 91 6c 00 	lds	r30, 0x006C
    150a:	f0 91 6d 00 	lds	r31, 0x006D
    150e:	09 95       	icall
	}
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	ff 91       	pop	r31
    1516:	ef 91       	pop	r30
    1518:	bf 91       	pop	r27
    151a:	af 91       	pop	r26
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	7f 91       	pop	r23
    1522:	6f 91       	pop	r22
    1524:	5f 91       	pop	r21
    1526:	4f 91       	pop	r20
    1528:	3f 91       	pop	r19
    152a:	2f 91       	pop	r18
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <__vector_3>:
/*
 * Description :
 * ISR of INT2
 */
ISR(INT2_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
    1540:	2f 93       	push	r18
    1542:	3f 93       	push	r19
    1544:	4f 93       	push	r20
    1546:	5f 93       	push	r21
    1548:	6f 93       	push	r22
    154a:	7f 93       	push	r23
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
    1550:	af 93       	push	r26
    1552:	bf 93       	push	r27
    1554:	ef 93       	push	r30
    1556:	ff 93       	push	r31
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[2] != NULL_PTR)
    1560:	80 91 6e 00 	lds	r24, 0x006E
    1564:	90 91 6f 00 	lds	r25, 0x006F
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	29 f0       	breq	.+10     	; 0x1576 <__vector_3+0x40>
	{
		g_callBackPtr[2]();
    156c:	e0 91 6e 00 	lds	r30, 0x006E
    1570:	f0 91 6f 00 	lds	r31, 0x006F
    1574:	09 95       	icall
	}
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	6c 97       	sbiw	r28, 0x1c	; 28
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 ea       	ldi	r26, 0xA0	; 160
    15ca:	b1 e4       	ldi	r27, 0x41	; 65
    15cc:	89 8f       	std	Y+25, r24	; 0x19
    15ce:	9a 8f       	std	Y+26, r25	; 0x1a
    15d0:	ab 8f       	std	Y+27, r26	; 0x1b
    15d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	69 8d       	ldd	r22, Y+25	; 0x19
    15d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a e7       	ldi	r20, 0x7A	; 122
    15e2:	55 e4       	ldi	r21, 0x45	; 69
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8d 8b       	std	Y+21, r24	; 0x15
    15ee:	9e 8b       	std	Y+22, r25	; 0x16
    15f0:	af 8b       	std	Y+23, r26	; 0x17
    15f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f4:	6d 89       	ldd	r22, Y+21	; 0x15
    15f6:	7e 89       	ldd	r23, Y+22	; 0x16
    15f8:	8f 89       	ldd	r24, Y+23	; 0x17
    15fa:	98 8d       	ldd	r25, Y+24	; 0x18
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <LCD_init+0x7a>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9c 8b       	std	Y+20, r25	; 0x14
    1612:	8b 8b       	std	Y+19, r24	; 0x13
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1616:	6d 89       	ldd	r22, Y+21	; 0x15
    1618:	7e 89       	ldd	r23, Y+22	; 0x16
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	98 8d       	ldd	r25, Y+24	; 0x18
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	69 8d       	ldd	r22, Y+25	; 0x19
    1630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9c 8b       	std	Y+20, r25	; 0x14
    1654:	8b 8b       	std	Y+19, r24	; 0x13
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <LCD_init+0xda>
    1658:	80 e9       	ldi	r24, 0x90	; 144
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	9a 8b       	std	Y+18, r25	; 0x12
    165e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1660:	89 89       	ldd	r24, Y+17	; 0x11
    1662:	9a 89       	ldd	r25, Y+18	; 0x12
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_init+0xc8>
    1668:	9a 8b       	std	Y+18, r25	; 0x12
    166a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8b 89       	ldd	r24, Y+19	; 0x13
    166e:	9c 89       	ldd	r25, Y+20	; 0x14
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	9c 8b       	std	Y+20, r25	; 0x14
    1674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	9c 89       	ldd	r25, Y+20	; 0x14
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <LCD_init+0xbc>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	6d 89       	ldd	r22, Y+21	; 0x15
    1682:	7e 89       	ldd	r23, Y+22	; 0x16
    1684:	8f 89       	ldd	r24, Y+23	; 0x17
    1686:	98 8d       	ldd	r25, Y+24	; 0x18
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9c 8b       	std	Y+20, r25	; 0x14
    1692:	8b 8b       	std	Y+19, r24	; 0x13
    1694:	8b 89       	ldd	r24, Y+19	; 0x13
    1696:	9c 89       	ldd	r25, Y+20	; 0x14
    1698:	98 8b       	std	Y+16, r25	; 0x10
    169a:	8f 87       	std	Y+15, r24	; 0x0f
    169c:	8f 85       	ldd	r24, Y+15	; 0x0f
    169e:	98 89       	ldd	r25, Y+16	; 0x10
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_init+0x104>
    16a4:	98 8b       	std	Y+16, r25	; 0x10
    16a6:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_BIT_MODE == 4)

	/* 2 - Configure the data pins as output port */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,PIN_OUTPUT);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	63 e0       	ldi	r22, 0x03	; 3
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,PIN_OUTPUT);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	64 e0       	ldi	r22, 0x04	; 4
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,PIN_OUTPUT);
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	65 e0       	ldi	r22, 0x05	; 5
    16c0:	41 e0       	ldi	r20, 0x01	; 1
    16c2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,PIN_OUTPUT);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	66 e0       	ldi	r22, 0x06	; 6
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 ea       	ldi	r26, 0xA0	; 160
    16d6:	b1 e4       	ldi	r27, 0x41	; 65
    16d8:	8b 87       	std	Y+11, r24	; 0x0b
    16da:	9c 87       	std	Y+12, r25	; 0x0c
    16dc:	ad 87       	std	Y+13, r26	; 0x0d
    16de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a e7       	ldi	r20, 0x7A	; 122
    16ee:	55 e4       	ldi	r21, 0x45	; 69
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8f 83       	std	Y+7, r24	; 0x07
    16fa:	98 87       	std	Y+8, r25	; 0x08
    16fc:	a9 87       	std	Y+9, r26	; 0x09
    16fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <LCD_init+0x186>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <LCD_init+0x204>
	else if (__tmp > 65535)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <LCD_init+0x1e6>
    1764:	80 e9       	ldi	r24, 0x90	; 144
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <LCD_init+0x1d4>
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f7       	brne	.-38     	; 0x1764 <LCD_init+0x1c8>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_init+0x210>
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 3.2 - send commands 0x33 0x32 0x28 to init lcd*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    17b4:	83 e3       	ldi	r24, 0x33	; 51
    17b6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17ba:	82 e3       	ldi	r24, 0x32	; 50
    17bc:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    17c0:	88 e2       	ldi	r24, 0x28	; 40
    17c2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LCD_sendCommand>
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    17c6:	8c e0       	ldi	r24, 0x0C	; 12
    17c8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LCD_sendCommand>
}
    17d2:	6c 96       	adiw	r28, 0x1c	; 28
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	c5 59       	subi	r28, 0x95	; 149
    17f2:	d0 40       	sbci	r29, 0x00	; 0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	fe 01       	movw	r30, r28
    1800:	eb 56       	subi	r30, 0x6B	; 107
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1810:	fe 01       	movw	r30, r28
    1812:	ef 56       	subi	r30, 0x6F	; 111
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e8       	ldi	r26, 0x80	; 128
    181c:	bf e3       	ldi	r27, 0x3F	; 63
    181e:	80 83       	st	Z, r24
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	a2 83       	std	Z+2, r26	; 0x02
    1824:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1826:	8e 01       	movw	r16, r28
    1828:	03 57       	subi	r16, 0x73	; 115
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	ef 56       	subi	r30, 0x6F	; 111
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	2b ea       	ldi	r18, 0xAB	; 171
    183c:	3a ea       	ldi	r19, 0xAA	; 170
    183e:	4a ea       	ldi	r20, 0xAA	; 170
    1840:	50 e4       	ldi	r21, 0x40	; 64
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	f8 01       	movw	r30, r16
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1854:	fe 01       	movw	r30, r28
    1856:	e3 57       	subi	r30, 0x73	; 115
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	34 f4       	brge	.+12     	; 0x187e <LCD_sendCommand+0x9a>
		__ticks = 1;
    1872:	fe 01       	movw	r30, r28
    1874:	e4 57       	subi	r30, 0x74	; 116
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	80 83       	st	Z, r24
    187c:	e0 c0       	rjmp	.+448    	; 0x1a3e <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    187e:	fe 01       	movw	r30, r28
    1880:	e3 57       	subi	r30, 0x73	; 115
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	53 e4       	ldi	r21, 0x43	; 67
    1894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	0c f0       	brlt	.+2      	; 0x189e <LCD_sendCommand+0xba>
    189c:	c0 c0       	rjmp	.+384    	; 0x1a1e <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    189e:	fe 01       	movw	r30, r28
    18a0:	ef 56       	subi	r30, 0x6F	; 111
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	fe 01       	movw	r30, r28
    18be:	e8 57       	subi	r30, 0x78	; 120
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 83       	st	Z, r24
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	a2 83       	std	Z+2, r26	; 0x02
    18c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	8e 01       	movw	r16, r28
    18cc:	0c 57       	subi	r16, 0x7C	; 124
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	fe 01       	movw	r30, r28
    18d2:	e8 57       	subi	r30, 0x78	; 120
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a e7       	ldi	r20, 0x7A	; 122
    18e4:	55 e4       	ldi	r21, 0x45	; 69
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	80 83       	st	Z, r24
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	a2 83       	std	Z+2, r26	; 0x02
    18f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f8:	fe 01       	movw	r30, r28
    18fa:	ec 57       	subi	r30, 0x7C	; 124
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	44 f4       	brge	.+16     	; 0x1926 <LCD_sendCommand+0x142>
		__ticks = 1;
    1916:	fe 01       	movw	r30, r28
    1918:	ee 57       	subi	r30, 0x7E	; 126
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
    1924:	64 c0       	rjmp	.+200    	; 0x19ee <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    1926:	fe 01       	movw	r30, r28
    1928:	ec 57       	subi	r30, 0x7C	; 124
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	0c f0       	brlt	.+2      	; 0x1946 <LCD_sendCommand+0x162>
    1944:	43 c0       	rjmp	.+134    	; 0x19cc <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1946:	fe 01       	movw	r30, r28
    1948:	e8 57       	subi	r30, 0x78	; 120
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	8e 01       	movw	r16, r28
    1966:	0e 57       	subi	r16, 0x7E	; 126
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	f8 01       	movw	r30, r16
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	1f c0       	rjmp	.+62     	; 0x19bc <LCD_sendCommand+0x1d8>
    197e:	fe 01       	movw	r30, r28
    1980:	e0 58       	subi	r30, 0x80	; 128
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 e9       	ldi	r24, 0x90	; 144
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	fe 01       	movw	r30, r28
    198e:	e0 58       	subi	r30, 0x80	; 128
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_sendCommand+0x1b2>
    199a:	fe 01       	movw	r30, r28
    199c:	e0 58       	subi	r30, 0x80	; 128
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	de 01       	movw	r26, r28
    19a6:	ae 57       	subi	r26, 0x7E	; 126
    19a8:	bf 4f       	sbci	r27, 0xFF	; 255
    19aa:	fe 01       	movw	r30, r28
    19ac:	ee 57       	subi	r30, 0x7E	; 126
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 81       	ld	r24, Z
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	9c 93       	st	X, r25
    19ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19bc:	fe 01       	movw	r30, r28
    19be:	ee 57       	subi	r30, 0x7E	; 126
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	d1 f6       	brne	.-76     	; 0x197e <LCD_sendCommand+0x19a>
    19ca:	4b c0       	rjmp	.+150    	; 0x1a62 <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19cc:	8e 01       	movw	r16, r28
    19ce:	0e 57       	subi	r16, 0x7E	; 126
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	fe 01       	movw	r30, r28
    19d4:	ec 57       	subi	r30, 0x7C	; 124
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	f8 01       	movw	r30, r16
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
    19ee:	de 01       	movw	r26, r28
    19f0:	a2 58       	subi	r26, 0x82	; 130
    19f2:	bf 4f       	sbci	r27, 0xFF	; 255
    19f4:	fe 01       	movw	r30, r28
    19f6:	ee 57       	subi	r30, 0x7E	; 126
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 81       	ld	r24, Z
    19fc:	91 81       	ldd	r25, Z+1	; 0x01
    19fe:	11 96       	adiw	r26, 0x01	; 1
    1a00:	9c 93       	st	X, r25
    1a02:	8e 93       	st	-X, r24
    1a04:	fe 01       	movw	r30, r28
    1a06:	e2 58       	subi	r30, 0x82	; 130
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_sendCommand+0x22a>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e2 58       	subi	r30, 0x82	; 130
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	22 c0       	rjmp	.+68     	; 0x1a62 <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a1e:	8e 01       	movw	r16, r28
    1a20:	04 57       	subi	r16, 0x74	; 116
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	fe 01       	movw	r30, r28
    1a26:	e3 57       	subi	r30, 0x73	; 115
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	80 83       	st	Z, r24
    1a3e:	de 01       	movw	r26, r28
    1a40:	a3 58       	subi	r26, 0x83	; 131
    1a42:	bf 4f       	sbci	r27, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e4 57       	subi	r30, 0x74	; 116
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e3 58       	subi	r30, 0x83	; 131
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	8a 95       	dec	r24
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_sendCommand+0x272>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e3 58       	subi	r30, 0x83	; 131
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e7 58       	subi	r30, 0x87	; 135
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e8       	ldi	r26, 0x80	; 128
    1a78:	bf e3       	ldi	r27, 0x3F	; 63
    1a7a:	80 83       	st	Z, r24
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	a2 83       	std	Z+2, r26	; 0x02
    1a80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a82:	8e 01       	movw	r16, r28
    1a84:	0b 58       	subi	r16, 0x8B	; 139
    1a86:	1f 4f       	sbci	r17, 0xFF	; 255
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e7 58       	subi	r30, 0x87	; 135
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	2b ea       	ldi	r18, 0xAB	; 171
    1a98:	3a ea       	ldi	r19, 0xAA	; 170
    1a9a:	4a ea       	ldi	r20, 0xAA	; 170
    1a9c:	50 e4       	ldi	r21, 0x40	; 64
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	80 83       	st	Z, r24
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	a2 83       	std	Z+2, r26	; 0x02
    1aae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	eb 58       	subi	r30, 0x8B	; 139
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	60 81       	ld	r22, Z
    1ab8:	71 81       	ldd	r23, Z+1	; 0x01
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	93 81       	ldd	r25, Z+3	; 0x03
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	34 f4       	brge	.+12     	; 0x1ada <LCD_sendCommand+0x2f6>
		__ticks = 1;
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ec 58       	subi	r30, 0x8C	; 140
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 83       	st	Z, r24
    1ad8:	e0 c0       	rjmp	.+448    	; 0x1c9a <LCD_sendCommand+0x4b6>
	else if (__tmp > 255)
    1ada:	fe 01       	movw	r30, r28
    1adc:	eb 58       	subi	r30, 0x8B	; 139
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	53 e4       	ldi	r21, 0x43	; 67
    1af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	0c f0       	brlt	.+2      	; 0x1afa <LCD_sendCommand+0x316>
    1af8:	c0 c0       	rjmp	.+384    	; 0x1c7a <LCD_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1afa:	fe 01       	movw	r30, r28
    1afc:	e7 58       	subi	r30, 0x87	; 135
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	54 e4       	ldi	r21, 0x44	; 68
    1b10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e0 59       	subi	r30, 0x90	; 144
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 83       	st	Z, r24
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	a2 83       	std	Z+2, r26	; 0x02
    1b24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	8e 01       	movw	r16, r28
    1b28:	04 59       	subi	r16, 0x94	; 148
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e0 59       	subi	r30, 0x90	; 144
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a e7       	ldi	r20, 0x7A	; 122
    1b40:	55 e4       	ldi	r21, 0x45	; 69
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	a2 83       	std	Z+2, r26	; 0x02
    1b52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b54:	fe 01       	movw	r30, r28
    1b56:	e4 59       	subi	r30, 0x94	; 148
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	44 f4       	brge	.+16     	; 0x1b82 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1b72:	fe 01       	movw	r30, r28
    1b74:	e6 59       	subi	r30, 0x96	; 150
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	64 c0       	rjmp	.+200    	; 0x1c4a <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1b82:	fe 01       	movw	r30, r28
    1b84:	e4 59       	subi	r30, 0x94	; 148
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
    1b94:	4f e7       	ldi	r20, 0x7F	; 127
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b9c:	18 16       	cp	r1, r24
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <LCD_sendCommand+0x3be>
    1ba0:	43 c0       	rjmp	.+134    	; 0x1c28 <LCD_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e0 59       	subi	r30, 0x90	; 144
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8e 01       	movw	r16, r28
    1bc2:	06 59       	subi	r16, 0x96	; 150
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	1f c0       	rjmp	.+62     	; 0x1c18 <LCD_sendCommand+0x434>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e8 59       	subi	r30, 0x98	; 152
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 e9       	ldi	r24, 0x90	; 144
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be8:	fe 01       	movw	r30, r28
    1bea:	e8 59       	subi	r30, 0x98	; 152
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_sendCommand+0x40e>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e8 59       	subi	r30, 0x98	; 152
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	de 01       	movw	r26, r28
    1c02:	a6 59       	subi	r26, 0x96	; 150
    1c04:	bf 4f       	sbci	r27, 0xFF	; 255
    1c06:	fe 01       	movw	r30, r28
    1c08:	e6 59       	subi	r30, 0x96	; 150
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	9c 93       	st	X, r25
    1c16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e6 59       	subi	r30, 0x96	; 150
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	d1 f6       	brne	.-76     	; 0x1bda <LCD_sendCommand+0x3f6>
    1c26:	4b c0       	rjmp	.+150    	; 0x1cbe <LCD_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	8e 01       	movw	r16, r28
    1c2a:	06 59       	subi	r16, 0x96	; 150
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e4 59       	subi	r30, 0x94	; 148
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	f8 01       	movw	r30, r16
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
    1c4a:	de 01       	movw	r26, r28
    1c4c:	aa 59       	subi	r26, 0x9A	; 154
    1c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c50:	fe 01       	movw	r30, r28
    1c52:	e6 59       	subi	r30, 0x96	; 150
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	9c 93       	st	X, r25
    1c5e:	8e 93       	st	-X, r24
    1c60:	fe 01       	movw	r30, r28
    1c62:	ea 59       	subi	r30, 0x9A	; 154
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_sendCommand+0x486>
    1c6e:	fe 01       	movw	r30, r28
    1c70:	ea 59       	subi	r30, 0x9A	; 154
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	22 c0       	rjmp	.+68     	; 0x1cbe <LCD_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	0c 58       	subi	r16, 0x8C	; 140
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	eb 58       	subi	r30, 0x8B	; 139
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	f8 01       	movw	r30, r16
    1c98:	80 83       	st	Z, r24
    1c9a:	de 01       	movw	r26, r28
    1c9c:	ab 59       	subi	r26, 0x9B	; 155
    1c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ec 58       	subi	r30, 0x8C	; 140
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1caa:	fe 01       	movw	r30, r28
    1cac:	eb 59       	subi	r30, 0x9B	; 155
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8a 95       	dec	r24
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_sendCommand+0x4ce>
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	eb 59       	subi	r30, 0x9B	; 155
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 83       	st	Z, r24
	_delay_us(1);

	#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,4));
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	eb 56       	subi	r30, 0x6B	; 107
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 95       	swap	r24
    1cc8:	8f 70       	andi	r24, 0x0F	; 15
    1cca:	98 2f       	mov	r25, r24
    1ccc:	91 70       	andi	r25, 0x01	; 1
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	63 e0       	ldi	r22, 0x03	; 3
    1cd2:	49 2f       	mov	r20, r25
    1cd4:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,5));
    1cd8:	fe 01       	movw	r30, r28
    1cda:	eb 56       	subi	r30, 0x6B	; 107
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	82 95       	swap	r24
    1ce2:	86 95       	lsr	r24
    1ce4:	87 70       	andi	r24, 0x07	; 7
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	91 70       	andi	r25, 0x01	; 1
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	64 e0       	ldi	r22, 0x04	; 4
    1cee:	49 2f       	mov	r20, r25
    1cf0:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,6));
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	eb 56       	subi	r30, 0x6B	; 107
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	82 95       	swap	r24
    1cfe:	86 95       	lsr	r24
    1d00:	86 95       	lsr	r24
    1d02:	83 70       	andi	r24, 0x03	; 3
    1d04:	98 2f       	mov	r25, r24
    1d06:	91 70       	andi	r25, 0x01	; 1
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	65 e0       	ldi	r22, 0x05	; 5
    1d0c:	49 2f       	mov	r20, r25
    1d0e:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,7));
    1d12:	fe 01       	movw	r30, r28
    1d14:	eb 56       	subi	r30, 0x6B	; 107
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	99 27       	eor	r25, r25
    1d20:	99 1f       	adc	r25, r25
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	66 e0       	ldi	r22, 0x06	; 6
    1d26:	49 2f       	mov	r20, r25
    1d28:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ef 59       	subi	r30, 0x9F	; 159
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a0 e8       	ldi	r26, 0x80	; 128
    1d38:	bf e3       	ldi	r27, 0x3F	; 63
    1d3a:	80 83       	st	Z, r24
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	a2 83       	std	Z+2, r26	; 0x02
    1d40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d42:	8e 01       	movw	r16, r28
    1d44:	03 5a       	subi	r16, 0xA3	; 163
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ef 59       	subi	r30, 0x9F	; 159
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	55 e4       	ldi	r21, 0x45	; 69
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	f8 01       	movw	r30, r16
    1d68:	80 83       	st	Z, r24
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	a2 83       	std	Z+2, r26	; 0x02
    1d6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d70:	fe 01       	movw	r30, r28
    1d72:	e3 5a       	subi	r30, 0xA3	; 163
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	44 f4       	brge	.+16     	; 0x1d9e <LCD_sendCommand+0x5ba>
		__ticks = 1;
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e5 5a       	subi	r30, 0xA5	; 165
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	64 c0       	rjmp	.+200    	; 0x1e66 <LCD_sendCommand+0x682>
	else if (__tmp > 65535)
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e3 5a       	subi	r30, 0xA3	; 163
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <LCD_sendCommand+0x5da>
    1dbc:	43 c0       	rjmp	.+134    	; 0x1e44 <LCD_sendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ef 59       	subi	r30, 0x9F	; 159
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8e 01       	movw	r16, r28
    1dde:	05 5a       	subi	r16, 0xA5	; 165
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	f8 01       	movw	r30, r16
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24
    1df4:	1f c0       	rjmp	.+62     	; 0x1e34 <LCD_sendCommand+0x650>
    1df6:	fe 01       	movw	r30, r28
    1df8:	e7 5a       	subi	r30, 0xA7	; 167
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 e9       	ldi	r24, 0x90	; 144
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e04:	fe 01       	movw	r30, r28
    1e06:	e7 5a       	subi	r30, 0xA7	; 167
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_sendCommand+0x62a>
    1e12:	fe 01       	movw	r30, r28
    1e14:	e7 5a       	subi	r30, 0xA7	; 167
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	de 01       	movw	r26, r28
    1e1e:	a5 5a       	subi	r26, 0xA5	; 165
    1e20:	bf 4f       	sbci	r27, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	e5 5a       	subi	r30, 0xA5	; 165
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	11 96       	adiw	r26, 0x01	; 1
    1e30:	9c 93       	st	X, r25
    1e32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	fe 01       	movw	r30, r28
    1e36:	e5 5a       	subi	r30, 0xA5	; 165
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	d1 f6       	brne	.-76     	; 0x1df6 <LCD_sendCommand+0x612>
    1e42:	27 c0       	rjmp	.+78     	; 0x1e92 <LCD_sendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	8e 01       	movw	r16, r28
    1e46:	05 5a       	subi	r16, 0xA5	; 165
    1e48:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e3 5a       	subi	r30, 0xA3	; 163
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	f8 01       	movw	r30, r16
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	de 01       	movw	r26, r28
    1e68:	a9 5a       	subi	r26, 0xA9	; 169
    1e6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e5 5a       	subi	r30, 0xA5	; 165
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	8d 93       	st	X+, r24
    1e78:	9c 93       	st	X, r25
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e9 5a       	subi	r30, 0xA9	; 169
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LCD_sendCommand+0x6a0>
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e9 5a       	subi	r30, 0xA9	; 169
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ed 5a       	subi	r30, 0xAD	; 173
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e8       	ldi	r26, 0x80	; 128
    1ea8:	bf e3       	ldi	r27, 0x3F	; 63
    1eaa:	80 83       	st	Z, r24
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	a2 83       	std	Z+2, r26	; 0x02
    1eb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eb2:	8e 01       	movw	r16, r28
    1eb4:	01 5b       	subi	r16, 0xB1	; 177
    1eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ed 5a       	subi	r30, 0xAD	; 173
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	2b ea       	ldi	r18, 0xAB	; 171
    1ec8:	3a ea       	ldi	r19, 0xAA	; 170
    1eca:	4a ea       	ldi	r20, 0xAA	; 170
    1ecc:	50 e4       	ldi	r21, 0x40	; 64
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	80 83       	st	Z, r24
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	a2 83       	std	Z+2, r26	; 0x02
    1ede:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e1 5b       	subi	r30, 0xB1	; 177
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	60 81       	ld	r22, Z
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	34 f4       	brge	.+12     	; 0x1f0a <LCD_sendCommand+0x726>
		__ticks = 1;
    1efe:	fe 01       	movw	r30, r28
    1f00:	e2 5b       	subi	r30, 0xB2	; 178
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	80 83       	st	Z, r24
    1f08:	e0 c0       	rjmp	.+448    	; 0x20ca <LCD_sendCommand+0x8e6>
	else if (__tmp > 255)
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e1 5b       	subi	r30, 0xB1	; 177
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	0c f0       	brlt	.+2      	; 0x1f2a <LCD_sendCommand+0x746>
    1f28:	c0 c0       	rjmp	.+384    	; 0x20aa <LCD_sendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ed 5a       	subi	r30, 0xAD	; 173
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	4a e7       	ldi	r20, 0x7A	; 122
    1f3e:	54 e4       	ldi	r21, 0x44	; 68
    1f40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e6 5b       	subi	r30, 0xB6	; 182
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 83       	st	Z, r24
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	a2 83       	std	Z+2, r26	; 0x02
    1f54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f56:	8e 01       	movw	r16, r28
    1f58:	0a 5b       	subi	r16, 0xBA	; 186
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e6 5b       	subi	r30, 0xB6	; 182
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a e7       	ldi	r20, 0x7A	; 122
    1f70:	55 e4       	ldi	r21, 0x45	; 69
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	80 83       	st	Z, r24
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	a2 83       	std	Z+2, r26	; 0x02
    1f82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f84:	fe 01       	movw	r30, r28
    1f86:	ea 5b       	subi	r30, 0xBA	; 186
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	44 f4       	brge	.+16     	; 0x1fb2 <LCD_sendCommand+0x7ce>
		__ticks = 1;
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ec 5b       	subi	r30, 0xBC	; 188
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
    1fb0:	64 c0       	rjmp	.+200    	; 0x207a <LCD_sendCommand+0x896>
	else if (__tmp > 65535)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ea 5b       	subi	r30, 0xBA	; 186
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	0c f0       	brlt	.+2      	; 0x1fd2 <LCD_sendCommand+0x7ee>
    1fd0:	43 c0       	rjmp	.+134    	; 0x2058 <LCD_sendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e6 5b       	subi	r30, 0xB6	; 182
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8e 01       	movw	r16, r28
    1ff2:	0c 5b       	subi	r16, 0xBC	; 188
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
    2008:	1f c0       	rjmp	.+62     	; 0x2048 <LCD_sendCommand+0x864>
    200a:	fe 01       	movw	r30, r28
    200c:	ee 5b       	subi	r30, 0xBE	; 190
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 e9       	ldi	r24, 0x90	; 144
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	fe 01       	movw	r30, r28
    201a:	ee 5b       	subi	r30, 0xBE	; 190
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_sendCommand+0x83e>
    2026:	fe 01       	movw	r30, r28
    2028:	ee 5b       	subi	r30, 0xBE	; 190
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2030:	de 01       	movw	r26, r28
    2032:	ac 5b       	subi	r26, 0xBC	; 188
    2034:	bf 4f       	sbci	r27, 0xFF	; 255
    2036:	fe 01       	movw	r30, r28
    2038:	ec 5b       	subi	r30, 0xBC	; 188
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	11 96       	adiw	r26, 0x01	; 1
    2044:	9c 93       	st	X, r25
    2046:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	fe 01       	movw	r30, r28
    204a:	ec 5b       	subi	r30, 0xBC	; 188
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	d1 f6       	brne	.-76     	; 0x200a <LCD_sendCommand+0x826>
    2056:	42 c0       	rjmp	.+132    	; 0x20dc <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	8e 01       	movw	r16, r28
    205a:	0c 5b       	subi	r16, 0xBC	; 188
    205c:	1f 4f       	sbci	r17, 0xFF	; 255
    205e:	fe 01       	movw	r30, r28
    2060:	ea 5b       	subi	r30, 0xBA	; 186
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	f8 01       	movw	r30, r16
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	de 01       	movw	r26, r28
    207c:	a0 5c       	subi	r26, 0xC0	; 192
    207e:	bf 4f       	sbci	r27, 0xFF	; 255
    2080:	fe 01       	movw	r30, r28
    2082:	ec 5b       	subi	r30, 0xBC	; 188
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	9c 93       	st	X, r25
    208e:	8e 93       	st	-X, r24
    2090:	fe 01       	movw	r30, r28
    2092:	e0 5c       	subi	r30, 0xC0	; 192
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_sendCommand+0x8b6>
    209e:	fe 01       	movw	r30, r28
    20a0:	e0 5c       	subi	r30, 0xC0	; 192
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	80 83       	st	Z, r24
    20a8:	19 c0       	rjmp	.+50     	; 0x20dc <LCD_sendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20aa:	8e 01       	movw	r16, r28
    20ac:	02 5b       	subi	r16, 0xB2	; 178
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	e1 5b       	subi	r30, 0xB1	; 177
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	f8 01       	movw	r30, r16
    20c8:	80 83       	st	Z, r24
    20ca:	fe 01       	movw	r30, r28
    20cc:	e2 5b       	subi	r30, 0xB2	; 178
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    20d6:	8a 95       	dec	r24
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_sendCommand+0x8f2>
    20da:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	62 e0       	ldi	r22, 0x02	; 2
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e8       	ldi	r26, 0x80	; 128
    20ec:	bf e3       	ldi	r27, 0x3F	; 63
    20ee:	8b af       	std	Y+59, r24	; 0x3b
    20f0:	9c af       	std	Y+60, r25	; 0x3c
    20f2:	ad af       	std	Y+61, r26	; 0x3d
    20f4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    20f8:	7c ad       	ldd	r23, Y+60	; 0x3c
    20fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    20fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    20fe:	2b ea       	ldi	r18, 0xAB	; 171
    2100:	3a ea       	ldi	r19, 0xAA	; 170
    2102:	4a ea       	ldi	r20, 0xAA	; 170
    2104:	50 e4       	ldi	r21, 0x40	; 64
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8f ab       	std	Y+55, r24	; 0x37
    2110:	98 af       	std	Y+56, r25	; 0x38
    2112:	a9 af       	std	Y+57, r26	; 0x39
    2114:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2116:	6f a9       	ldd	r22, Y+55	; 0x37
    2118:	78 ad       	ldd	r23, Y+56	; 0x38
    211a:	89 ad       	ldd	r24, Y+57	; 0x39
    211c:	9a ad       	ldd	r25, Y+58	; 0x3a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	1c f4       	brge	.+6      	; 0x2134 <LCD_sendCommand+0x950>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	8e ab       	std	Y+54, r24	; 0x36
    2132:	91 c0       	rjmp	.+290    	; 0x2256 <LCD_sendCommand+0xa72>
	else if (__tmp > 255)
    2134:	6f a9       	ldd	r22, Y+55	; 0x37
    2136:	78 ad       	ldd	r23, Y+56	; 0x38
    2138:	89 ad       	ldd	r24, Y+57	; 0x39
    213a:	9a ad       	ldd	r25, Y+58	; 0x3a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	53 e4       	ldi	r21, 0x43	; 67
    2144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	0c f0       	brlt	.+2      	; 0x214e <LCD_sendCommand+0x96a>
    214c:	7b c0       	rjmp	.+246    	; 0x2244 <LCD_sendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    214e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2150:	7c ad       	ldd	r23, Y+60	; 0x3c
    2152:	8d ad       	ldd	r24, Y+61	; 0x3d
    2154:	9e ad       	ldd	r25, Y+62	; 0x3e
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a e7       	ldi	r20, 0x7A	; 122
    215c:	54 e4       	ldi	r21, 0x44	; 68
    215e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8a ab       	std	Y+50, r24	; 0x32
    2168:	9b ab       	std	Y+51, r25	; 0x33
    216a:	ac ab       	std	Y+52, r26	; 0x34
    216c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	6a a9       	ldd	r22, Y+50	; 0x32
    2170:	7b a9       	ldd	r23, Y+51	; 0x33
    2172:	8c a9       	ldd	r24, Y+52	; 0x34
    2174:	9d a9       	ldd	r25, Y+53	; 0x35
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a e7       	ldi	r20, 0x7A	; 122
    217c:	55 e4       	ldi	r21, 0x45	; 69
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8e a7       	std	Y+46, r24	; 0x2e
    2188:	9f a7       	std	Y+47, r25	; 0x2f
    218a:	a8 ab       	std	Y+48, r26	; 0x30
    218c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    218e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2190:	7f a5       	ldd	r23, Y+47	; 0x2f
    2192:	88 a9       	ldd	r24, Y+48	; 0x30
    2194:	99 a9       	ldd	r25, Y+49	; 0x31
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <LCD_sendCommand+0x9cc>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9d a7       	std	Y+45, r25	; 0x2d
    21ac:	8c a7       	std	Y+44, r24	; 0x2c
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <LCD_sendCommand+0xa4a>
	else if (__tmp > 65535)
    21b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    21b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    21b4:	88 a9       	ldd	r24, Y+48	; 0x30
    21b6:	99 a9       	ldd	r25, Y+49	; 0x31
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <LCD_sendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	6a a9       	ldd	r22, Y+50	; 0x32
    21ca:	7b a9       	ldd	r23, Y+51	; 0x33
    21cc:	8c a9       	ldd	r24, Y+52	; 0x34
    21ce:	9d a9       	ldd	r25, Y+53	; 0x35
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9d a7       	std	Y+45, r25	; 0x2d
    21ee:	8c a7       	std	Y+44, r24	; 0x2c
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <LCD_sendCommand+0xa2c>
    21f2:	80 e9       	ldi	r24, 0x90	; 144
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	9b a7       	std	Y+43, r25	; 0x2b
    21f8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    21fc:	9b a5       	ldd	r25, Y+43	; 0x2b
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_sendCommand+0xa1a>
    2202:	9b a7       	std	Y+43, r25	; 0x2b
    2204:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	8c a5       	ldd	r24, Y+44	; 0x2c
    2208:	9d a5       	ldd	r25, Y+45	; 0x2d
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9d a7       	std	Y+45, r25	; 0x2d
    220e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	8c a5       	ldd	r24, Y+44	; 0x2c
    2212:	9d a5       	ldd	r25, Y+45	; 0x2d
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	69 f7       	brne	.-38     	; 0x21f2 <LCD_sendCommand+0xa0e>
    2218:	24 c0       	rjmp	.+72     	; 0x2262 <LCD_sendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221a:	6e a5       	ldd	r22, Y+46	; 0x2e
    221c:	7f a5       	ldd	r23, Y+47	; 0x2f
    221e:	88 a9       	ldd	r24, Y+48	; 0x30
    2220:	99 a9       	ldd	r25, Y+49	; 0x31
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9d a7       	std	Y+45, r25	; 0x2d
    222c:	8c a7       	std	Y+44, r24	; 0x2c
    222e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2230:	9d a5       	ldd	r25, Y+45	; 0x2d
    2232:	99 a7       	std	Y+41, r25	; 0x29
    2234:	88 a7       	std	Y+40, r24	; 0x28
    2236:	88 a5       	ldd	r24, Y+40	; 0x28
    2238:	99 a5       	ldd	r25, Y+41	; 0x29
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_sendCommand+0xa56>
    223e:	99 a7       	std	Y+41, r25	; 0x29
    2240:	88 a7       	std	Y+40, r24	; 0x28
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <LCD_sendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2244:	6f a9       	ldd	r22, Y+55	; 0x37
    2246:	78 ad       	ldd	r23, Y+56	; 0x38
    2248:	89 ad       	ldd	r24, Y+57	; 0x39
    224a:	9a ad       	ldd	r25, Y+58	; 0x3a
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8e ab       	std	Y+54, r24	; 0x36
    2256:	8e a9       	ldd	r24, Y+54	; 0x36
    2258:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    225a:	8f a1       	ldd	r24, Y+39	; 0x27
    225c:	8a 95       	dec	r24
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_sendCommand+0xa78>
    2260:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,0));
    2262:	fe 01       	movw	r30, r28
    2264:	eb 56       	subi	r30, 0x6B	; 107
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	98 2f       	mov	r25, r24
    226c:	91 70       	andi	r25, 0x01	; 1
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	63 e0       	ldi	r22, 0x03	; 3
    2272:	49 2f       	mov	r20, r25
    2274:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,1));
    2278:	fe 01       	movw	r30, r28
    227a:	eb 56       	subi	r30, 0x6B	; 107
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	86 95       	lsr	r24
    2282:	98 2f       	mov	r25, r24
    2284:	91 70       	andi	r25, 0x01	; 1
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	64 e0       	ldi	r22, 0x04	; 4
    228a:	49 2f       	mov	r20, r25
    228c:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,2));
    2290:	fe 01       	movw	r30, r28
    2292:	eb 56       	subi	r30, 0x6B	; 107
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	86 95       	lsr	r24
    229a:	86 95       	lsr	r24
    229c:	98 2f       	mov	r25, r24
    229e:	91 70       	andi	r25, 0x01	; 1
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	65 e0       	ldi	r22, 0x05	; 5
    22a4:	49 2f       	mov	r20, r25
    22a6:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,3));
    22aa:	fe 01       	movw	r30, r28
    22ac:	eb 56       	subi	r30, 0x6B	; 107
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	80 81       	ld	r24, Z
    22b2:	86 95       	lsr	r24
    22b4:	86 95       	lsr	r24
    22b6:	86 95       	lsr	r24
    22b8:	98 2f       	mov	r25, r24
    22ba:	91 70       	andi	r25, 0x01	; 1
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	66 e0       	ldi	r22, 0x06	; 6
    22c0:	49 2f       	mov	r20, r25
    22c2:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 e8       	ldi	r26, 0x80	; 128
    22cc:	bf e3       	ldi	r27, 0x3F	; 63
    22ce:	8b a3       	std	Y+35, r24	; 0x23
    22d0:	9c a3       	std	Y+36, r25	; 0x24
    22d2:	ad a3       	std	Y+37, r26	; 0x25
    22d4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	6b a1       	ldd	r22, Y+35	; 0x23
    22d8:	7c a1       	ldd	r23, Y+36	; 0x24
    22da:	8d a1       	ldd	r24, Y+37	; 0x25
    22dc:	9e a1       	ldd	r25, Y+38	; 0x26
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a e7       	ldi	r20, 0x7A	; 122
    22e4:	55 e4       	ldi	r21, 0x45	; 69
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8f 8f       	std	Y+31, r24	; 0x1f
    22f0:	98 a3       	std	Y+32, r25	; 0x20
    22f2:	a9 a3       	std	Y+33, r26	; 0x21
    22f4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22f8:	78 a1       	ldd	r23, Y+32	; 0x20
    22fa:	89 a1       	ldd	r24, Y+33	; 0x21
    22fc:	9a a1       	ldd	r25, Y+34	; 0x22
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    230a:	88 23       	and	r24, r24
    230c:	2c f4       	brge	.+10     	; 0x2318 <LCD_sendCommand+0xb34>
		__ticks = 1;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9e 8f       	std	Y+30, r25	; 0x1e
    2314:	8d 8f       	std	Y+29, r24	; 0x1d
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <LCD_sendCommand+0xbb2>
	else if (__tmp > 65535)
    2318:	6f 8d       	ldd	r22, Y+31	; 0x1f
    231a:	78 a1       	ldd	r23, Y+32	; 0x20
    231c:	89 a1       	ldd	r24, Y+33	; 0x21
    231e:	9a a1       	ldd	r25, Y+34	; 0x22
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	4c f5       	brge	.+82     	; 0x2382 <LCD_sendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	6b a1       	ldd	r22, Y+35	; 0x23
    2332:	7c a1       	ldd	r23, Y+36	; 0x24
    2334:	8d a1       	ldd	r24, Y+37	; 0x25
    2336:	9e a1       	ldd	r25, Y+38	; 0x26
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 8f       	std	Y+30, r25	; 0x1e
    2356:	8d 8f       	std	Y+29, r24	; 0x1d
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <LCD_sendCommand+0xb94>
    235a:	80 e9       	ldi	r24, 0x90	; 144
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	9c 8f       	std	Y+28, r25	; 0x1c
    2360:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <LCD_sendCommand+0xb82>
    236a:	9c 8f       	std	Y+28, r25	; 0x1c
    236c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2370:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	9e 8f       	std	Y+30, r25	; 0x1e
    2376:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	8d 8d       	ldd	r24, Y+29	; 0x1d
    237a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f7       	brne	.-38     	; 0x235a <LCD_sendCommand+0xb76>
    2380:	14 c0       	rjmp	.+40     	; 0x23aa <LCD_sendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2384:	78 a1       	ldd	r23, Y+32	; 0x20
    2386:	89 a1       	ldd	r24, Y+33	; 0x21
    2388:	9a a1       	ldd	r25, Y+34	; 0x22
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9e 8f       	std	Y+30, r25	; 0x1e
    2394:	8d 8f       	std	Y+29, r24	; 0x1d
    2396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2398:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239a:	9a 8f       	std	Y+26, r25	; 0x1a
    239c:	89 8f       	std	Y+25, r24	; 0x19
    239e:	89 8d       	ldd	r24, Y+25	; 0x19
    23a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_sendCommand+0xbbe>
    23a6:	9a 8f       	std	Y+26, r25	; 0x1a
    23a8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	62 e0       	ldi	r22, 0x02	; 2
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e8       	ldi	r26, 0x80	; 128
    23ba:	bf e3       	ldi	r27, 0x3F	; 63
    23bc:	8d 8b       	std	Y+21, r24	; 0x15
    23be:	9e 8b       	std	Y+22, r25	; 0x16
    23c0:	af 8b       	std	Y+23, r26	; 0x17
    23c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23c4:	6d 89       	ldd	r22, Y+21	; 0x15
    23c6:	7e 89       	ldd	r23, Y+22	; 0x16
    23c8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ca:	98 8d       	ldd	r25, Y+24	; 0x18
    23cc:	2b ea       	ldi	r18, 0xAB	; 171
    23ce:	3a ea       	ldi	r19, 0xAA	; 170
    23d0:	4a ea       	ldi	r20, 0xAA	; 170
    23d2:	50 e4       	ldi	r21, 0x40	; 64
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	89 8b       	std	Y+17, r24	; 0x11
    23de:	9a 8b       	std	Y+18, r25	; 0x12
    23e0:	ab 8b       	std	Y+19, r26	; 0x13
    23e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23e4:	69 89       	ldd	r22, Y+17	; 0x11
    23e6:	7a 89       	ldd	r23, Y+18	; 0x12
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	1c f4       	brge	.+6      	; 0x2402 <LCD_sendCommand+0xc1e>
		__ticks = 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	88 8b       	std	Y+16, r24	; 0x10
    2400:	91 c0       	rjmp	.+290    	; 0x2524 <LCD_sendCommand+0xd40>
	else if (__tmp > 255)
    2402:	69 89       	ldd	r22, Y+17	; 0x11
    2404:	7a 89       	ldd	r23, Y+18	; 0x12
    2406:	8b 89       	ldd	r24, Y+19	; 0x13
    2408:	9c 89       	ldd	r25, Y+20	; 0x14
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	53 e4       	ldi	r21, 0x43	; 67
    2412:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	0c f0       	brlt	.+2      	; 0x241c <LCD_sendCommand+0xc38>
    241a:	7b c0       	rjmp	.+246    	; 0x2512 <LCD_sendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    241c:	6d 89       	ldd	r22, Y+21	; 0x15
    241e:	7e 89       	ldd	r23, Y+22	; 0x16
    2420:	8f 89       	ldd	r24, Y+23	; 0x17
    2422:	98 8d       	ldd	r25, Y+24	; 0x18
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	4a e7       	ldi	r20, 0x7A	; 122
    242a:	54 e4       	ldi	r21, 0x44	; 68
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	8c 87       	std	Y+12, r24	; 0x0c
    2436:	9d 87       	std	Y+13, r25	; 0x0d
    2438:	ae 87       	std	Y+14, r26	; 0x0e
    243a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243c:	6c 85       	ldd	r22, Y+12	; 0x0c
    243e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2440:	8e 85       	ldd	r24, Y+14	; 0x0e
    2442:	9f 85       	ldd	r25, Y+15	; 0x0f
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	4a e7       	ldi	r20, 0x7A	; 122
    244a:	55 e4       	ldi	r21, 0x45	; 69
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	88 87       	std	Y+8, r24	; 0x08
    2456:	99 87       	std	Y+9, r25	; 0x09
    2458:	aa 87       	std	Y+10, r26	; 0x0a
    245a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    245c:	68 85       	ldd	r22, Y+8	; 0x08
    245e:	79 85       	ldd	r23, Y+9	; 0x09
    2460:	8a 85       	ldd	r24, Y+10	; 0x0a
    2462:	9b 85       	ldd	r25, Y+11	; 0x0b
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e8       	ldi	r20, 0x80	; 128
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2470:	88 23       	and	r24, r24
    2472:	2c f4       	brge	.+10     	; 0x247e <LCD_sendCommand+0xc9a>
		__ticks = 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9f 83       	std	Y+7, r25	; 0x07
    247a:	8e 83       	std	Y+6, r24	; 0x06
    247c:	3f c0       	rjmp	.+126    	; 0x24fc <LCD_sendCommand+0xd18>
	else if (__tmp > 65535)
    247e:	68 85       	ldd	r22, Y+8	; 0x08
    2480:	79 85       	ldd	r23, Y+9	; 0x09
    2482:	8a 85       	ldd	r24, Y+10	; 0x0a
    2484:	9b 85       	ldd	r25, Y+11	; 0x0b
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	57 e4       	ldi	r21, 0x47	; 71
    248e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	4c f5       	brge	.+82     	; 0x24e8 <LCD_sendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	6c 85       	ldd	r22, Y+12	; 0x0c
    2498:	7d 85       	ldd	r23, Y+13	; 0x0d
    249a:	8e 85       	ldd	r24, Y+14	; 0x0e
    249c:	9f 85       	ldd	r25, Y+15	; 0x0f
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9f 83       	std	Y+7, r25	; 0x07
    24bc:	8e 83       	std	Y+6, r24	; 0x06
    24be:	0f c0       	rjmp	.+30     	; 0x24de <LCD_sendCommand+0xcfa>
    24c0:	80 e9       	ldi	r24, 0x90	; 144
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	9d 83       	std	Y+5, r25	; 0x05
    24c6:	8c 83       	std	Y+4, r24	; 0x04
    24c8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ca:	9d 81       	ldd	r25, Y+5	; 0x05
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_sendCommand+0xce8>
    24d0:	9d 83       	std	Y+5, r25	; 0x05
    24d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	8e 81       	ldd	r24, Y+6	; 0x06
    24d6:	9f 81       	ldd	r25, Y+7	; 0x07
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	9f 83       	std	Y+7, r25	; 0x07
    24dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	8e 81       	ldd	r24, Y+6	; 0x06
    24e0:	9f 81       	ldd	r25, Y+7	; 0x07
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	69 f7       	brne	.-38     	; 0x24c0 <LCD_sendCommand+0xcdc>
    24e6:	24 c0       	rjmp	.+72     	; 0x2530 <LCD_sendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	68 85       	ldd	r22, Y+8	; 0x08
    24ea:	79 85       	ldd	r23, Y+9	; 0x09
    24ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9f 83       	std	Y+7, r25	; 0x07
    24fa:	8e 83       	std	Y+6, r24	; 0x06
    24fc:	8e 81       	ldd	r24, Y+6	; 0x06
    24fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2500:	9b 83       	std	Y+3, r25	; 0x03
    2502:	8a 83       	std	Y+2, r24	; 0x02
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	9b 81       	ldd	r25, Y+3	; 0x03
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <LCD_sendCommand+0xd24>
    250c:	9b 83       	std	Y+3, r25	; 0x03
    250e:	8a 83       	std	Y+2, r24	; 0x02
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <LCD_sendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2512:	69 89       	ldd	r22, Y+17	; 0x11
    2514:	7a 89       	ldd	r23, Y+18	; 0x12
    2516:	8b 89       	ldd	r24, Y+19	; 0x13
    2518:	9c 89       	ldd	r25, Y+20	; 0x14
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	88 8b       	std	Y+16, r24	; 0x10
    2524:	88 89       	ldd	r24, Y+16	; 0x10
    2526:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	8a 95       	dec	r24
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_sendCommand+0xd46>
    252e:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2530:	cb 56       	subi	r28, 0x6B	; 107
    2532:	df 4f       	sbci	r29, 0xFF	; 255
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	08 95       	ret

00002548 <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	c1 58       	subi	r28, 0x81	; 129
    2556:	d0 40       	sbci	r29, 0x00	; 0
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	fe 01       	movw	r30, r28
    2564:	ef 57       	subi	r30, 0x7F	; 127
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	61 e0       	ldi	r22, 0x01	; 1
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2574:	fe 01       	movw	r30, r28
    2576:	e3 58       	subi	r30, 0x83	; 131
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	a0 e8       	ldi	r26, 0x80	; 128
    2580:	bf e3       	ldi	r27, 0x3F	; 63
    2582:	80 83       	st	Z, r24
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	a2 83       	std	Z+2, r26	; 0x02
    2588:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258a:	8e 01       	movw	r16, r28
    258c:	07 58       	subi	r16, 0x87	; 135
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	fe 01       	movw	r30, r28
    2592:	e3 58       	subi	r30, 0x83	; 131
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a e7       	ldi	r20, 0x7A	; 122
    25a4:	55 e4       	ldi	r21, 0x45	; 69
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	f8 01       	movw	r30, r16
    25b0:	80 83       	st	Z, r24
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	a2 83       	std	Z+2, r26	; 0x02
    25b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b8:	fe 01       	movw	r30, r28
    25ba:	e7 58       	subi	r30, 0x87	; 135
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e8       	ldi	r20, 0x80	; 128
    25cc:	5f e3       	ldi	r21, 0x3F	; 63
    25ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d2:	88 23       	and	r24, r24
    25d4:	44 f4       	brge	.+16     	; 0x25e6 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    25d6:	fe 01       	movw	r30, r28
    25d8:	e9 58       	subi	r30, 0x89	; 137
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
    25e4:	64 c0       	rjmp	.+200    	; 0x26ae <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    25e6:	fe 01       	movw	r30, r28
    25e8:	e7 58       	subi	r30, 0x87	; 135
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	0c f0       	brlt	.+2      	; 0x2606 <LCD_displayCharacter+0xbe>
    2604:	43 c0       	rjmp	.+134    	; 0x268c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	fe 01       	movw	r30, r28
    2608:	e3 58       	subi	r30, 0x83	; 131
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	8e 01       	movw	r16, r28
    2626:	09 58       	subi	r16, 0x89	; 137
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	bc 01       	movw	r22, r24
    262c:	cd 01       	movw	r24, r26
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	f8 01       	movw	r30, r16
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	80 83       	st	Z, r24
    263c:	1f c0       	rjmp	.+62     	; 0x267c <LCD_displayCharacter+0x134>
    263e:	fe 01       	movw	r30, r28
    2640:	eb 58       	subi	r30, 0x8B	; 139
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 e9       	ldi	r24, 0x90	; 144
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    264c:	fe 01       	movw	r30, r28
    264e:	eb 58       	subi	r30, 0x8B	; 139
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <LCD_displayCharacter+0x10e>
    265a:	fe 01       	movw	r30, r28
    265c:	eb 58       	subi	r30, 0x8B	; 139
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2664:	de 01       	movw	r26, r28
    2666:	a9 58       	subi	r26, 0x89	; 137
    2668:	bf 4f       	sbci	r27, 0xFF	; 255
    266a:	fe 01       	movw	r30, r28
    266c:	e9 58       	subi	r30, 0x89	; 137
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	11 96       	adiw	r26, 0x01	; 1
    2678:	9c 93       	st	X, r25
    267a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267c:	fe 01       	movw	r30, r28
    267e:	e9 58       	subi	r30, 0x89	; 137
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	91 81       	ldd	r25, Z+1	; 0x01
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	d1 f6       	brne	.-76     	; 0x263e <LCD_displayCharacter+0xf6>
    268a:	27 c0       	rjmp	.+78     	; 0x26da <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	8e 01       	movw	r16, r28
    268e:	09 58       	subi	r16, 0x89	; 137
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	fe 01       	movw	r30, r28
    2694:	e7 58       	subi	r30, 0x87	; 135
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	f8 01       	movw	r30, r16
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
    26ae:	de 01       	movw	r26, r28
    26b0:	ad 58       	subi	r26, 0x8D	; 141
    26b2:	bf 4f       	sbci	r27, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	e9 58       	subi	r30, 0x89	; 137
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	8d 93       	st	X+, r24
    26c0:	9c 93       	st	X, r25
    26c2:	fe 01       	movw	r30, r28
    26c4:	ed 58       	subi	r30, 0x8D	; 141
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 81       	ld	r24, Z
    26ca:	91 81       	ldd	r25, Z+1	; 0x01
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_displayCharacter+0x184>
    26d0:	fe 01       	movw	r30, r28
    26d2:	ed 58       	subi	r30, 0x8D	; 141
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	62 e0       	ldi	r22, 0x02	; 2
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    26e4:	fe 01       	movw	r30, r28
    26e6:	e1 59       	subi	r30, 0x91	; 145
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e8       	ldi	r26, 0x80	; 128
    26f0:	bf e3       	ldi	r27, 0x3F	; 63
    26f2:	80 83       	st	Z, r24
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	a2 83       	std	Z+2, r26	; 0x02
    26f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	8e 01       	movw	r16, r28
    26fc:	05 59       	subi	r16, 0x95	; 149
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	e1 59       	subi	r30, 0x91	; 145
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	55 e4       	ldi	r21, 0x45	; 69
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	f8 01       	movw	r30, r16
    2720:	80 83       	st	Z, r24
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	a2 83       	std	Z+2, r26	; 0x02
    2726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2728:	fe 01       	movw	r30, r28
    272a:	e5 59       	subi	r30, 0x95	; 149
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	44 f4       	brge	.+16     	; 0x2756 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2746:	fe 01       	movw	r30, r28
    2748:	e7 59       	subi	r30, 0x97	; 151
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	64 c0       	rjmp	.+200    	; 0x281e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2756:	fe 01       	movw	r30, r28
    2758:	e5 59       	subi	r30, 0x95	; 149
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2770:	18 16       	cp	r1, r24
    2772:	0c f0       	brlt	.+2      	; 0x2776 <LCD_displayCharacter+0x22e>
    2774:	43 c0       	rjmp	.+134    	; 0x27fc <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2776:	fe 01       	movw	r30, r28
    2778:	e1 59       	subi	r30, 0x91	; 145
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8e 01       	movw	r16, r28
    2796:	07 59       	subi	r16, 0x97	; 151
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	f8 01       	movw	r30, r16
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
    27ac:	1f c0       	rjmp	.+62     	; 0x27ec <LCD_displayCharacter+0x2a4>
    27ae:	fe 01       	movw	r30, r28
    27b0:	e9 59       	subi	r30, 0x99	; 153
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 e9       	ldi	r24, 0x90	; 144
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	fe 01       	movw	r30, r28
    27be:	e9 59       	subi	r30, 0x99	; 153
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_displayCharacter+0x27e>
    27ca:	fe 01       	movw	r30, r28
    27cc:	e9 59       	subi	r30, 0x99	; 153
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	de 01       	movw	r26, r28
    27d6:	a7 59       	subi	r26, 0x97	; 151
    27d8:	bf 4f       	sbci	r27, 0xFF	; 255
    27da:	fe 01       	movw	r30, r28
    27dc:	e7 59       	subi	r30, 0x97	; 151
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	11 96       	adiw	r26, 0x01	; 1
    27e8:	9c 93       	st	X, r25
    27ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e7 59       	subi	r30, 0x97	; 151
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	d1 f6       	brne	.-76     	; 0x27ae <LCD_displayCharacter+0x266>
    27fa:	27 c0       	rjmp	.+78     	; 0x284a <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fc:	8e 01       	movw	r16, r28
    27fe:	07 59       	subi	r16, 0x97	; 151
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e5 59       	subi	r30, 0x95	; 149
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	f8 01       	movw	r30, r16
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	de 01       	movw	r26, r28
    2820:	ab 59       	subi	r26, 0x9B	; 155
    2822:	bf 4f       	sbci	r27, 0xFF	; 255
    2824:	fe 01       	movw	r30, r28
    2826:	e7 59       	subi	r30, 0x97	; 151
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	8d 93       	st	X+, r24
    2830:	9c 93       	st	X, r25
    2832:	fe 01       	movw	r30, r28
    2834:	eb 59       	subi	r30, 0x9B	; 155
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <LCD_displayCharacter+0x2f4>
    2840:	fe 01       	movw	r30, r28
    2842:	eb 59       	subi	r30, 0x9B	; 155
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
	_delay_us(1);

#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,4));
    284a:	fe 01       	movw	r30, r28
    284c:	ef 57       	subi	r30, 0x7F	; 127
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	82 95       	swap	r24
    2854:	8f 70       	andi	r24, 0x0F	; 15
    2856:	98 2f       	mov	r25, r24
    2858:	91 70       	andi	r25, 0x01	; 1
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	63 e0       	ldi	r22, 0x03	; 3
    285e:	49 2f       	mov	r20, r25
    2860:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,5));
    2864:	fe 01       	movw	r30, r28
    2866:	ef 57       	subi	r30, 0x7F	; 127
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	82 95       	swap	r24
    286e:	86 95       	lsr	r24
    2870:	87 70       	andi	r24, 0x07	; 7
    2872:	98 2f       	mov	r25, r24
    2874:	91 70       	andi	r25, 0x01	; 1
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	64 e0       	ldi	r22, 0x04	; 4
    287a:	49 2f       	mov	r20, r25
    287c:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,6));
    2880:	fe 01       	movw	r30, r28
    2882:	ef 57       	subi	r30, 0x7F	; 127
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	82 95       	swap	r24
    288a:	86 95       	lsr	r24
    288c:	86 95       	lsr	r24
    288e:	83 70       	andi	r24, 0x03	; 3
    2890:	98 2f       	mov	r25, r24
    2892:	91 70       	andi	r25, 0x01	; 1
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	65 e0       	ldi	r22, 0x05	; 5
    2898:	49 2f       	mov	r20, r25
    289a:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,7));
    289e:	fe 01       	movw	r30, r28
    28a0:	ef 57       	subi	r30, 0x7F	; 127
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	98 2f       	mov	r25, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	99 27       	eor	r25, r25
    28ac:	99 1f       	adc	r25, r25
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	66 e0       	ldi	r22, 0x06	; 6
    28b2:	49 2f       	mov	r20, r25
    28b4:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    28b8:	fe 01       	movw	r30, r28
    28ba:	ef 59       	subi	r30, 0x9F	; 159
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a0 e8       	ldi	r26, 0x80	; 128
    28c4:	bf e3       	ldi	r27, 0x3F	; 63
    28c6:	80 83       	st	Z, r24
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	a2 83       	std	Z+2, r26	; 0x02
    28cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	8e 01       	movw	r16, r28
    28d0:	03 5a       	subi	r16, 0xA3	; 163
    28d2:	1f 4f       	sbci	r17, 0xFF	; 255
    28d4:	fe 01       	movw	r30, r28
    28d6:	ef 59       	subi	r30, 0x9F	; 159
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	82 81       	ldd	r24, Z+2	; 0x02
    28e0:	93 81       	ldd	r25, Z+3	; 0x03
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a e7       	ldi	r20, 0x7A	; 122
    28e8:	55 e4       	ldi	r21, 0x45	; 69
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	f8 01       	movw	r30, r16
    28f4:	80 83       	st	Z, r24
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	a2 83       	std	Z+2, r26	; 0x02
    28fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fc:	fe 01       	movw	r30, r28
    28fe:	e3 5a       	subi	r30, 0xA3	; 163
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	44 f4       	brge	.+16     	; 0x292a <LCD_displayCharacter+0x3e2>
		__ticks = 1;
    291a:	fe 01       	movw	r30, r28
    291c:	e5 5a       	subi	r30, 0xA5	; 165
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	64 c0       	rjmp	.+200    	; 0x29f2 <LCD_displayCharacter+0x4aa>
	else if (__tmp > 65535)
    292a:	fe 01       	movw	r30, r28
    292c:	e3 5a       	subi	r30, 0xA3	; 163
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2944:	18 16       	cp	r1, r24
    2946:	0c f0       	brlt	.+2      	; 0x294a <LCD_displayCharacter+0x402>
    2948:	43 c0       	rjmp	.+134    	; 0x29d0 <LCD_displayCharacter+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	fe 01       	movw	r30, r28
    294c:	ef 59       	subi	r30, 0x9F	; 159
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	51 e4       	ldi	r21, 0x41	; 65
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	8e 01       	movw	r16, r28
    296a:	05 5a       	subi	r16, 0xA5	; 165
    296c:	1f 4f       	sbci	r17, 0xFF	; 255
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	f8 01       	movw	r30, r16
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	1f c0       	rjmp	.+62     	; 0x29c0 <LCD_displayCharacter+0x478>
    2982:	fe 01       	movw	r30, r28
    2984:	e7 5a       	subi	r30, 0xA7	; 167
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	80 83       	st	Z, r24
    2990:	fe 01       	movw	r30, r28
    2992:	e7 5a       	subi	r30, 0xA7	; 167
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <LCD_displayCharacter+0x452>
    299e:	fe 01       	movw	r30, r28
    29a0:	e7 5a       	subi	r30, 0xA7	; 167
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a8:	de 01       	movw	r26, r28
    29aa:	a5 5a       	subi	r26, 0xA5	; 165
    29ac:	bf 4f       	sbci	r27, 0xFF	; 255
    29ae:	fe 01       	movw	r30, r28
    29b0:	e5 5a       	subi	r30, 0xA5	; 165
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	11 96       	adiw	r26, 0x01	; 1
    29bc:	9c 93       	st	X, r25
    29be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	fe 01       	movw	r30, r28
    29c2:	e5 5a       	subi	r30, 0xA5	; 165
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	d1 f6       	brne	.-76     	; 0x2982 <LCD_displayCharacter+0x43a>
    29ce:	27 c0       	rjmp	.+78     	; 0x2a1e <LCD_displayCharacter+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	8e 01       	movw	r16, r28
    29d2:	05 5a       	subi	r16, 0xA5	; 165
    29d4:	1f 4f       	sbci	r17, 0xFF	; 255
    29d6:	fe 01       	movw	r30, r28
    29d8:	e3 5a       	subi	r30, 0xA3	; 163
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	de 01       	movw	r26, r28
    29f4:	a9 5a       	subi	r26, 0xA9	; 169
    29f6:	bf 4f       	sbci	r27, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	e5 5a       	subi	r30, 0xA5	; 165
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	8d 93       	st	X+, r24
    2a04:	9c 93       	st	X, r25
    2a06:	fe 01       	movw	r30, r28
    2a08:	e9 5a       	subi	r30, 0xA9	; 169
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_displayCharacter+0x4c8>
    2a14:	fe 01       	movw	r30, r28
    2a16:	e9 5a       	subi	r30, 0xA9	; 169
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	62 e0       	ldi	r22, 0x02	; 2
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ed 5a       	subi	r30, 0xAD	; 173
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	a0 e8       	ldi	r26, 0x80	; 128
    2a34:	bf e3       	ldi	r27, 0x3F	; 63
    2a36:	80 83       	st	Z, r24
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	a2 83       	std	Z+2, r26	; 0x02
    2a3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a3e:	8e 01       	movw	r16, r28
    2a40:	01 5b       	subi	r16, 0xB1	; 177
    2a42:	1f 4f       	sbci	r17, 0xFF	; 255
    2a44:	fe 01       	movw	r30, r28
    2a46:	ed 5a       	subi	r30, 0xAD	; 173
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	2b ea       	ldi	r18, 0xAB	; 171
    2a54:	3a ea       	ldi	r19, 0xAA	; 170
    2a56:	4a ea       	ldi	r20, 0xAA	; 170
    2a58:	50 e4       	ldi	r21, 0x40	; 64
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	f8 01       	movw	r30, r16
    2a64:	80 83       	st	Z, r24
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	a2 83       	std	Z+2, r26	; 0x02
    2a6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e1 5b       	subi	r30, 0xB1	; 177
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	34 f4       	brge	.+12     	; 0x2a96 <LCD_displayCharacter+0x54e>
		__ticks = 1;
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e2 5b       	subi	r30, 0xB2	; 178
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	80 83       	st	Z, r24
    2a94:	e0 c0       	rjmp	.+448    	; 0x2c56 <LCD_displayCharacter+0x70e>
	else if (__tmp > 255)
    2a96:	fe 01       	movw	r30, r28
    2a98:	e1 5b       	subi	r30, 0xB1	; 177
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	53 e4       	ldi	r21, 0x43	; 67
    2aac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	0c f0       	brlt	.+2      	; 0x2ab6 <LCD_displayCharacter+0x56e>
    2ab4:	c0 c0       	rjmp	.+384    	; 0x2c36 <LCD_displayCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ed 5a       	subi	r30, 0xAD	; 173
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a e7       	ldi	r20, 0x7A	; 122
    2aca:	54 e4       	ldi	r21, 0x44	; 68
    2acc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e6 5b       	subi	r30, 0xB6	; 182
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 83       	st	Z, r24
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	a2 83       	std	Z+2, r26	; 0x02
    2ae0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	0a 5b       	subi	r16, 0xBA	; 186
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e6 5b       	subi	r30, 0xB6	; 182
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a e7       	ldi	r20, 0x7A	; 122
    2afc:	55 e4       	ldi	r21, 0x45	; 69
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	f8 01       	movw	r30, r16
    2b08:	80 83       	st	Z, r24
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	a2 83       	std	Z+2, r26	; 0x02
    2b0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b10:	fe 01       	movw	r30, r28
    2b12:	ea 5b       	subi	r30, 0xBA	; 186
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	44 f4       	brge	.+16     	; 0x2b3e <LCD_displayCharacter+0x5f6>
		__ticks = 1;
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ec 5b       	subi	r30, 0xBC	; 188
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	64 c0       	rjmp	.+200    	; 0x2c06 <LCD_displayCharacter+0x6be>
	else if (__tmp > 65535)
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ea 5b       	subi	r30, 0xBA	; 186
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	0c f0       	brlt	.+2      	; 0x2b5e <LCD_displayCharacter+0x616>
    2b5c:	43 c0       	rjmp	.+134    	; 0x2be4 <LCD_displayCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e6 5b       	subi	r30, 0xB6	; 182
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	0c 5b       	subi	r16, 0xBC	; 188
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	f8 01       	movw	r30, r16
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	1f c0       	rjmp	.+62     	; 0x2bd4 <LCD_displayCharacter+0x68c>
    2b96:	fe 01       	movw	r30, r28
    2b98:	ee 5b       	subi	r30, 0xBE	; 190
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 e9       	ldi	r24, 0x90	; 144
    2b9e:	91 e0       	ldi	r25, 0x01	; 1
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ee 5b       	subi	r30, 0xBE	; 190
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_displayCharacter+0x666>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	ee 5b       	subi	r30, 0xBE	; 190
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	de 01       	movw	r26, r28
    2bbe:	ac 5b       	subi	r26, 0xBC	; 188
    2bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ec 5b       	subi	r30, 0xBC	; 188
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ec 5b       	subi	r30, 0xBC	; 188
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	d1 f6       	brne	.-76     	; 0x2b96 <LCD_displayCharacter+0x64e>
    2be2:	42 c0       	rjmp	.+132    	; 0x2c68 <LCD_displayCharacter+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	8e 01       	movw	r16, r28
    2be6:	0c 5b       	subi	r16, 0xBC	; 188
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	ea 5b       	subi	r30, 0xBA	; 186
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	f8 01       	movw	r30, r16
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	de 01       	movw	r26, r28
    2c08:	a0 5c       	subi	r26, 0xC0	; 192
    2c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	ec 5b       	subi	r30, 0xBC	; 188
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	11 96       	adiw	r26, 0x01	; 1
    2c18:	9c 93       	st	X, r25
    2c1a:	8e 93       	st	-X, r24
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e0 5c       	subi	r30, 0xC0	; 192
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_displayCharacter+0x6de>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e0 5c       	subi	r30, 0xC0	; 192
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
    2c34:	19 c0       	rjmp	.+50     	; 0x2c68 <LCD_displayCharacter+0x720>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c36:	8e 01       	movw	r16, r28
    2c38:	02 5b       	subi	r16, 0xB2	; 178
    2c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e1 5b       	subi	r30, 0xB1	; 177
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	f8 01       	movw	r30, r16
    2c54:	80 83       	st	Z, r24
    2c56:	fe 01       	movw	r30, r28
    2c58:	e2 5b       	subi	r30, 0xB2	; 178
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 81       	ld	r24, Z
    2c5e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c60:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c62:	8a 95       	dec	r24
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <LCD_displayCharacter+0x71a>
    2c66:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	62 e0       	ldi	r22, 0x02	; 2
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	a0 e8       	ldi	r26, 0x80	; 128
    2c78:	bf e3       	ldi	r27, 0x3F	; 63
    2c7a:	8b af       	std	Y+59, r24	; 0x3b
    2c7c:	9c af       	std	Y+60, r25	; 0x3c
    2c7e:	ad af       	std	Y+61, r26	; 0x3d
    2c80:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c82:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c84:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c88:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c8a:	2b ea       	ldi	r18, 0xAB	; 171
    2c8c:	3a ea       	ldi	r19, 0xAA	; 170
    2c8e:	4a ea       	ldi	r20, 0xAA	; 170
    2c90:	50 e4       	ldi	r21, 0x40	; 64
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	8f ab       	std	Y+55, r24	; 0x37
    2c9c:	98 af       	std	Y+56, r25	; 0x38
    2c9e:	a9 af       	std	Y+57, r26	; 0x39
    2ca0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2ca2:	6f a9       	ldd	r22, Y+55	; 0x37
    2ca4:	78 ad       	ldd	r23, Y+56	; 0x38
    2ca6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ca8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e8       	ldi	r20, 0x80	; 128
    2cb0:	5f e3       	ldi	r21, 0x3F	; 63
    2cb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb6:	88 23       	and	r24, r24
    2cb8:	1c f4       	brge	.+6      	; 0x2cc0 <LCD_displayCharacter+0x778>
		__ticks = 1;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	8e ab       	std	Y+54, r24	; 0x36
    2cbe:	91 c0       	rjmp	.+290    	; 0x2de2 <LCD_displayCharacter+0x89a>
	else if (__tmp > 255)
    2cc0:	6f a9       	ldd	r22, Y+55	; 0x37
    2cc2:	78 ad       	ldd	r23, Y+56	; 0x38
    2cc4:	89 ad       	ldd	r24, Y+57	; 0x39
    2cc6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	4f e7       	ldi	r20, 0x7F	; 127
    2cce:	53 e4       	ldi	r21, 0x43	; 67
    2cd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd4:	18 16       	cp	r1, r24
    2cd6:	0c f0       	brlt	.+2      	; 0x2cda <LCD_displayCharacter+0x792>
    2cd8:	7b c0       	rjmp	.+246    	; 0x2dd0 <LCD_displayCharacter+0x888>
	{
		_delay_ms(__us / 1000.0);
    2cda:	6b ad       	ldd	r22, Y+59	; 0x3b
    2cdc:	7c ad       	ldd	r23, Y+60	; 0x3c
    2cde:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ce0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a e7       	ldi	r20, 0x7A	; 122
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	8a ab       	std	Y+50, r24	; 0x32
    2cf4:	9b ab       	std	Y+51, r25	; 0x33
    2cf6:	ac ab       	std	Y+52, r26	; 0x34
    2cf8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfa:	6a a9       	ldd	r22, Y+50	; 0x32
    2cfc:	7b a9       	ldd	r23, Y+51	; 0x33
    2cfe:	8c a9       	ldd	r24, Y+52	; 0x34
    2d00:	9d a9       	ldd	r25, Y+53	; 0x35
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	4a e7       	ldi	r20, 0x7A	; 122
    2d08:	55 e4       	ldi	r21, 0x45	; 69
    2d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8e a7       	std	Y+46, r24	; 0x2e
    2d14:	9f a7       	std	Y+47, r25	; 0x2f
    2d16:	a8 ab       	std	Y+48, r26	; 0x30
    2d18:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2d1a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d1c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d1e:	88 a9       	ldd	r24, Y+48	; 0x30
    2d20:	99 a9       	ldd	r25, Y+49	; 0x31
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e8       	ldi	r20, 0x80	; 128
    2d28:	5f e3       	ldi	r21, 0x3F	; 63
    2d2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d2e:	88 23       	and	r24, r24
    2d30:	2c f4       	brge	.+10     	; 0x2d3c <LCD_displayCharacter+0x7f4>
		__ticks = 1;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9d a7       	std	Y+45, r25	; 0x2d
    2d38:	8c a7       	std	Y+44, r24	; 0x2c
    2d3a:	3f c0       	rjmp	.+126    	; 0x2dba <LCD_displayCharacter+0x872>
	else if (__tmp > 65535)
    2d3c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d3e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d40:	88 a9       	ldd	r24, Y+48	; 0x30
    2d42:	99 a9       	ldd	r25, Y+49	; 0x31
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	4c f5       	brge	.+82     	; 0x2da6 <LCD_displayCharacter+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	6a a9       	ldd	r22, Y+50	; 0x32
    2d56:	7b a9       	ldd	r23, Y+51	; 0x33
    2d58:	8c a9       	ldd	r24, Y+52	; 0x34
    2d5a:	9d a9       	ldd	r25, Y+53	; 0x35
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9d a7       	std	Y+45, r25	; 0x2d
    2d7a:	8c a7       	std	Y+44, r24	; 0x2c
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <LCD_displayCharacter+0x854>
    2d7e:	80 e9       	ldi	r24, 0x90	; 144
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	9b a7       	std	Y+43, r25	; 0x2b
    2d84:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d86:	8a a5       	ldd	r24, Y+42	; 0x2a
    2d88:	9b a5       	ldd	r25, Y+43	; 0x2b
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <LCD_displayCharacter+0x842>
    2d8e:	9b a7       	std	Y+43, r25	; 0x2b
    2d90:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d92:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d94:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	9d a7       	std	Y+45, r25	; 0x2d
    2d9a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d9e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	69 f7       	brne	.-38     	; 0x2d7e <LCD_displayCharacter+0x836>
    2da4:	24 c0       	rjmp	.+72     	; 0x2dee <LCD_displayCharacter+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	6e a5       	ldd	r22, Y+46	; 0x2e
    2da8:	7f a5       	ldd	r23, Y+47	; 0x2f
    2daa:	88 a9       	ldd	r24, Y+48	; 0x30
    2dac:	99 a9       	ldd	r25, Y+49	; 0x31
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9d a7       	std	Y+45, r25	; 0x2d
    2db8:	8c a7       	std	Y+44, r24	; 0x2c
    2dba:	8c a5       	ldd	r24, Y+44	; 0x2c
    2dbc:	9d a5       	ldd	r25, Y+45	; 0x2d
    2dbe:	99 a7       	std	Y+41, r25	; 0x29
    2dc0:	88 a7       	std	Y+40, r24	; 0x28
    2dc2:	88 a5       	ldd	r24, Y+40	; 0x28
    2dc4:	99 a5       	ldd	r25, Y+41	; 0x29
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <LCD_displayCharacter+0x87e>
    2dca:	99 a7       	std	Y+41, r25	; 0x29
    2dcc:	88 a7       	std	Y+40, r24	; 0x28
    2dce:	0f c0       	rjmp	.+30     	; 0x2dee <LCD_displayCharacter+0x8a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dd0:	6f a9       	ldd	r22, Y+55	; 0x37
    2dd2:	78 ad       	ldd	r23, Y+56	; 0x38
    2dd4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8e ab       	std	Y+54, r24	; 0x36
    2de2:	8e a9       	ldd	r24, Y+54	; 0x36
    2de4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2de6:	8f a1       	ldd	r24, Y+39	; 0x27
    2de8:	8a 95       	dec	r24
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <LCD_displayCharacter+0x8a0>
    2dec:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,0));
    2dee:	fe 01       	movw	r30, r28
    2df0:	ef 57       	subi	r30, 0x7F	; 127
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	80 81       	ld	r24, Z
    2df6:	98 2f       	mov	r25, r24
    2df8:	91 70       	andi	r25, 0x01	; 1
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	63 e0       	ldi	r22, 0x03	; 3
    2dfe:	49 2f       	mov	r20, r25
    2e00:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,1));
    2e04:	fe 01       	movw	r30, r28
    2e06:	ef 57       	subi	r30, 0x7F	; 127
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	86 95       	lsr	r24
    2e0e:	98 2f       	mov	r25, r24
    2e10:	91 70       	andi	r25, 0x01	; 1
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	64 e0       	ldi	r22, 0x04	; 4
    2e16:	49 2f       	mov	r20, r25
    2e18:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,2));
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ef 57       	subi	r30, 0x7F	; 127
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	86 95       	lsr	r24
    2e26:	86 95       	lsr	r24
    2e28:	98 2f       	mov	r25, r24
    2e2a:	91 70       	andi	r25, 0x01	; 1
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	65 e0       	ldi	r22, 0x05	; 5
    2e30:	49 2f       	mov	r20, r25
    2e32:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,3));
    2e36:	fe 01       	movw	r30, r28
    2e38:	ef 57       	subi	r30, 0x7F	; 127
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 81       	ld	r24, Z
    2e3e:	86 95       	lsr	r24
    2e40:	86 95       	lsr	r24
    2e42:	86 95       	lsr	r24
    2e44:	98 2f       	mov	r25, r24
    2e46:	91 70       	andi	r25, 0x01	; 1
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	66 e0       	ldi	r22, 0x06	; 6
    2e4c:	49 2f       	mov	r20, r25
    2e4e:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a0 e8       	ldi	r26, 0x80	; 128
    2e58:	bf e3       	ldi	r27, 0x3F	; 63
    2e5a:	8b a3       	std	Y+35, r24	; 0x23
    2e5c:	9c a3       	std	Y+36, r25	; 0x24
    2e5e:	ad a3       	std	Y+37, r26	; 0x25
    2e60:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e62:	6b a1       	ldd	r22, Y+35	; 0x23
    2e64:	7c a1       	ldd	r23, Y+36	; 0x24
    2e66:	8d a1       	ldd	r24, Y+37	; 0x25
    2e68:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	4a e7       	ldi	r20, 0x7A	; 122
    2e70:	55 e4       	ldi	r21, 0x45	; 69
    2e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2e7c:	98 a3       	std	Y+32, r25	; 0x20
    2e7e:	a9 a3       	std	Y+33, r26	; 0x21
    2e80:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2e82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e84:	78 a1       	ldd	r23, Y+32	; 0x20
    2e86:	89 a1       	ldd	r24, Y+33	; 0x21
    2e88:	9a a1       	ldd	r25, Y+34	; 0x22
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <LCD_displayCharacter+0x95c>
		__ticks = 1;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2ea0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ea2:	3f c0       	rjmp	.+126    	; 0x2f22 <LCD_displayCharacter+0x9da>
	else if (__tmp > 65535)
    2ea4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ea6:	78 a1       	ldd	r23, Y+32	; 0x20
    2ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	3f ef       	ldi	r19, 0xFF	; 255
    2eb0:	4f e7       	ldi	r20, 0x7F	; 127
    2eb2:	57 e4       	ldi	r21, 0x47	; 71
    2eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb8:	18 16       	cp	r1, r24
    2eba:	4c f5       	brge	.+82     	; 0x2f0e <LCD_displayCharacter+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e2       	ldi	r20, 0x20	; 32
    2eca:	51 e4       	ldi	r21, 0x41	; 65
    2ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ee2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee4:	0f c0       	rjmp	.+30     	; 0x2f04 <LCD_displayCharacter+0x9bc>
    2ee6:	80 e9       	ldi	r24, 0x90	; 144
    2ee8:	91 e0       	ldi	r25, 0x01	; 1
    2eea:	9c 8f       	std	Y+28, r25	; 0x1c
    2eec:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <LCD_displayCharacter+0x9aa>
    2ef6:	9c 8f       	std	Y+28, r25	; 0x1c
    2ef8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2efc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	9e 8f       	std	Y+30, r25	; 0x1e
    2f02:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	69 f7       	brne	.-38     	; 0x2ee6 <LCD_displayCharacter+0x99e>
    2f0c:	14 c0       	rjmp	.+40     	; 0x2f36 <LCD_displayCharacter+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f10:	78 a1       	ldd	r23, Y+32	; 0x20
    2f12:	89 a1       	ldd	r24, Y+33	; 0x21
    2f14:	9a a1       	ldd	r25, Y+34	; 0x22
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f20:	8d 8f       	std	Y+29, r24	; 0x1d
    2f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f26:	9a 8f       	std	Y+26, r25	; 0x1a
    2f28:	89 8f       	std	Y+25, r24	; 0x19
    2f2a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <LCD_displayCharacter+0x9e6>
    2f32:	9a 8f       	std	Y+26, r25	; 0x1a
    2f34:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	62 e0       	ldi	r22, 0x02	; 2
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	a0 e8       	ldi	r26, 0x80	; 128
    2f46:	bf e3       	ldi	r27, 0x3F	; 63
    2f48:	8d 8b       	std	Y+21, r24	; 0x15
    2f4a:	9e 8b       	std	Y+22, r25	; 0x16
    2f4c:	af 8b       	std	Y+23, r26	; 0x17
    2f4e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f50:	6d 89       	ldd	r22, Y+21	; 0x15
    2f52:	7e 89       	ldd	r23, Y+22	; 0x16
    2f54:	8f 89       	ldd	r24, Y+23	; 0x17
    2f56:	98 8d       	ldd	r25, Y+24	; 0x18
    2f58:	2b ea       	ldi	r18, 0xAB	; 171
    2f5a:	3a ea       	ldi	r19, 0xAA	; 170
    2f5c:	4a ea       	ldi	r20, 0xAA	; 170
    2f5e:	50 e4       	ldi	r21, 0x40	; 64
    2f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	89 8b       	std	Y+17, r24	; 0x11
    2f6a:	9a 8b       	std	Y+18, r25	; 0x12
    2f6c:	ab 8b       	std	Y+19, r26	; 0x13
    2f6e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f70:	69 89       	ldd	r22, Y+17	; 0x11
    2f72:	7a 89       	ldd	r23, Y+18	; 0x12
    2f74:	8b 89       	ldd	r24, Y+19	; 0x13
    2f76:	9c 89       	ldd	r25, Y+20	; 0x14
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e8       	ldi	r20, 0x80	; 128
    2f7e:	5f e3       	ldi	r21, 0x3F	; 63
    2f80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	1c f4       	brge	.+6      	; 0x2f8e <LCD_displayCharacter+0xa46>
		__ticks = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	88 8b       	std	Y+16, r24	; 0x10
    2f8c:	91 c0       	rjmp	.+290    	; 0x30b0 <LCD_displayCharacter+0xb68>
	else if (__tmp > 255)
    2f8e:	69 89       	ldd	r22, Y+17	; 0x11
    2f90:	7a 89       	ldd	r23, Y+18	; 0x12
    2f92:	8b 89       	ldd	r24, Y+19	; 0x13
    2f94:	9c 89       	ldd	r25, Y+20	; 0x14
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4f e7       	ldi	r20, 0x7F	; 127
    2f9c:	53 e4       	ldi	r21, 0x43	; 67
    2f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa2:	18 16       	cp	r1, r24
    2fa4:	0c f0       	brlt	.+2      	; 0x2fa8 <LCD_displayCharacter+0xa60>
    2fa6:	7b c0       	rjmp	.+246    	; 0x309e <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    2faa:	7e 89       	ldd	r23, Y+22	; 0x16
    2fac:	8f 89       	ldd	r24, Y+23	; 0x17
    2fae:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	4a e7       	ldi	r20, 0x7A	; 122
    2fb6:	54 e4       	ldi	r21, 0x44	; 68
    2fb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8c 87       	std	Y+12, r24	; 0x0c
    2fc2:	9d 87       	std	Y+13, r25	; 0x0d
    2fc4:	ae 87       	std	Y+14, r26	; 0x0e
    2fc6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fca:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fce:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	4a e7       	ldi	r20, 0x7A	; 122
    2fd6:	55 e4       	ldi	r21, 0x45	; 69
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	88 87       	std	Y+8, r24	; 0x08
    2fe2:	99 87       	std	Y+9, r25	; 0x09
    2fe4:	aa 87       	std	Y+10, r26	; 0x0a
    2fe6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fe8:	68 85       	ldd	r22, Y+8	; 0x08
    2fea:	79 85       	ldd	r23, Y+9	; 0x09
    2fec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	2c f4       	brge	.+10     	; 0x300a <LCD_displayCharacter+0xac2>
		__ticks = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	9f 83       	std	Y+7, r25	; 0x07
    3006:	8e 83       	std	Y+6, r24	; 0x06
    3008:	3f c0       	rjmp	.+126    	; 0x3088 <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    300a:	68 85       	ldd	r22, Y+8	; 0x08
    300c:	79 85       	ldd	r23, Y+9	; 0x09
    300e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3010:	9b 85       	ldd	r25, Y+11	; 0x0b
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	3f ef       	ldi	r19, 0xFF	; 255
    3016:	4f e7       	ldi	r20, 0x7F	; 127
    3018:	57 e4       	ldi	r21, 0x47	; 71
    301a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301e:	18 16       	cp	r1, r24
    3020:	4c f5       	brge	.+82     	; 0x3074 <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3022:	6c 85       	ldd	r22, Y+12	; 0x0c
    3024:	7d 85       	ldd	r23, Y+13	; 0x0d
    3026:	8e 85       	ldd	r24, Y+14	; 0x0e
    3028:	9f 85       	ldd	r25, Y+15	; 0x0f
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e2       	ldi	r20, 0x20	; 32
    3030:	51 e4       	ldi	r21, 0x41	; 65
    3032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9f 83       	std	Y+7, r25	; 0x07
    3048:	8e 83       	std	Y+6, r24	; 0x06
    304a:	0f c0       	rjmp	.+30     	; 0x306a <LCD_displayCharacter+0xb22>
    304c:	80 e9       	ldi	r24, 0x90	; 144
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	9d 83       	std	Y+5, r25	; 0x05
    3052:	8c 83       	std	Y+4, r24	; 0x04
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	9d 81       	ldd	r25, Y+5	; 0x05
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <LCD_displayCharacter+0xb10>
    305c:	9d 83       	std	Y+5, r25	; 0x05
    305e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3060:	8e 81       	ldd	r24, Y+6	; 0x06
    3062:	9f 81       	ldd	r25, Y+7	; 0x07
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	9f 83       	std	Y+7, r25	; 0x07
    3068:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	8e 81       	ldd	r24, Y+6	; 0x06
    306c:	9f 81       	ldd	r25, Y+7	; 0x07
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	69 f7       	brne	.-38     	; 0x304c <LCD_displayCharacter+0xb04>
    3072:	24 c0       	rjmp	.+72     	; 0x30bc <LCD_displayCharacter+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3074:	68 85       	ldd	r22, Y+8	; 0x08
    3076:	79 85       	ldd	r23, Y+9	; 0x09
    3078:	8a 85       	ldd	r24, Y+10	; 0x0a
    307a:	9b 85       	ldd	r25, Y+11	; 0x0b
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9f 83       	std	Y+7, r25	; 0x07
    3086:	8e 83       	std	Y+6, r24	; 0x06
    3088:	8e 81       	ldd	r24, Y+6	; 0x06
    308a:	9f 81       	ldd	r25, Y+7	; 0x07
    308c:	9b 83       	std	Y+3, r25	; 0x03
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <LCD_displayCharacter+0xb4c>
    3098:	9b 83       	std	Y+3, r25	; 0x03
    309a:	8a 83       	std	Y+2, r24	; 0x02
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <LCD_displayCharacter+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    309e:	69 89       	ldd	r22, Y+17	; 0x11
    30a0:	7a 89       	ldd	r23, Y+18	; 0x12
    30a2:	8b 89       	ldd	r24, Y+19	; 0x13
    30a4:	9c 89       	ldd	r25, Y+20	; 0x14
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	88 8b       	std	Y+16, r24	; 0x10
    30b0:	88 89       	ldd	r24, Y+16	; 0x10
    30b2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	8a 95       	dec	r24
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <LCD_displayCharacter+0xb6e>
    30ba:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    30bc:	cf 57       	subi	r28, 0x7F	; 127
    30be:	df 4f       	sbci	r29, 0xFF	; 255
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	00 d0       	rcall	.+0      	; 0x30da <LCD_displayString+0x6>
    30da:	0f 92       	push	r0
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	9b 83       	std	Y+3, r25	; 0x03
    30e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    30e4:	19 82       	std	Y+1, r1	; 0x01
    30e6:	0e c0       	rjmp	.+28     	; 0x3104 <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	9b 81       	ldd	r25, Y+3	; 0x03
    30f2:	fc 01       	movw	r30, r24
    30f4:	e2 0f       	add	r30, r18
    30f6:	f3 1f       	adc	r31, r19
    30f8:	80 81       	ld	r24, Z
    30fa:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	8f 5f       	subi	r24, 0xFF	; 255
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	9b 81       	ldd	r25, Y+3	; 0x03
    310e:	fc 01       	movw	r30, r24
    3110:	e2 0f       	add	r30, r18
    3112:	f3 1f       	adc	r31, r19
    3114:	80 81       	ld	r24, Z
    3116:	88 23       	and	r24, r24
    3118:	39 f7       	brne	.-50     	; 0x30e8 <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	62 97       	sbiw	r28, 0x12	; 18
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	9a 8b       	std	Y+18, r25	; 0x12
    313c:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    313e:	89 89       	ldd	r24, Y+17	; 0x11
    3140:	9a 89       	ldd	r25, Y+18	; 0x12
    3142:	9e 01       	movw	r18, r28
    3144:	2f 5f       	subi	r18, 0xFF	; 255
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	b9 01       	movw	r22, r18
    314a:	4a e0       	ldi	r20, 0x0A	; 10
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	0e 94 0d 1b 	call	0x361a	; 0x361a <itoa>

   LCD_displayString(arr);
    3152:	ce 01       	movw	r24, r28
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_displayString>
}
    315a:	62 96       	adiw	r28, 0x12	; 18
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	00 d0       	rcall	.+0      	; 0x3172 <LCD_moveCursor+0x6>
    3172:	00 d0       	rcall	.+0      	; 0x3174 <LCD_moveCursor+0x8>
    3174:	0f 92       	push	r0
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	8a 83       	std	Y+2, r24	; 0x02
    317c:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	3d 83       	std	Y+5, r19	; 0x05
    3186:	2c 83       	std	Y+4, r18	; 0x04
    3188:	8c 81       	ldd	r24, Y+4	; 0x04
    318a:	9d 81       	ldd	r25, Y+5	; 0x05
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	91 05       	cpc	r25, r1
    3190:	c1 f0       	breq	.+48     	; 0x31c2 <LCD_moveCursor+0x56>
    3192:	2c 81       	ldd	r18, Y+4	; 0x04
    3194:	3d 81       	ldd	r19, Y+5	; 0x05
    3196:	22 30       	cpi	r18, 0x02	; 2
    3198:	31 05       	cpc	r19, r1
    319a:	2c f4       	brge	.+10     	; 0x31a6 <LCD_moveCursor+0x3a>
    319c:	8c 81       	ldd	r24, Y+4	; 0x04
    319e:	9d 81       	ldd	r25, Y+5	; 0x05
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	61 f0       	breq	.+24     	; 0x31bc <LCD_moveCursor+0x50>
    31a4:	19 c0       	rjmp	.+50     	; 0x31d8 <LCD_moveCursor+0x6c>
    31a6:	2c 81       	ldd	r18, Y+4	; 0x04
    31a8:	3d 81       	ldd	r19, Y+5	; 0x05
    31aa:	22 30       	cpi	r18, 0x02	; 2
    31ac:	31 05       	cpc	r19, r1
    31ae:	69 f0       	breq	.+26     	; 0x31ca <LCD_moveCursor+0x5e>
    31b0:	8c 81       	ldd	r24, Y+4	; 0x04
    31b2:	9d 81       	ldd	r25, Y+5	; 0x05
    31b4:	83 30       	cpi	r24, 0x03	; 3
    31b6:	91 05       	cpc	r25, r1
    31b8:	61 f0       	breq	.+24     	; 0x31d2 <LCD_moveCursor+0x66>
    31ba:	0e c0       	rjmp	.+28     	; 0x31d8 <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	0b c0       	rjmp	.+22     	; 0x31d8 <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	80 5c       	subi	r24, 0xC0	; 192
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	07 c0       	rjmp	.+14     	; 0x31d8 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	80 5f       	subi	r24, 0xF0	; 240
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	03 c0       	rjmp	.+6      	; 0x31d8 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	80 5c       	subi	r24, 0xC0	; 192
    31d6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	80 68       	ori	r24, 0x80	; 128
    31dc:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LCD_sendCommand>
}
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <LCD_displayStringRowColumn+0x6>
    31f6:	00 d0       	rcall	.+0      	; 0x31f8 <LCD_displayStringRowColumn+0x8>
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	89 83       	std	Y+1, r24	; 0x01
    31fe:	6a 83       	std	Y+2, r22	; 0x02
    3200:	5c 83       	std	Y+4, r21	; 0x04
    3202:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	6a 81       	ldd	r22, Y+2	; 0x02
    3208:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	9c 81       	ldd	r25, Y+4	; 0x04
    3210:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_displayString>
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LCD_sendCommand>
}
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <main>:
#include"interrupt.h"
#include<util/delay.h>
void ISR_func(void);
uint8 ch = '0';

int main(){
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <main+0x6>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    3240:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_init>
	UART_init(9600);
    3244:	60 e8       	ldi	r22, 0x80	; 128
    3246:	75 e2       	ldi	r23, 0x25	; 37
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 d6 19 	call	0x33ac	; 0x33ac <UART_init>
	INT_CONF int_conf = {INT0_ID,RISING_EDGE};
    3250:	80 e4       	ldi	r24, 0x40	; 64
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	83 e0       	ldi	r24, 0x03	; 3
    3256:	8a 83       	std	Y+2, r24	; 0x02
	INT_init(&int_conf);
    3258:	ce 01       	movw	r24, r28
    325a:	01 96       	adiw	r24, 0x01	; 1
    325c:	0e 94 4e 09 	call	0x129c	; 0x129c <INT_init>
	INT_setISR(ISR_func,0);
    3260:	86 e3       	ldi	r24, 0x36	; 54
    3262:	99 e1       	ldi	r25, 0x19	; 25
    3264:	60 e0       	ldi	r22, 0x00	; 0
    3266:	0e 94 17 0a 	call	0x142e	; 0x142e <INT_setISR>
    326a:	ff cf       	rjmp	.-2      	; 0x326a <main+0x34>

0000326c <ISR_func>:
	while(1);
}

void ISR_func(void){
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	2e 97       	sbiw	r28, 0x0e	; 14
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
	if('9' == ch)
    3280:	80 91 68 00 	lds	r24, 0x0068
    3284:	89 33       	cpi	r24, 0x39	; 57
    3286:	21 f4       	brne	.+8      	; 0x3290 <ISR_func+0x24>
	{
		ch = '0';
    3288:	80 e3       	ldi	r24, 0x30	; 48
    328a:	80 93 68 00 	sts	0x0068, r24
    328e:	05 c0       	rjmp	.+10     	; 0x329a <ISR_func+0x2e>
	}
	else{
		ch++;
    3290:	80 91 68 00 	lds	r24, 0x0068
    3294:	8f 5f       	subi	r24, 0xFF	; 255
    3296:	80 93 68 00 	sts	0x0068, r24
	}

	UART_sendByte(ch);
    329a:	80 91 68 00 	lds	r24, 0x0068
    329e:	0e 94 22 1a 	call	0x3444	; 0x3444 <UART_sendByte>
	LCD_clearScreen();
    32a2:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_moveCursor>
	LCD_displayCharacter(ch);
    32ae:	80 91 68 00 	lds	r24, 0x0068
    32b2:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayCharacter>
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	aa ef       	ldi	r26, 0xFA	; 250
    32bc:	b3 e4       	ldi	r27, 0x43	; 67
    32be:	8b 87       	std	Y+11, r24	; 0x0b
    32c0:	9c 87       	std	Y+12, r25	; 0x0c
    32c2:	ad 87       	std	Y+13, r26	; 0x0d
    32c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    32cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4a e7       	ldi	r20, 0x7A	; 122
    32d4:	55 e4       	ldi	r21, 0x45	; 69
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	8f 83       	std	Y+7, r24	; 0x07
    32e0:	98 87       	std	Y+8, r25	; 0x08
    32e2:	a9 87       	std	Y+9, r26	; 0x09
    32e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e6:	6f 81       	ldd	r22, Y+7	; 0x07
    32e8:	78 85       	ldd	r23, Y+8	; 0x08
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e8       	ldi	r20, 0x80	; 128
    32f4:	5f e3       	ldi	r21, 0x3F	; 63
    32f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32fa:	88 23       	and	r24, r24
    32fc:	2c f4       	brge	.+10     	; 0x3308 <ISR_func+0x9c>
		__ticks = 1;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	3f c0       	rjmp	.+126    	; 0x3386 <ISR_func+0x11a>
	else if (__tmp > 65535)
    3308:	6f 81       	ldd	r22, Y+7	; 0x07
    330a:	78 85       	ldd	r23, Y+8	; 0x08
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331c:	18 16       	cp	r1, r24
    331e:	4c f5       	brge	.+82     	; 0x3372 <ISR_func+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3320:	6b 85       	ldd	r22, Y+11	; 0x0b
    3322:	7c 85       	ldd	r23, Y+12	; 0x0c
    3324:	8d 85       	ldd	r24, Y+13	; 0x0d
    3326:	9e 85       	ldd	r25, Y+14	; 0x0e
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	9e 83       	std	Y+6, r25	; 0x06
    3346:	8d 83       	std	Y+5, r24	; 0x05
    3348:	0f c0       	rjmp	.+30     	; 0x3368 <ISR_func+0xfc>
    334a:	80 e9       	ldi	r24, 0x90	; 144
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	9c 83       	std	Y+4, r25	; 0x04
    3350:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	9c 81       	ldd	r25, Y+4	; 0x04
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <ISR_func+0xea>
    335a:	9c 83       	std	Y+4, r25	; 0x04
    335c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335e:	8d 81       	ldd	r24, Y+5	; 0x05
    3360:	9e 81       	ldd	r25, Y+6	; 0x06
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	9e 83       	std	Y+6, r25	; 0x06
    3366:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	69 f7       	brne	.-38     	; 0x334a <ISR_func+0xde>
    3370:	14 c0       	rjmp	.+40     	; 0x339a <ISR_func+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3372:	6f 81       	ldd	r22, Y+7	; 0x07
    3374:	78 85       	ldd	r23, Y+8	; 0x08
    3376:	89 85       	ldd	r24, Y+9	; 0x09
    3378:	9a 85       	ldd	r25, Y+10	; 0x0a
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9e 83       	std	Y+6, r25	; 0x06
    3384:	8d 83       	std	Y+5, r24	; 0x05
    3386:	8d 81       	ldd	r24, Y+5	; 0x05
    3388:	9e 81       	ldd	r25, Y+6	; 0x06
    338a:	9a 83       	std	Y+2, r25	; 0x02
    338c:	89 83       	std	Y+1, r24	; 0x01
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	9a 81       	ldd	r25, Y+2	; 0x02
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <ISR_func+0x126>
    3396:	9a 83       	std	Y+2, r25	; 0x02
    3398:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    339a:	2e 96       	adiw	r28, 0x0e	; 14
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <UART_init+0x6>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <UART_init+0x8>
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <UART_init+0xa>
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	6b 83       	std	Y+3, r22	; 0x03
    33bc:	7c 83       	std	Y+4, r23	; 0x04
    33be:	8d 83       	std	Y+5, r24	; 0x05
    33c0:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    33c2:	1a 82       	std	Y+2, r1	; 0x02
    33c4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    33c6:	eb e2       	ldi	r30, 0x2B	; 43
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	82 e0       	ldi	r24, 0x02	; 2
    33cc:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    33ce:	ea e2       	ldi	r30, 0x2A	; 42
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	88 e1       	ldi	r24, 0x18	; 24
    33d4:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    33d6:	e0 e4       	ldi	r30, 0x40	; 64
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	86 e8       	ldi	r24, 0x86	; 134
    33dc:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	ad 81       	ldd	r26, Y+5	; 0x05
    33e4:	be 81       	ldd	r27, Y+6	; 0x06
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	aa 1f       	adc	r26, r26
    33ec:	bb 1f       	adc	r27, r27
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	aa 1f       	adc	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	aa 1f       	adc	r26, r26
    33fc:	bb 1f       	adc	r27, r27
    33fe:	9c 01       	movw	r18, r24
    3400:	ad 01       	movw	r20, r26
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	94 e2       	ldi	r25, 0x24	; 36
    3406:	a4 ef       	ldi	r26, 0xF4	; 244
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <__udivmodsi4>
    3412:	da 01       	movw	r26, r20
    3414:	c9 01       	movw	r24, r18
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9a 83       	std	Y+2, r25	; 0x02
    341a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    341c:	e0 e4       	ldi	r30, 0x40	; 64
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	89 2f       	mov	r24, r25
    3426:	99 27       	eor	r25, r25
    3428:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    342a:	e9 e2       	ldi	r30, 0x29	; 41
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	80 83       	st	Z, r24
}
    3432:	26 96       	adiw	r28, 0x06	; 6
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	0f 92       	push	r0
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3450:	eb e2       	ldi	r30, 0x2B	; 43
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	88 2f       	mov	r24, r24
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	80 72       	andi	r24, 0x20	; 32
    345c:	90 70       	andi	r25, 0x00	; 0
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	b9 f3       	breq	.-18     	; 0x3450 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3462:	ec e2       	ldi	r30, 0x2C	; 44
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    347a:	eb e2       	ldi	r30, 0x2B	; 43
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	88 23       	and	r24, r24
    3482:	dc f7       	brge	.-10     	; 0x347a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3484:	ec e2       	ldi	r30, 0x2C	; 44
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
}
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <UART_sendString+0x6>
    3496:	0f 92       	push	r0
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	9b 83       	std	Y+3, r25	; 0x03
    349e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34a0:	19 82       	std	Y+1, r1	; 0x01
    34a2:	0e c0       	rjmp	.+28     	; 0x34c0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	28 2f       	mov	r18, r24
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9b 81       	ldd	r25, Y+3	; 0x03
    34ae:	fc 01       	movw	r30, r24
    34b0:	e2 0f       	add	r30, r18
    34b2:	f3 1f       	adc	r31, r19
    34b4:	80 81       	ld	r24, Z
    34b6:	0e 94 22 1a 	call	0x3444	; 0x3444 <UART_sendByte>
		i++;
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	8f 5f       	subi	r24, 0xFF	; 255
    34be:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ca:	fc 01       	movw	r30, r24
    34cc:	e2 0f       	add	r30, r18
    34ce:	f3 1f       	adc	r31, r19
    34d0:	80 81       	ld	r24, Z
    34d2:	88 23       	and	r24, r24
    34d4:	39 f7       	brne	.-50     	; 0x34a4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <UART_receiveString+0xa>
    34ec:	0f 92       	push	r0
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	9b 83       	std	Y+3, r25	; 0x03
    34f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34f6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	28 2f       	mov	r18, r24
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	9b 81       	ldd	r25, Y+3	; 0x03
    3502:	8c 01       	movw	r16, r24
    3504:	02 0f       	add	r16, r18
    3506:	13 1f       	adc	r17, r19
    3508:	0e 94 39 1a 	call	0x3472	; 0x3472 <UART_recieveByte>
    350c:	f8 01       	movw	r30, r16
    350e:	80 83       	st	Z, r24
    3510:	0f c0       	rjmp	.+30     	; 0x3530 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	8f 5f       	subi	r24, 0xFF	; 255
    3516:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	28 2f       	mov	r18, r24
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	8c 01       	movw	r16, r24
    3524:	02 0f       	add	r16, r18
    3526:	13 1f       	adc	r17, r19
    3528:	0e 94 39 1a 	call	0x3472	; 0x3472 <UART_recieveByte>
    352c:	f8 01       	movw	r30, r16
    352e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	28 2f       	mov	r18, r24
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	9b 81       	ldd	r25, Y+3	; 0x03
    353a:	fc 01       	movw	r30, r24
    353c:	e2 0f       	add	r30, r18
    353e:	f3 1f       	adc	r31, r19
    3540:	80 81       	ld	r24, Z
    3542:	83 32       	cpi	r24, 0x23	; 35
    3544:	31 f7       	brne	.-52     	; 0x3512 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	8a 81       	ldd	r24, Y+2	; 0x02
    354e:	9b 81       	ldd	r25, Y+3	; 0x03
    3550:	fc 01       	movw	r30, r24
    3552:	e2 0f       	add	r30, r18
    3554:	f3 1f       	adc	r31, r19
    3556:	10 82       	st	Z, r1
}
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	08 95       	ret

00003568 <__udivmodsi4>:
    3568:	a1 e2       	ldi	r26, 0x21	; 33
    356a:	1a 2e       	mov	r1, r26
    356c:	aa 1b       	sub	r26, r26
    356e:	bb 1b       	sub	r27, r27
    3570:	fd 01       	movw	r30, r26
    3572:	0d c0       	rjmp	.+26     	; 0x358e <__udivmodsi4_ep>

00003574 <__udivmodsi4_loop>:
    3574:	aa 1f       	adc	r26, r26
    3576:	bb 1f       	adc	r27, r27
    3578:	ee 1f       	adc	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	a2 17       	cp	r26, r18
    357e:	b3 07       	cpc	r27, r19
    3580:	e4 07       	cpc	r30, r20
    3582:	f5 07       	cpc	r31, r21
    3584:	20 f0       	brcs	.+8      	; 0x358e <__udivmodsi4_ep>
    3586:	a2 1b       	sub	r26, r18
    3588:	b3 0b       	sbc	r27, r19
    358a:	e4 0b       	sbc	r30, r20
    358c:	f5 0b       	sbc	r31, r21

0000358e <__udivmodsi4_ep>:
    358e:	66 1f       	adc	r22, r22
    3590:	77 1f       	adc	r23, r23
    3592:	88 1f       	adc	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	1a 94       	dec	r1
    3598:	69 f7       	brne	.-38     	; 0x3574 <__udivmodsi4_loop>
    359a:	60 95       	com	r22
    359c:	70 95       	com	r23
    359e:	80 95       	com	r24
    35a0:	90 95       	com	r25
    35a2:	9b 01       	movw	r18, r22
    35a4:	ac 01       	movw	r20, r24
    35a6:	bd 01       	movw	r22, r26
    35a8:	cf 01       	movw	r24, r30
    35aa:	08 95       	ret

000035ac <__prologue_saves__>:
    35ac:	2f 92       	push	r2
    35ae:	3f 92       	push	r3
    35b0:	4f 92       	push	r4
    35b2:	5f 92       	push	r5
    35b4:	6f 92       	push	r6
    35b6:	7f 92       	push	r7
    35b8:	8f 92       	push	r8
    35ba:	9f 92       	push	r9
    35bc:	af 92       	push	r10
    35be:	bf 92       	push	r11
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	ca 1b       	sub	r28, r26
    35d6:	db 0b       	sbc	r29, r27
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	09 94       	ijmp

000035e4 <__epilogue_restores__>:
    35e4:	2a 88       	ldd	r2, Y+18	; 0x12
    35e6:	39 88       	ldd	r3, Y+17	; 0x11
    35e8:	48 88       	ldd	r4, Y+16	; 0x10
    35ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    35ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f6:	b9 84       	ldd	r11, Y+9	; 0x09
    35f8:	c8 84       	ldd	r12, Y+8	; 0x08
    35fa:	df 80       	ldd	r13, Y+7	; 0x07
    35fc:	ee 80       	ldd	r14, Y+6	; 0x06
    35fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3600:	0c 81       	ldd	r16, Y+4	; 0x04
    3602:	1b 81       	ldd	r17, Y+3	; 0x03
    3604:	aa 81       	ldd	r26, Y+2	; 0x02
    3606:	b9 81       	ldd	r27, Y+1	; 0x01
    3608:	ce 0f       	add	r28, r30
    360a:	d1 1d       	adc	r29, r1
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
    3616:	ed 01       	movw	r28, r26
    3618:	08 95       	ret

0000361a <itoa>:
    361a:	fb 01       	movw	r30, r22
    361c:	9f 01       	movw	r18, r30
    361e:	e8 94       	clt
    3620:	42 30       	cpi	r20, 0x02	; 2
    3622:	c4 f0       	brlt	.+48     	; 0x3654 <itoa+0x3a>
    3624:	45 32       	cpi	r20, 0x25	; 37
    3626:	b4 f4       	brge	.+44     	; 0x3654 <itoa+0x3a>
    3628:	4a 30       	cpi	r20, 0x0A	; 10
    362a:	29 f4       	brne	.+10     	; 0x3636 <itoa+0x1c>
    362c:	97 fb       	bst	r25, 7
    362e:	1e f4       	brtc	.+6      	; 0x3636 <itoa+0x1c>
    3630:	90 95       	com	r25
    3632:	81 95       	neg	r24
    3634:	9f 4f       	sbci	r25, 0xFF	; 255
    3636:	64 2f       	mov	r22, r20
    3638:	77 27       	eor	r23, r23
    363a:	0e 94 3e 1b 	call	0x367c	; 0x367c <__udivmodhi4>
    363e:	80 5d       	subi	r24, 0xD0	; 208
    3640:	8a 33       	cpi	r24, 0x3A	; 58
    3642:	0c f0       	brlt	.+2      	; 0x3646 <itoa+0x2c>
    3644:	89 5d       	subi	r24, 0xD9	; 217
    3646:	81 93       	st	Z+, r24
    3648:	cb 01       	movw	r24, r22
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	a1 f7       	brne	.-24     	; 0x3636 <itoa+0x1c>
    364e:	16 f4       	brtc	.+4      	; 0x3654 <itoa+0x3a>
    3650:	5d e2       	ldi	r21, 0x2D	; 45
    3652:	51 93       	st	Z+, r21
    3654:	10 82       	st	Z, r1
    3656:	c9 01       	movw	r24, r18
    3658:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <strrev>

0000365c <strrev>:
    365c:	dc 01       	movw	r26, r24
    365e:	fc 01       	movw	r30, r24
    3660:	67 2f       	mov	r22, r23
    3662:	71 91       	ld	r23, Z+
    3664:	77 23       	and	r23, r23
    3666:	e1 f7       	brne	.-8      	; 0x3660 <strrev+0x4>
    3668:	32 97       	sbiw	r30, 0x02	; 2
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <strrev+0x18>
    366c:	7c 91       	ld	r23, X
    366e:	6d 93       	st	X+, r22
    3670:	70 83       	st	Z, r23
    3672:	62 91       	ld	r22, -Z
    3674:	ae 17       	cp	r26, r30
    3676:	bf 07       	cpc	r27, r31
    3678:	c8 f3       	brcs	.-14     	; 0x366c <strrev+0x10>
    367a:	08 95       	ret

0000367c <__udivmodhi4>:
    367c:	aa 1b       	sub	r26, r26
    367e:	bb 1b       	sub	r27, r27
    3680:	51 e1       	ldi	r21, 0x11	; 17
    3682:	07 c0       	rjmp	.+14     	; 0x3692 <__udivmodhi4_ep>

00003684 <__udivmodhi4_loop>:
    3684:	aa 1f       	adc	r26, r26
    3686:	bb 1f       	adc	r27, r27
    3688:	a6 17       	cp	r26, r22
    368a:	b7 07       	cpc	r27, r23
    368c:	10 f0       	brcs	.+4      	; 0x3692 <__udivmodhi4_ep>
    368e:	a6 1b       	sub	r26, r22
    3690:	b7 0b       	sbc	r27, r23

00003692 <__udivmodhi4_ep>:
    3692:	88 1f       	adc	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	5a 95       	dec	r21
    3698:	a9 f7       	brne	.-22     	; 0x3684 <__udivmodhi4_loop>
    369a:	80 95       	com	r24
    369c:	90 95       	com	r25
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	08 95       	ret

000036a4 <_exit>:
    36a4:	f8 94       	cli

000036a6 <__stop_program>:
    36a6:	ff cf       	rjmp	.-2      	; 0x36a6 <__stop_program>
